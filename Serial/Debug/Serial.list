
Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800138c  0800138c  0000238c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014e0  080014e0  000036b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080014e0  080014e0  000024e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080014e8  080014e8  000036b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014e8  080014e8  000024e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080014ec  080014ec  000024ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006b0  20000000  080014f0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000036b0  2**0
                  CONTENTS
 10 .bss          00000168  200006b0  200006b0  000036b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000818  20000818  000036b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000036b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000019cf  00000000  00000000  000036e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006c3  00000000  00000000  000050af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000100  00000000  00000000  00005778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ab  00000000  00000000  00005878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015e6c  00000000  00000000  00005923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001748  00000000  00000000  0001b78f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076988  00000000  00000000  0001ced7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009385f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007f0  00000000  00000000  000938a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00094094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200006b0 	.word	0x200006b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001374 	.word	0x08001374

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200006b4 	.word	0x200006b4
 80001dc:	08001374 	.word	0x08001374

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <delay>:
	 SerialSendString(string_buffer, &USART1_PORT);
	 SerialSendString((uint8_t*)"\r\n\r\n", &USART1_PORT);
}

// Simple delay function
void delay(volatile uint32_t count) {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    for(uint32_t i = 0; i < count; i++);
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	e002      	b.n	8000294 <delay+0x14>
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	3301      	adds	r3, #1
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	68fa      	ldr	r2, [r7, #12]
 8000298:	429a      	cmp	r2, r3
 800029a:	d3f8      	bcc.n	800028e <delay+0xe>
}
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
	...

080002ac <usart2_loopback_callback>:

void usart2_loopback_callback(uint8_t *string_buffer, uint8_t length) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	460b      	mov	r3, r1
 80002b6:	70fb      	strb	r3, [r7, #3]
    // Echo the received data to USART1 for verification
    SerialSendString((uint8_t*)"LOOPBACK SUCCESS! Received: ", &USART1_PORT);
 80002b8:	4907      	ldr	r1, [pc, #28]	@ (80002d8 <usart2_loopback_callback+0x2c>)
 80002ba:	4808      	ldr	r0, [pc, #32]	@ (80002dc <usart2_loopback_callback+0x30>)
 80002bc:	f000 f942 	bl	8000544 <SerialSendString>
    SerialSendString(string_buffer, &USART1_PORT);
 80002c0:	4905      	ldr	r1, [pc, #20]	@ (80002d8 <usart2_loopback_callback+0x2c>)
 80002c2:	6878      	ldr	r0, [r7, #4]
 80002c4:	f000 f93e 	bl	8000544 <SerialSendString>
    SerialSendString((uint8_t*)"\r\n", &USART1_PORT);
 80002c8:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <usart2_loopback_callback+0x2c>)
 80002ca:	4805      	ldr	r0, [pc, #20]	@ (80002e0 <usart2_loopback_callback+0x34>)
 80002cc:	f000 f93a 	bl	8000544 <SerialSendString>
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000000 	.word	0x20000000
 80002dc:	080013f8 	.word	0x080013f8
 80002e0:	08001418 	.word	0x08001418

080002e4 <main>:

int main(void) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b08a      	sub	sp, #40	@ 0x28
 80002e8:	af00      	add	r7, sp, #0
    // Initialize serial ports
    SerialInitialise(BAUD_115200, &USART1_PORT, NULL);
 80002ea:	2200      	movs	r2, #0
 80002ec:	4921      	ldr	r1, [pc, #132]	@ (8000374 <main+0x90>)
 80002ee:	2004      	movs	r0, #4
 80002f0:	f000 f856 	bl	80003a0 <SerialInitialise>
    SerialInitialise(BAUD_115200, &USART2_PORT, &usart2_loopback_callback);
 80002f4:	4a20      	ldr	r2, [pc, #128]	@ (8000378 <main+0x94>)
 80002f6:	4921      	ldr	r1, [pc, #132]	@ (800037c <main+0x98>)
 80002f8:	2004      	movs	r0, #4
 80002fa:	f000 f851 	bl	80003a0 <SerialInitialise>

    // Enable RX interrupt for USART2 to catch loopback data
    EnableSerialInterrupts(&USART2_PORT);
 80002fe:	481f      	ldr	r0, [pc, #124]	@ (800037c <main+0x98>)
 8000300:	f000 f986 	bl	8000610 <EnableSerialInterrupts>

    // Send welcome message via USART1
    SerialSendString((uint8_t*)"USART2 Loopback Test\r\n", &USART1_PORT);
 8000304:	491b      	ldr	r1, [pc, #108]	@ (8000374 <main+0x90>)
 8000306:	481e      	ldr	r0, [pc, #120]	@ (8000380 <main+0x9c>)
 8000308:	f000 f91c 	bl	8000544 <SerialSendString>
    SerialSendString((uint8_t*)"Connect PA2 to PA3 for loopback test\r\n", &USART1_PORT);
 800030c:	4919      	ldr	r1, [pc, #100]	@ (8000374 <main+0x90>)
 800030e:	481d      	ldr	r0, [pc, #116]	@ (8000384 <main+0xa0>)
 8000310:	f000 f918 	bl	8000544 <SerialSendString>
    SerialSendString((uint8_t*)"Starting test in 3 seconds...\r\n", &USART1_PORT);
 8000314:	4917      	ldr	r1, [pc, #92]	@ (8000374 <main+0x90>)
 8000316:	481c      	ldr	r0, [pc, #112]	@ (8000388 <main+0xa4>)
 8000318:	f000 f914 	bl	8000544 <SerialSendString>

    // Wait a moment to give time for connection
    delay(8000000);
 800031c:	481b      	ldr	r0, [pc, #108]	@ (800038c <main+0xa8>)
 800031e:	f7ff ffaf 	bl	8000280 <delay>

    // Main test loop
    uint8_t test_count = 1;
 8000322:	2301      	movs	r3, #1
 8000324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while(1) {
        // Create test message with counter
        char test_msg[32];
        sprintf(test_msg, "Test #%d", test_count++);
 8000328:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800032c:	1c5a      	adds	r2, r3, #1
 800032e:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8000332:	461a      	mov	r2, r3
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4916      	ldr	r1, [pc, #88]	@ (8000390 <main+0xac>)
 8000338:	4618      	mov	r0, r3
 800033a:	f000 fb7b 	bl	8000a34 <siprintf>

        // Inform via USART1 that we're sending
        SerialSendString((uint8_t*)"Sending: ", &USART1_PORT);
 800033e:	490d      	ldr	r1, [pc, #52]	@ (8000374 <main+0x90>)
 8000340:	4814      	ldr	r0, [pc, #80]	@ (8000394 <main+0xb0>)
 8000342:	f000 f8ff 	bl	8000544 <SerialSendString>
        SerialSendString((uint8_t*)test_msg, &USART1_PORT);
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	490a      	ldr	r1, [pc, #40]	@ (8000374 <main+0x90>)
 800034a:	4618      	mov	r0, r3
 800034c:	f000 f8fa 	bl	8000544 <SerialSendString>
        SerialSendString((uint8_t*)"\r\n", &USART1_PORT);
 8000350:	4908      	ldr	r1, [pc, #32]	@ (8000374 <main+0x90>)
 8000352:	4811      	ldr	r0, [pc, #68]	@ (8000398 <main+0xb4>)
 8000354:	f000 f8f6 	bl	8000544 <SerialSendString>

        // Send test data through USART2 TX (PA2)
        // This should loop back through PA3 and trigger the callback
        SerialSendString((uint8_t*)test_msg, &USART2_PORT);
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	4908      	ldr	r1, [pc, #32]	@ (800037c <main+0x98>)
 800035c:	4618      	mov	r0, r3
 800035e:	f000 f8f1 	bl	8000544 <SerialSendString>
        SerialSendString((uint8_t*)"\r\n", &USART2_PORT);
 8000362:	4906      	ldr	r1, [pc, #24]	@ (800037c <main+0x98>)
 8000364:	480c      	ldr	r0, [pc, #48]	@ (8000398 <main+0xb4>)
 8000366:	f000 f8ed 	bl	8000544 <SerialSendString>

        // Wait between tests
        delay(10000000);
 800036a:	480c      	ldr	r0, [pc, #48]	@ (800039c <main+0xb8>)
 800036c:	f7ff ff88 	bl	8000280 <delay>
    while(1) {
 8000370:	bf00      	nop
 8000372:	e7d9      	b.n	8000328 <main+0x44>
 8000374:	20000000 	.word	0x20000000
 8000378:	080002ad 	.word	0x080002ad
 800037c:	20000330 	.word	0x20000330
 8000380:	0800141c 	.word	0x0800141c
 8000384:	08001434 	.word	0x08001434
 8000388:	0800145c 	.word	0x0800145c
 800038c:	007a1200 	.word	0x007a1200
 8000390:	0800147c 	.word	0x0800147c
 8000394:	08001488 	.word	0x08001488
 8000398:	08001418 	.word	0x08001418
 800039c:	00989680 	.word	0x00989680

080003a0 <SerialInitialise>:
};



// Initialize the serial port with specified baud rate and a receive completion callback
void SerialInitialise(BaudRate baudRate, SerialPort *serial_port, void (*callback)(uint8_t *data, uint8_t length)) {
 80003a0:	b480      	push	{r7}
 80003a2:	b087      	sub	sp, #28
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
 80003ac:	73fb      	strb	r3, [r7, #15]

    // Set the function to call when a full string is received
    serial_port->completion_function = callback;
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	625a      	str	r2, [r3, #36]	@ 0x24

    // Enable peripheral clocks required by the system and GPIO
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;      // Power interface clock
 80003b4:	4b44      	ldr	r3, [pc, #272]	@ (80004c8 <SerialInitialise+0x128>)
 80003b6:	69db      	ldr	r3, [r3, #28]
 80003b8:	4a43      	ldr	r2, [pc, #268]	@ (80004c8 <SerialInitialise+0x128>)
 80003ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003be:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;   // System config clock
 80003c0:	4b41      	ldr	r3, [pc, #260]	@ (80004c8 <SerialInitialise+0x128>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a40      	ldr	r2, [pc, #256]	@ (80004c8 <SerialInitialise+0x128>)
 80003c6:	f043 0301 	orr.w	r3, r3, #1
 80003ca:	6193      	str	r3, [r2, #24]
    RCC->AHBENR |= serial_port->MaskAHBENR; // Enable GPIO port clock
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	691a      	ldr	r2, [r3, #16]
 80003d0:	4b3d      	ldr	r3, [pc, #244]	@ (80004c8 <SerialInitialise+0x128>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	493c      	ldr	r1, [pc, #240]	@ (80004c8 <SerialInitialise+0x128>)
 80003d6:	4313      	orrs	r3, r2
 80003d8:	614b      	str	r3, [r1, #20]

    // Set the GPIO pins to alternate function mode (for USART)
    serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	68ba      	ldr	r2, [r7, #8]
 80003e0:	6952      	ldr	r2, [r2, #20]
 80003e2:	601a      	str	r2, [r3, #0]

    // Set GPIO pins to high speed mode
    serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	68ba      	ldr	r2, [r7, #8]
 80003ea:	6992      	ldr	r2, [r2, #24]
 80003ec:	609a      	str	r2, [r3, #8]

    // Select alternate function for each pin
    serial_port->GPIO->AFR[0] &= ~serial_port->SerialPinAlternatePinValueLow;
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	43d9      	mvns	r1, r3
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	6a1a      	ldr	r2, [r3, #32]
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	400a      	ands	r2, r1
 8000400:	621a      	str	r2, [r3, #32]
    serial_port->GPIO->AFR[0] |=  serial_port->SerialPinAlternatePinValueLow;
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	69d9      	ldr	r1, [r3, #28]
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	6a1a      	ldr	r2, [r3, #32]
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	430a      	orrs	r2, r1
 8000412:	621a      	str	r2, [r3, #32]

    serial_port->GPIO->AFR[1] &= ~serial_port->SerialPinAlternatePinValueHigh;
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	6a1b      	ldr	r3, [r3, #32]
 8000418:	43d9      	mvns	r1, r3
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	400a      	ands	r2, r1
 8000426:	625a      	str	r2, [r3, #36]	@ 0x24
    serial_port->GPIO->AFR[1] |=  serial_port->SerialPinAlternatePinValueHigh;
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	6a19      	ldr	r1, [r3, #32]
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	430a      	orrs	r2, r1
 8000438:	625a      	str	r2, [r3, #36]	@ 0x24

    // Enable USART peripheral clock
    RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	68da      	ldr	r2, [r3, #12]
 800043e:	4b22      	ldr	r3, [pc, #136]	@ (80004c8 <SerialInitialise+0x128>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	4921      	ldr	r1, [pc, #132]	@ (80004c8 <SerialInitialise+0x128>)
 8000444:	4313      	orrs	r3, r2
 8000446:	61cb      	str	r3, [r1, #28]
    RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	689a      	ldr	r2, [r3, #8]
 800044c:	4b1e      	ldr	r3, [pc, #120]	@ (80004c8 <SerialInitialise+0x128>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	491d      	ldr	r1, [pc, #116]	@ (80004c8 <SerialInitialise+0x128>)
 8000452:	4313      	orrs	r3, r2
 8000454:	618b      	str	r3, [r1, #24]

    // Set baud rate register (BRR) based on selected baud rate
    uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR;
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	330c      	adds	r3, #12
 800045c:	617b      	str	r3, [r7, #20]

    switch(baudRate) {
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	2b04      	cmp	r3, #4
 8000462:	d823      	bhi.n	80004ac <SerialInitialise+0x10c>
 8000464:	a201      	add	r2, pc, #4	@ (adr r2, 800046c <SerialInitialise+0xcc>)
 8000466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046a:	bf00      	nop
 800046c:	08000481 	.word	0x08000481
 8000470:	0800048b 	.word	0x0800048b
 8000474:	08000495 	.word	0x08000495
 8000478:	0800049d 	.word	0x0800049d
 800047c:	080004a5 	.word	0x080004a5
        case BAUD_9600:
            *baud_rate_config = 0x341;  // BRR value for 9600 baud at 8 MHz
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	f240 3241 	movw	r2, #833	@ 0x341
 8000486:	801a      	strh	r2, [r3, #0]
            break;
 8000488:	e010      	b.n	80004ac <SerialInitialise+0x10c>
        case BAUD_19200:
            *baud_rate_config = 0x1A0;
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000490:	801a      	strh	r2, [r3, #0]
            break;
 8000492:	e00b      	b.n	80004ac <SerialInitialise+0x10c>
        case BAUD_38400:
            *baud_rate_config = 0xD0;
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	22d0      	movs	r2, #208	@ 0xd0
 8000498:	801a      	strh	r2, [r3, #0]
            break;
 800049a:	e007      	b.n	80004ac <SerialInitialise+0x10c>
        case BAUD_57600:
            *baud_rate_config = 0x8B;
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	228b      	movs	r2, #139	@ 0x8b
 80004a0:	801a      	strh	r2, [r3, #0]
            break;
 80004a2:	e003      	b.n	80004ac <SerialInitialise+0x10c>
        case BAUD_115200:
            *baud_rate_config = 0x46;
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	2246      	movs	r2, #70	@ 0x46
 80004a8:	801a      	strh	r2, [r3, #0]
            break;
 80004aa:	bf00      	nop
    }

    // Enable USART transmitter and receiver, and the USART itself
    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f042 020d 	orr.w	r2, r2, #13
 80004ba:	601a      	str	r2, [r3, #0]
}
 80004bc:	bf00      	nop
 80004be:	371c      	adds	r7, #28
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	40021000 	.word	0x40021000

080004cc <SerialOutputChar>:

// Transmit a single character via USART using non-blocking (interrupt-based) method
void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	6039      	str	r1, [r7, #0]
 80004d6:	71fb      	strb	r3, [r7, #7]
    // Wait (stall) if buffer is full (circular buffer wraparound)
    while (((serial_port->tx_head + 1) % TX_BUFFER_SIZE) == serial_port->tx_tail);
 80004d8:	bf00      	nop
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80004de:	b29b      	uxth	r3, r3
 80004e0:	3301      	adds	r3, #1
 80004e2:	425a      	negs	r2, r3
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	b2d2      	uxtb	r2, r2
 80004e8:	bf58      	it	pl
 80004ea:	4253      	negpl	r3, r2
 80004ec:	683a      	ldr	r2, [r7, #0]
 80004ee:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80004f0:	b292      	uxth	r2, r2
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d0f1      	beq.n	80004da <SerialOutputChar+0xe>

    // Store character in TX buffer
    serial_port->tx_buffer[serial_port->tx_head] = data;
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80004fa:	b29b      	uxth	r3, r3
 80004fc:	461a      	mov	r2, r3
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	4413      	add	r3, r2
 8000502:	79fa      	ldrb	r2, [r7, #7]
 8000504:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    // Advance head index, wrapping around if needed
    serial_port->tx_head = (serial_port->tx_head + 1) % TX_BUFFER_SIZE;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800050c:	b29b      	uxth	r3, r3
 800050e:	3301      	adds	r3, #1
 8000510:	425a      	negs	r2, r3
 8000512:	b2db      	uxtb	r3, r3
 8000514:	b2d2      	uxtb	r2, r2
 8000516:	bf58      	it	pl
 8000518:	4253      	negpl	r3, r2
 800051a:	b29a      	uxth	r2, r3
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	851a      	strh	r2, [r3, #40]	@ 0x28

    // Mark transmitter as active and enable TXE interrupt to begin sending
    serial_port->tx_busy = 1;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	2201      	movs	r2, #1
 8000524:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    serial_port->UART->CR1 |= USART_CR1_TXEIE;
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <SerialSendString>:

// Transmit a full null-terminated string via USART using interrupt-based method
void SerialSendString(uint8_t *pt, SerialPort *serial_port) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
    uint32_t counter = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]

    // Send each character until null-terminator is reached
    while (*pt) {
 8000552:	e00b      	b.n	800056c <SerialSendString+0x28>
        SerialOutputChar(*pt, serial_port);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	6839      	ldr	r1, [r7, #0]
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ffb6 	bl	80004cc <SerialOutputChar>
        counter++;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3301      	adds	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
        pt++;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	3301      	adds	r3, #1
 800056a:	607b      	str	r3, [r7, #4]
    while (*pt) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1ef      	bne.n	8000554 <SerialSendString+0x10>
    }
}
 8000574:	bf00      	nop
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800058a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058e:	2b00      	cmp	r3, #0
 8000590:	db0b      	blt.n	80005aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	f003 021f 	and.w	r2, r3, #31
 8000598:	4907      	ldr	r1, [pc, #28]	@ (80005b8 <__NVIC_EnableIRQ+0x38>)
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	095b      	lsrs	r3, r3, #5
 80005a0:	2001      	movs	r0, #1
 80005a2:	fa00 f202 	lsl.w	r2, r0, r2
 80005a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000e100 	.word	0xe000e100

080005bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	6039      	str	r1, [r7, #0]
 80005c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db0a      	blt.n	80005e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	490c      	ldr	r1, [pc, #48]	@ (8000608 <__NVIC_SetPriority+0x4c>)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	0112      	lsls	r2, r2, #4
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	440b      	add	r3, r1
 80005e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005e4:	e00a      	b.n	80005fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4908      	ldr	r1, [pc, #32]	@ (800060c <__NVIC_SetPriority+0x50>)
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	3b04      	subs	r3, #4
 80005f4:	0112      	lsls	r2, r2, #4
 80005f6:	b2d2      	uxtb	r2, r2
 80005f8:	440b      	add	r3, r1
 80005fa:	761a      	strb	r2, [r3, #24]
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	e000e100 	.word	0xe000e100
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <EnableSerialInterrupts>:
#include "serial.h"
#include "serial_interrupt.h"
#include "stm32f303xc.h"


void EnableSerialInterrupts(SerialPort *serial_port) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
    // Disable global interrupts to prevent issues during setup
    __disable_irq();

    // Reset flags and index
    serial_port->rx_index = 0;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2200      	movs	r2, #0
 8000620:	f883 232d 	strb.w	r2, [r3, #813]	@ 0x32d
    serial_port->string_received = 0;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	f883 232e 	strb.w	r2, [r3, #814]	@ 0x32e

    // Clear both RX buffers
    for (int i = 0; i < BUFFER_SIZE; i++) {
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	e010      	b.n	8000654 <EnableSerialInterrupts+0x44>
        serial_port->rx_buffer1[i] = 0;
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	4413      	add	r3, r2
 8000638:	f203 132d 	addw	r3, r3, #301	@ 0x12d
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
        serial_port->rx_buffer2[i] = 0;
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	4413      	add	r3, r2
 8000646:	f203 232d 	addw	r3, r3, #557	@ 0x22d
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3301      	adds	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	2bff      	cmp	r3, #255	@ 0xff
 8000658:	ddeb      	ble.n	8000632 <EnableSerialInterrupts+0x22>
    }

    // Enable Receive Not Empty interrupt (triggers when data arrives)
    serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f042 0220 	orr.w	r2, r2, #32
 8000668:	601a      	str	r2, [r3, #0]

    // Enable UART interrupt in the NVIC
    NVIC_EnableIRQ(serial_port->IRQn);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f993 332f 	ldrsb.w	r3, [r3, #815]	@ 0x32f
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff85 	bl	8000580 <__NVIC_EnableIRQ>
    NVIC_SetPriority(serial_port->IRQn, 0);  // Highest priority
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f993 332f 	ldrsb.w	r3, [r3, #815]	@ 0x32f
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ff9c 	bl	80005bc <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8000684:	b662      	cpsie	i
}
 8000686:	bf00      	nop

    // Re-enable global interrupts
    __enable_irq();
}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <HandleUSARTInterrupt>:

void HandleUSARTInterrupt(SerialPort *serial_port) {
 8000690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000692:	b0c5      	sub	sp, #276	@ 0x114
 8000694:	af00      	add	r7, sp, #0
 8000696:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800069a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800069e:	6018      	str	r0, [r3, #0]
	 // ---------------------------
	    // RX SECTION
	    // ---------------------------
	    // Check if RXNE (Receive Data Register Not Empty) is set
	    if (serial_port->UART->ISR & USART_ISR_RXNE) {
 80006a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 0320 	and.w	r3, r3, #32
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	f000 80d8 	beq.w	8000868 <HandleUSARTInterrupt+0x1d8>
	        // Read the incoming character
	        uint8_t received_char = serial_port->UART->RDR;
 80006b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b

	        // Echo the character back for user feedback
	        //SerialOutputChar(received_char, &USART1_PORT);

	        // Only process if there's space in the buffer
	        if (serial_port->rx_index < BUFFER_SIZE - 1) {
 80006cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f893 332d 	ldrb.w	r3, [r3, #813]	@ 0x32d
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2bff      	cmp	r3, #255	@ 0xff
 80006de:	f000 808f 	beq.w	8000800 <HandleUSARTInterrupt+0x170>
	            // Store received character in live RX buffer
	            serial_port->rx_buffer1[serial_port->rx_index++] = received_char;
 80006e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80006e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f893 332d 	ldrb.w	r3, [r3, #813]	@ 0x32d
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	b2d1      	uxtb	r1, r2
 80006f6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80006fa:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80006fe:	6812      	ldr	r2, [r2, #0]
 8000700:	f882 132d 	strb.w	r1, [r2, #813]	@ 0x32d
 8000704:	461a      	mov	r2, r3
 8000706:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800070a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4413      	add	r3, r2
 8000712:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 8000716:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d

	            // Check for end-of-input character (ENTER/RETURN key)
	            if (received_char == '\r' || received_char == '\n') {
 800071a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800071e:	2b0d      	cmp	r3, #13
 8000720:	d004      	beq.n	800072c <HandleUSARTInterrupt+0x9c>
 8000722:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000726:	2b0a      	cmp	r3, #10
 8000728:	f040 809e 	bne.w	8000868 <HandleUSARTInterrupt+0x1d8>
	                // Null-terminate the string
	                serial_port->rx_buffer1[serial_port->rx_index] = '\0';
 800072c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000730:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f893 332d 	ldrb.w	r3, [r3, #813]	@ 0x32d
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000742:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4413      	add	r3, r2
 800074a:	2200      	movs	r2, #0
 800074c:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d
	                serial_port->string_received = 1;
 8000750:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000754:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2201      	movs	r2, #1
 800075c:	f883 232e 	strb.w	r2, [r3, #814]	@ 0x32e

	                // Copy buffer1 to buffer2 (safe for processing outside ISR)
	                for (int i = 0; i < BUFFER_SIZE; i++) {
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000766:	e027      	b.n	80007b8 <HandleUSARTInterrupt+0x128>
	                	serial_port->rx_buffer2[i] = serial_port->rx_buffer1[i];
 8000768:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800076c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000776:	4413      	add	r3, r2
 8000778:	f203 132d 	addw	r3, r3, #301	@ 0x12d
 800077c:	7819      	ldrb	r1, [r3, #0]
 800077e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000782:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800078c:	4413      	add	r3, r2
 800078e:	f203 232d 	addw	r3, r3, #557	@ 0x22d
 8000792:	460a      	mov	r2, r1
 8000794:	701a      	strb	r2, [r3, #0]
	                	serial_port->rx_buffer1[i] = 0; // Clear buffer1 for next message
 8000796:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800079a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80007a4:	4413      	add	r3, r2
 80007a6:	f203 132d 	addw	r3, r3, #301	@ 0x12d
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
	                for (int i = 0; i < BUFFER_SIZE; i++) {
 80007ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80007b2:	3301      	adds	r3, #1
 80007b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80007b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80007bc:	2bff      	cmp	r3, #255	@ 0xff
 80007be:	ddd3      	ble.n	8000768 <HandleUSARTInterrupt+0xd8>
	                }

	                // Trigger the completion callback with the full message
	                serial_port->completion_function(serial_port->rx_buffer2, serial_port->rx_index);
 80007c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007cc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80007d0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80007d4:	6812      	ldr	r2, [r2, #0]
 80007d6:	f202 202d 	addw	r0, r2, #557	@ 0x22d
 80007da:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80007de:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80007e2:	6812      	ldr	r2, [r2, #0]
 80007e4:	f892 232d 	ldrb.w	r2, [r2, #813]	@ 0x32d
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	4611      	mov	r1, r2
 80007ec:	4798      	blx	r3

	                // Reset index for next message
	                serial_port->rx_index = 0;
 80007ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 232d 	strb.w	r2, [r3, #813]	@ 0x32d
 80007fe:	e033      	b.n	8000868 <HandleUSARTInterrupt+0x1d8>
	            }
	        } else {
	            // If buffer overflows, clear and notify
	        	serial_port->rx_index = 0;
 8000800:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000804:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2200      	movs	r2, #0
 800080c:	f883 232d 	strb.w	r2, [r3, #813]	@ 0x32d
	            uint8_t BUFFEROVERFLOW[BUFFER_SIZE] = "ERROR: BUFFER OVERFLOW";
 8000810:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000814:	f5a3 7684 	sub.w	r6, r3, #264	@ 0x108
 8000818:	4b4b      	ldr	r3, [pc, #300]	@ (8000948 <HandleUSARTInterrupt+0x2b8>)
 800081a:	4634      	mov	r4, r6
 800081c:	461d      	mov	r5, r3
 800081e:	6828      	ldr	r0, [r5, #0]
 8000820:	6869      	ldr	r1, [r5, #4]
 8000822:	68aa      	ldr	r2, [r5, #8]
 8000824:	68eb      	ldr	r3, [r5, #12]
 8000826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000828:	6928      	ldr	r0, [r5, #16]
 800082a:	6020      	str	r0, [r4, #0]
 800082c:	8aab      	ldrh	r3, [r5, #20]
 800082e:	7daa      	ldrb	r2, [r5, #22]
 8000830:	80a3      	strh	r3, [r4, #4]
 8000832:	4613      	mov	r3, r2
 8000834:	71a3      	strb	r3, [r4, #6]
 8000836:	f106 0317 	add.w	r3, r6, #23
 800083a:	22e9      	movs	r2, #233	@ 0xe9
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f91a 	bl	8000a78 <memset>
	            serial_port->completion_function(BUFFEROVERFLOW, serial_port->rx_index);
 8000844:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000848:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000850:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000854:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000858:	6812      	ldr	r2, [r2, #0]
 800085a:	f892 232d 	ldrb.w	r2, [r2, #813]	@ 0x32d
 800085e:	b2d1      	uxtb	r1, r2
 8000860:	f107 0208 	add.w	r2, r7, #8
 8000864:	4610      	mov	r0, r2
 8000866:	4798      	blx	r3

	    // ---------------------------
	    // TX SECTION
	    // ---------------------------
	    // Check if TXE (Transmit Data Register Empty) interrupt is enabled and pending
	    if ((serial_port->UART->CR1 & USART_CR1_TXEIE) && (serial_port->UART->ISR & USART_ISR_TXE)) {
 8000868:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800086c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087a:	2b00      	cmp	r3, #0
 800087c:	d05f      	beq.n	800093e <HandleUSARTInterrupt+0x2ae>
 800087e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000882:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	69db      	ldr	r3, [r3, #28]
 800088c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000890:	2b00      	cmp	r3, #0
 8000892:	d054      	beq.n	800093e <HandleUSARTInterrupt+0x2ae>
	        // Check if there is data left to transmit in the circular buffer
	        if (serial_port->tx_tail != serial_port->tx_head) {
 8000894:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000898:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d02c      	beq.n	800090e <HandleUSARTInterrupt+0x27e>
	            // Send next character from the TX buffer
	        	serial_port->UART->TDR = serial_port->tx_buffer[serial_port->tx_tail];
 80008b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	851a      	strh	r2, [r3, #40]	@ 0x28
	        	serial_port->tx_tail = (serial_port->tx_tail + 1) % TX_BUFFER_SIZE;
 80008e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	3301      	adds	r3, #1
 80008f4:	425a      	negs	r2, r3
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	bf58      	it	pl
 80008fc:	4253      	negpl	r3, r2
 80008fe:	b29a      	uxth	r2, r3
 8000900:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000904:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	855a      	strh	r2, [r3, #42]	@ 0x2a
	            // Transmission is complete — disable TXE interrupt
	        	serial_port->UART->CR1 &= ~USART_CR1_TXEIE;
	        	serial_port->tx_busy = 0;
	        }
	    }
}
 800090c:	e017      	b.n	800093e <HandleUSARTInterrupt+0x2ae>
	        	serial_port->UART->CR1 &= ~USART_CR1_TXEIE;
 800090e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000912:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000920:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800092c:	601a      	str	r2, [r3, #0]
	        	serial_port->tx_busy = 0;
 800092e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000932:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2200      	movs	r2, #0
 800093a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 800093e:	bf00      	nop
 8000940:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000944:	46bd      	mov	sp, r7
 8000946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000948:	08001494 	.word	0x08001494

0800094c <USART1_EXTI25_IRQHandler>:

// Interrupt Service Routine for USART1
void USART1_EXTI25_IRQHandler(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	HandleUSARTInterrupt(&USART1_PORT);
 8000950:	4802      	ldr	r0, [pc, #8]	@ (800095c <USART1_EXTI25_IRQHandler+0x10>)
 8000952:	f7ff fe9d 	bl	8000690 <HandleUSARTInterrupt>
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000000 	.word	0x20000000

08000960 <USART2_EXTI26_IRQHandler>:

// Interrupt Service Routine for USART2
void USART2_EXTI26_IRQHandler(void) {
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	HandleUSARTInterrupt(&USART2_PORT);
 8000964:	4802      	ldr	r0, [pc, #8]	@ (8000970 <USART2_EXTI26_IRQHandler+0x10>)
 8000966:	f7ff fe93 	bl	8000690 <HandleUSARTInterrupt>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000330 	.word	0x20000330

08000974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800097c:	4a14      	ldr	r2, [pc, #80]	@ (80009d0 <_sbrk+0x5c>)
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <_sbrk+0x60>)
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000988:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <_sbrk+0x64>)
 8000992:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <_sbrk+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d207      	bcs.n	80009b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a4:	f000 f870 	bl	8000a88 <__errno>
 80009a8:	4603      	mov	r3, r0
 80009aa:	220c      	movs	r2, #12
 80009ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009b2:	e009      	b.n	80009c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ba:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a05      	ldr	r2, [pc, #20]	@ (80009d8 <_sbrk+0x64>)
 80009c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c6:	68fb      	ldr	r3, [r7, #12]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000a000 	.word	0x2000a000
 80009d4:	00000400 	.word	0x00000400
 80009d8:	200006cc 	.word	0x200006cc
 80009dc:	20000818 	.word	0x20000818

080009e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009e0:	480d      	ldr	r0, [pc, #52]	@ (8000a18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480c      	ldr	r0, [pc, #48]	@ (8000a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80009ea:	490d      	ldr	r1, [pc, #52]	@ (8000a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000a24 <LoopForever+0xe>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a00:	4c0a      	ldr	r4, [pc, #40]	@ (8000a2c <LoopForever+0x16>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a0e:	f000 f841 	bl	8000a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a12:	f7ff fc67 	bl	80002e4 <main>

08000a16 <LoopForever>:

LoopForever:
  b LoopForever
 8000a16:	e7fe      	b.n	8000a16 <LoopForever>
  ldr   r0, =_estack
 8000a18:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	200006b0 	.word	0x200006b0
  ldr r2, =_sidata
 8000a24:	080014f0 	.word	0x080014f0
  ldr r2, =_sbss
 8000a28:	200006b0 	.word	0x200006b0
  ldr r4, =_ebss
 8000a2c:	20000818 	.word	0x20000818

08000a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC1_2_IRQHandler>
	...

08000a34 <siprintf>:
 8000a34:	b40e      	push	{r1, r2, r3}
 8000a36:	b510      	push	{r4, lr}
 8000a38:	b09d      	sub	sp, #116	@ 0x74
 8000a3a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000a3c:	9002      	str	r0, [sp, #8]
 8000a3e:	9006      	str	r0, [sp, #24]
 8000a40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000a44:	480a      	ldr	r0, [pc, #40]	@ (8000a70 <siprintf+0x3c>)
 8000a46:	9107      	str	r1, [sp, #28]
 8000a48:	9104      	str	r1, [sp, #16]
 8000a4a:	490a      	ldr	r1, [pc, #40]	@ (8000a74 <siprintf+0x40>)
 8000a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a50:	9105      	str	r1, [sp, #20]
 8000a52:	2400      	movs	r4, #0
 8000a54:	a902      	add	r1, sp, #8
 8000a56:	6800      	ldr	r0, [r0, #0]
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000a5c:	f000 f89c 	bl	8000b98 <_svfiprintf_r>
 8000a60:	9b02      	ldr	r3, [sp, #8]
 8000a62:	701c      	strb	r4, [r3, #0]
 8000a64:	b01d      	add	sp, #116	@ 0x74
 8000a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a6a:	b003      	add	sp, #12
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000660 	.word	0x20000660
 8000a74:	ffff0208 	.word	0xffff0208

08000a78 <memset>:
 8000a78:	4402      	add	r2, r0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d100      	bne.n	8000a82 <memset+0xa>
 8000a80:	4770      	bx	lr
 8000a82:	f803 1b01 	strb.w	r1, [r3], #1
 8000a86:	e7f9      	b.n	8000a7c <memset+0x4>

08000a88 <__errno>:
 8000a88:	4b01      	ldr	r3, [pc, #4]	@ (8000a90 <__errno+0x8>)
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000660 	.word	0x20000660

08000a94 <__libc_init_array>:
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	4d0d      	ldr	r5, [pc, #52]	@ (8000acc <__libc_init_array+0x38>)
 8000a98:	4c0d      	ldr	r4, [pc, #52]	@ (8000ad0 <__libc_init_array+0x3c>)
 8000a9a:	1b64      	subs	r4, r4, r5
 8000a9c:	10a4      	asrs	r4, r4, #2
 8000a9e:	2600      	movs	r6, #0
 8000aa0:	42a6      	cmp	r6, r4
 8000aa2:	d109      	bne.n	8000ab8 <__libc_init_array+0x24>
 8000aa4:	4d0b      	ldr	r5, [pc, #44]	@ (8000ad4 <__libc_init_array+0x40>)
 8000aa6:	4c0c      	ldr	r4, [pc, #48]	@ (8000ad8 <__libc_init_array+0x44>)
 8000aa8:	f000 fc64 	bl	8001374 <_init>
 8000aac:	1b64      	subs	r4, r4, r5
 8000aae:	10a4      	asrs	r4, r4, #2
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	42a6      	cmp	r6, r4
 8000ab4:	d105      	bne.n	8000ac2 <__libc_init_array+0x2e>
 8000ab6:	bd70      	pop	{r4, r5, r6, pc}
 8000ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000abc:	4798      	blx	r3
 8000abe:	3601      	adds	r6, #1
 8000ac0:	e7ee      	b.n	8000aa0 <__libc_init_array+0xc>
 8000ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac6:	4798      	blx	r3
 8000ac8:	3601      	adds	r6, #1
 8000aca:	e7f2      	b.n	8000ab2 <__libc_init_array+0x1e>
 8000acc:	080014e8 	.word	0x080014e8
 8000ad0:	080014e8 	.word	0x080014e8
 8000ad4:	080014e8 	.word	0x080014e8
 8000ad8:	080014ec 	.word	0x080014ec

08000adc <__retarget_lock_acquire_recursive>:
 8000adc:	4770      	bx	lr

08000ade <__retarget_lock_release_recursive>:
 8000ade:	4770      	bx	lr

08000ae0 <__ssputs_r>:
 8000ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae4:	688e      	ldr	r6, [r1, #8]
 8000ae6:	461f      	mov	r7, r3
 8000ae8:	42be      	cmp	r6, r7
 8000aea:	680b      	ldr	r3, [r1, #0]
 8000aec:	4682      	mov	sl, r0
 8000aee:	460c      	mov	r4, r1
 8000af0:	4690      	mov	r8, r2
 8000af2:	d82d      	bhi.n	8000b50 <__ssputs_r+0x70>
 8000af4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000af8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000afc:	d026      	beq.n	8000b4c <__ssputs_r+0x6c>
 8000afe:	6965      	ldr	r5, [r4, #20]
 8000b00:	6909      	ldr	r1, [r1, #16]
 8000b02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000b06:	eba3 0901 	sub.w	r9, r3, r1
 8000b0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000b0e:	1c7b      	adds	r3, r7, #1
 8000b10:	444b      	add	r3, r9
 8000b12:	106d      	asrs	r5, r5, #1
 8000b14:	429d      	cmp	r5, r3
 8000b16:	bf38      	it	cc
 8000b18:	461d      	movcc	r5, r3
 8000b1a:	0553      	lsls	r3, r2, #21
 8000b1c:	d527      	bpl.n	8000b6e <__ssputs_r+0x8e>
 8000b1e:	4629      	mov	r1, r5
 8000b20:	f000 f958 	bl	8000dd4 <_malloc_r>
 8000b24:	4606      	mov	r6, r0
 8000b26:	b360      	cbz	r0, 8000b82 <__ssputs_r+0xa2>
 8000b28:	6921      	ldr	r1, [r4, #16]
 8000b2a:	464a      	mov	r2, r9
 8000b2c:	f000 fbc2 	bl	80012b4 <memcpy>
 8000b30:	89a3      	ldrh	r3, [r4, #12]
 8000b32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b3a:	81a3      	strh	r3, [r4, #12]
 8000b3c:	6126      	str	r6, [r4, #16]
 8000b3e:	6165      	str	r5, [r4, #20]
 8000b40:	444e      	add	r6, r9
 8000b42:	eba5 0509 	sub.w	r5, r5, r9
 8000b46:	6026      	str	r6, [r4, #0]
 8000b48:	60a5      	str	r5, [r4, #8]
 8000b4a:	463e      	mov	r6, r7
 8000b4c:	42be      	cmp	r6, r7
 8000b4e:	d900      	bls.n	8000b52 <__ssputs_r+0x72>
 8000b50:	463e      	mov	r6, r7
 8000b52:	6820      	ldr	r0, [r4, #0]
 8000b54:	4632      	mov	r2, r6
 8000b56:	4641      	mov	r1, r8
 8000b58:	f000 fb82 	bl	8001260 <memmove>
 8000b5c:	68a3      	ldr	r3, [r4, #8]
 8000b5e:	1b9b      	subs	r3, r3, r6
 8000b60:	60a3      	str	r3, [r4, #8]
 8000b62:	6823      	ldr	r3, [r4, #0]
 8000b64:	4433      	add	r3, r6
 8000b66:	6023      	str	r3, [r4, #0]
 8000b68:	2000      	movs	r0, #0
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	462a      	mov	r2, r5
 8000b70:	f000 fb48 	bl	8001204 <_realloc_r>
 8000b74:	4606      	mov	r6, r0
 8000b76:	2800      	cmp	r0, #0
 8000b78:	d1e0      	bne.n	8000b3c <__ssputs_r+0x5c>
 8000b7a:	6921      	ldr	r1, [r4, #16]
 8000b7c:	4650      	mov	r0, sl
 8000b7e:	f000 fba7 	bl	80012d0 <_free_r>
 8000b82:	230c      	movs	r3, #12
 8000b84:	f8ca 3000 	str.w	r3, [sl]
 8000b88:	89a3      	ldrh	r3, [r4, #12]
 8000b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b8e:	81a3      	strh	r3, [r4, #12]
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b94:	e7e9      	b.n	8000b6a <__ssputs_r+0x8a>
	...

08000b98 <_svfiprintf_r>:
 8000b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b9c:	4698      	mov	r8, r3
 8000b9e:	898b      	ldrh	r3, [r1, #12]
 8000ba0:	061b      	lsls	r3, r3, #24
 8000ba2:	b09d      	sub	sp, #116	@ 0x74
 8000ba4:	4607      	mov	r7, r0
 8000ba6:	460d      	mov	r5, r1
 8000ba8:	4614      	mov	r4, r2
 8000baa:	d510      	bpl.n	8000bce <_svfiprintf_r+0x36>
 8000bac:	690b      	ldr	r3, [r1, #16]
 8000bae:	b973      	cbnz	r3, 8000bce <_svfiprintf_r+0x36>
 8000bb0:	2140      	movs	r1, #64	@ 0x40
 8000bb2:	f000 f90f 	bl	8000dd4 <_malloc_r>
 8000bb6:	6028      	str	r0, [r5, #0]
 8000bb8:	6128      	str	r0, [r5, #16]
 8000bba:	b930      	cbnz	r0, 8000bca <_svfiprintf_r+0x32>
 8000bbc:	230c      	movs	r3, #12
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bc4:	b01d      	add	sp, #116	@ 0x74
 8000bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bca:	2340      	movs	r3, #64	@ 0x40
 8000bcc:	616b      	str	r3, [r5, #20]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8000bd2:	2320      	movs	r3, #32
 8000bd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000bd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bdc:	2330      	movs	r3, #48	@ 0x30
 8000bde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000d7c <_svfiprintf_r+0x1e4>
 8000be2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000be6:	f04f 0901 	mov.w	r9, #1
 8000bea:	4623      	mov	r3, r4
 8000bec:	469a      	mov	sl, r3
 8000bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bf2:	b10a      	cbz	r2, 8000bf8 <_svfiprintf_r+0x60>
 8000bf4:	2a25      	cmp	r2, #37	@ 0x25
 8000bf6:	d1f9      	bne.n	8000bec <_svfiprintf_r+0x54>
 8000bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8000bfc:	d00b      	beq.n	8000c16 <_svfiprintf_r+0x7e>
 8000bfe:	465b      	mov	r3, fp
 8000c00:	4622      	mov	r2, r4
 8000c02:	4629      	mov	r1, r5
 8000c04:	4638      	mov	r0, r7
 8000c06:	f7ff ff6b 	bl	8000ae0 <__ssputs_r>
 8000c0a:	3001      	adds	r0, #1
 8000c0c:	f000 80a7 	beq.w	8000d5e <_svfiprintf_r+0x1c6>
 8000c10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000c12:	445a      	add	r2, fp
 8000c14:	9209      	str	r2, [sp, #36]	@ 0x24
 8000c16:	f89a 3000 	ldrb.w	r3, [sl]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f000 809f 	beq.w	8000d5e <_svfiprintf_r+0x1c6>
 8000c20:	2300      	movs	r3, #0
 8000c22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c2a:	f10a 0a01 	add.w	sl, sl, #1
 8000c2e:	9304      	str	r3, [sp, #16]
 8000c30:	9307      	str	r3, [sp, #28]
 8000c32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000c36:	931a      	str	r3, [sp, #104]	@ 0x68
 8000c38:	4654      	mov	r4, sl
 8000c3a:	2205      	movs	r2, #5
 8000c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c40:	484e      	ldr	r0, [pc, #312]	@ (8000d7c <_svfiprintf_r+0x1e4>)
 8000c42:	f7ff facd 	bl	80001e0 <memchr>
 8000c46:	9a04      	ldr	r2, [sp, #16]
 8000c48:	b9d8      	cbnz	r0, 8000c82 <_svfiprintf_r+0xea>
 8000c4a:	06d0      	lsls	r0, r2, #27
 8000c4c:	bf44      	itt	mi
 8000c4e:	2320      	movmi	r3, #32
 8000c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c54:	0711      	lsls	r1, r2, #28
 8000c56:	bf44      	itt	mi
 8000c58:	232b      	movmi	r3, #43	@ 0x2b
 8000c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8000c62:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c64:	d015      	beq.n	8000c92 <_svfiprintf_r+0xfa>
 8000c66:	9a07      	ldr	r2, [sp, #28]
 8000c68:	4654      	mov	r4, sl
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f04f 0c0a 	mov.w	ip, #10
 8000c70:	4621      	mov	r1, r4
 8000c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c76:	3b30      	subs	r3, #48	@ 0x30
 8000c78:	2b09      	cmp	r3, #9
 8000c7a:	d94b      	bls.n	8000d14 <_svfiprintf_r+0x17c>
 8000c7c:	b1b0      	cbz	r0, 8000cac <_svfiprintf_r+0x114>
 8000c7e:	9207      	str	r2, [sp, #28]
 8000c80:	e014      	b.n	8000cac <_svfiprintf_r+0x114>
 8000c82:	eba0 0308 	sub.w	r3, r0, r8
 8000c86:	fa09 f303 	lsl.w	r3, r9, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	9304      	str	r3, [sp, #16]
 8000c8e:	46a2      	mov	sl, r4
 8000c90:	e7d2      	b.n	8000c38 <_svfiprintf_r+0xa0>
 8000c92:	9b03      	ldr	r3, [sp, #12]
 8000c94:	1d19      	adds	r1, r3, #4
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	9103      	str	r1, [sp, #12]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bfbb      	ittet	lt
 8000c9e:	425b      	neglt	r3, r3
 8000ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8000ca4:	9307      	strge	r3, [sp, #28]
 8000ca6:	9307      	strlt	r3, [sp, #28]
 8000ca8:	bfb8      	it	lt
 8000caa:	9204      	strlt	r2, [sp, #16]
 8000cac:	7823      	ldrb	r3, [r4, #0]
 8000cae:	2b2e      	cmp	r3, #46	@ 0x2e
 8000cb0:	d10a      	bne.n	8000cc8 <_svfiprintf_r+0x130>
 8000cb2:	7863      	ldrb	r3, [r4, #1]
 8000cb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000cb6:	d132      	bne.n	8000d1e <_svfiprintf_r+0x186>
 8000cb8:	9b03      	ldr	r3, [sp, #12]
 8000cba:	1d1a      	adds	r2, r3, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	9203      	str	r2, [sp, #12]
 8000cc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000cc4:	3402      	adds	r4, #2
 8000cc6:	9305      	str	r3, [sp, #20]
 8000cc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000d8c <_svfiprintf_r+0x1f4>
 8000ccc:	7821      	ldrb	r1, [r4, #0]
 8000cce:	2203      	movs	r2, #3
 8000cd0:	4650      	mov	r0, sl
 8000cd2:	f7ff fa85 	bl	80001e0 <memchr>
 8000cd6:	b138      	cbz	r0, 8000ce8 <_svfiprintf_r+0x150>
 8000cd8:	9b04      	ldr	r3, [sp, #16]
 8000cda:	eba0 000a 	sub.w	r0, r0, sl
 8000cde:	2240      	movs	r2, #64	@ 0x40
 8000ce0:	4082      	lsls	r2, r0
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	3401      	adds	r4, #1
 8000ce6:	9304      	str	r3, [sp, #16]
 8000ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cec:	4824      	ldr	r0, [pc, #144]	@ (8000d80 <_svfiprintf_r+0x1e8>)
 8000cee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000cf2:	2206      	movs	r2, #6
 8000cf4:	f7ff fa74 	bl	80001e0 <memchr>
 8000cf8:	2800      	cmp	r0, #0
 8000cfa:	d036      	beq.n	8000d6a <_svfiprintf_r+0x1d2>
 8000cfc:	4b21      	ldr	r3, [pc, #132]	@ (8000d84 <_svfiprintf_r+0x1ec>)
 8000cfe:	bb1b      	cbnz	r3, 8000d48 <_svfiprintf_r+0x1b0>
 8000d00:	9b03      	ldr	r3, [sp, #12]
 8000d02:	3307      	adds	r3, #7
 8000d04:	f023 0307 	bic.w	r3, r3, #7
 8000d08:	3308      	adds	r3, #8
 8000d0a:	9303      	str	r3, [sp, #12]
 8000d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000d0e:	4433      	add	r3, r6
 8000d10:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d12:	e76a      	b.n	8000bea <_svfiprintf_r+0x52>
 8000d14:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d18:	460c      	mov	r4, r1
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	e7a8      	b.n	8000c70 <_svfiprintf_r+0xd8>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	3401      	adds	r4, #1
 8000d22:	9305      	str	r3, [sp, #20]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 0c0a 	mov.w	ip, #10
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d30:	3a30      	subs	r2, #48	@ 0x30
 8000d32:	2a09      	cmp	r2, #9
 8000d34:	d903      	bls.n	8000d3e <_svfiprintf_r+0x1a6>
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0c6      	beq.n	8000cc8 <_svfiprintf_r+0x130>
 8000d3a:	9105      	str	r1, [sp, #20]
 8000d3c:	e7c4      	b.n	8000cc8 <_svfiprintf_r+0x130>
 8000d3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d42:	4604      	mov	r4, r0
 8000d44:	2301      	movs	r3, #1
 8000d46:	e7f0      	b.n	8000d2a <_svfiprintf_r+0x192>
 8000d48:	ab03      	add	r3, sp, #12
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	462a      	mov	r2, r5
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <_svfiprintf_r+0x1f0>)
 8000d50:	a904      	add	r1, sp, #16
 8000d52:	4638      	mov	r0, r7
 8000d54:	f3af 8000 	nop.w
 8000d58:	1c42      	adds	r2, r0, #1
 8000d5a:	4606      	mov	r6, r0
 8000d5c:	d1d6      	bne.n	8000d0c <_svfiprintf_r+0x174>
 8000d5e:	89ab      	ldrh	r3, [r5, #12]
 8000d60:	065b      	lsls	r3, r3, #25
 8000d62:	f53f af2d 	bmi.w	8000bc0 <_svfiprintf_r+0x28>
 8000d66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000d68:	e72c      	b.n	8000bc4 <_svfiprintf_r+0x2c>
 8000d6a:	ab03      	add	r3, sp, #12
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	462a      	mov	r2, r5
 8000d70:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <_svfiprintf_r+0x1f0>)
 8000d72:	a904      	add	r1, sp, #16
 8000d74:	4638      	mov	r0, r7
 8000d76:	f000 f91b 	bl	8000fb0 <_printf_i>
 8000d7a:	e7ed      	b.n	8000d58 <_svfiprintf_r+0x1c0>
 8000d7c:	080014ab 	.word	0x080014ab
 8000d80:	080014b5 	.word	0x080014b5
 8000d84:	00000000 	.word	0x00000000
 8000d88:	08000ae1 	.word	0x08000ae1
 8000d8c:	080014b1 	.word	0x080014b1

08000d90 <sbrk_aligned>:
 8000d90:	b570      	push	{r4, r5, r6, lr}
 8000d92:	4e0f      	ldr	r6, [pc, #60]	@ (8000dd0 <sbrk_aligned+0x40>)
 8000d94:	460c      	mov	r4, r1
 8000d96:	6831      	ldr	r1, [r6, #0]
 8000d98:	4605      	mov	r5, r0
 8000d9a:	b911      	cbnz	r1, 8000da2 <sbrk_aligned+0x12>
 8000d9c:	f000 fa7a 	bl	8001294 <_sbrk_r>
 8000da0:	6030      	str	r0, [r6, #0]
 8000da2:	4621      	mov	r1, r4
 8000da4:	4628      	mov	r0, r5
 8000da6:	f000 fa75 	bl	8001294 <_sbrk_r>
 8000daa:	1c43      	adds	r3, r0, #1
 8000dac:	d103      	bne.n	8000db6 <sbrk_aligned+0x26>
 8000dae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000db2:	4620      	mov	r0, r4
 8000db4:	bd70      	pop	{r4, r5, r6, pc}
 8000db6:	1cc4      	adds	r4, r0, #3
 8000db8:	f024 0403 	bic.w	r4, r4, #3
 8000dbc:	42a0      	cmp	r0, r4
 8000dbe:	d0f8      	beq.n	8000db2 <sbrk_aligned+0x22>
 8000dc0:	1a21      	subs	r1, r4, r0
 8000dc2:	4628      	mov	r0, r5
 8000dc4:	f000 fa66 	bl	8001294 <_sbrk_r>
 8000dc8:	3001      	adds	r0, #1
 8000dca:	d1f2      	bne.n	8000db2 <sbrk_aligned+0x22>
 8000dcc:	e7ef      	b.n	8000dae <sbrk_aligned+0x1e>
 8000dce:	bf00      	nop
 8000dd0:	2000080c 	.word	0x2000080c

08000dd4 <_malloc_r>:
 8000dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000dd8:	1ccd      	adds	r5, r1, #3
 8000dda:	f025 0503 	bic.w	r5, r5, #3
 8000dde:	3508      	adds	r5, #8
 8000de0:	2d0c      	cmp	r5, #12
 8000de2:	bf38      	it	cc
 8000de4:	250c      	movcc	r5, #12
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	4606      	mov	r6, r0
 8000dea:	db01      	blt.n	8000df0 <_malloc_r+0x1c>
 8000dec:	42a9      	cmp	r1, r5
 8000dee:	d904      	bls.n	8000dfa <_malloc_r+0x26>
 8000df0:	230c      	movs	r3, #12
 8000df2:	6033      	str	r3, [r6, #0]
 8000df4:	2000      	movs	r0, #0
 8000df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ed0 <_malloc_r+0xfc>
 8000dfe:	f000 f9f5 	bl	80011ec <__malloc_lock>
 8000e02:	f8d8 3000 	ldr.w	r3, [r8]
 8000e06:	461c      	mov	r4, r3
 8000e08:	bb44      	cbnz	r4, 8000e5c <_malloc_r+0x88>
 8000e0a:	4629      	mov	r1, r5
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	f7ff ffbf 	bl	8000d90 <sbrk_aligned>
 8000e12:	1c43      	adds	r3, r0, #1
 8000e14:	4604      	mov	r4, r0
 8000e16:	d158      	bne.n	8000eca <_malloc_r+0xf6>
 8000e18:	f8d8 4000 	ldr.w	r4, [r8]
 8000e1c:	4627      	mov	r7, r4
 8000e1e:	2f00      	cmp	r7, #0
 8000e20:	d143      	bne.n	8000eaa <_malloc_r+0xd6>
 8000e22:	2c00      	cmp	r4, #0
 8000e24:	d04b      	beq.n	8000ebe <_malloc_r+0xea>
 8000e26:	6823      	ldr	r3, [r4, #0]
 8000e28:	4639      	mov	r1, r7
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	eb04 0903 	add.w	r9, r4, r3
 8000e30:	f000 fa30 	bl	8001294 <_sbrk_r>
 8000e34:	4581      	cmp	r9, r0
 8000e36:	d142      	bne.n	8000ebe <_malloc_r+0xea>
 8000e38:	6821      	ldr	r1, [r4, #0]
 8000e3a:	1a6d      	subs	r5, r5, r1
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	4630      	mov	r0, r6
 8000e40:	f7ff ffa6 	bl	8000d90 <sbrk_aligned>
 8000e44:	3001      	adds	r0, #1
 8000e46:	d03a      	beq.n	8000ebe <_malloc_r+0xea>
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	442b      	add	r3, r5
 8000e4c:	6023      	str	r3, [r4, #0]
 8000e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	bb62      	cbnz	r2, 8000eb0 <_malloc_r+0xdc>
 8000e56:	f8c8 7000 	str.w	r7, [r8]
 8000e5a:	e00f      	b.n	8000e7c <_malloc_r+0xa8>
 8000e5c:	6822      	ldr	r2, [r4, #0]
 8000e5e:	1b52      	subs	r2, r2, r5
 8000e60:	d420      	bmi.n	8000ea4 <_malloc_r+0xd0>
 8000e62:	2a0b      	cmp	r2, #11
 8000e64:	d917      	bls.n	8000e96 <_malloc_r+0xc2>
 8000e66:	1961      	adds	r1, r4, r5
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	6025      	str	r5, [r4, #0]
 8000e6c:	bf18      	it	ne
 8000e6e:	6059      	strne	r1, [r3, #4]
 8000e70:	6863      	ldr	r3, [r4, #4]
 8000e72:	bf08      	it	eq
 8000e74:	f8c8 1000 	streq.w	r1, [r8]
 8000e78:	5162      	str	r2, [r4, r5]
 8000e7a:	604b      	str	r3, [r1, #4]
 8000e7c:	4630      	mov	r0, r6
 8000e7e:	f000 f9bb 	bl	80011f8 <__malloc_unlock>
 8000e82:	f104 000b 	add.w	r0, r4, #11
 8000e86:	1d23      	adds	r3, r4, #4
 8000e88:	f020 0007 	bic.w	r0, r0, #7
 8000e8c:	1ac2      	subs	r2, r0, r3
 8000e8e:	bf1c      	itt	ne
 8000e90:	1a1b      	subne	r3, r3, r0
 8000e92:	50a3      	strne	r3, [r4, r2]
 8000e94:	e7af      	b.n	8000df6 <_malloc_r+0x22>
 8000e96:	6862      	ldr	r2, [r4, #4]
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	bf0c      	ite	eq
 8000e9c:	f8c8 2000 	streq.w	r2, [r8]
 8000ea0:	605a      	strne	r2, [r3, #4]
 8000ea2:	e7eb      	b.n	8000e7c <_malloc_r+0xa8>
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	6864      	ldr	r4, [r4, #4]
 8000ea8:	e7ae      	b.n	8000e08 <_malloc_r+0x34>
 8000eaa:	463c      	mov	r4, r7
 8000eac:	687f      	ldr	r7, [r7, #4]
 8000eae:	e7b6      	b.n	8000e1e <_malloc_r+0x4a>
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	42a3      	cmp	r3, r4
 8000eb6:	d1fb      	bne.n	8000eb0 <_malloc_r+0xdc>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	6053      	str	r3, [r2, #4]
 8000ebc:	e7de      	b.n	8000e7c <_malloc_r+0xa8>
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	6033      	str	r3, [r6, #0]
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	f000 f998 	bl	80011f8 <__malloc_unlock>
 8000ec8:	e794      	b.n	8000df4 <_malloc_r+0x20>
 8000eca:	6005      	str	r5, [r0, #0]
 8000ecc:	e7d6      	b.n	8000e7c <_malloc_r+0xa8>
 8000ece:	bf00      	nop
 8000ed0:	20000810 	.word	0x20000810

08000ed4 <_printf_common>:
 8000ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed8:	4616      	mov	r6, r2
 8000eda:	4698      	mov	r8, r3
 8000edc:	688a      	ldr	r2, [r1, #8]
 8000ede:	690b      	ldr	r3, [r1, #16]
 8000ee0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	bfb8      	it	lt
 8000ee8:	4613      	movlt	r3, r2
 8000eea:	6033      	str	r3, [r6, #0]
 8000eec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ef0:	4607      	mov	r7, r0
 8000ef2:	460c      	mov	r4, r1
 8000ef4:	b10a      	cbz	r2, 8000efa <_printf_common+0x26>
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	6033      	str	r3, [r6, #0]
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	0699      	lsls	r1, r3, #26
 8000efe:	bf42      	ittt	mi
 8000f00:	6833      	ldrmi	r3, [r6, #0]
 8000f02:	3302      	addmi	r3, #2
 8000f04:	6033      	strmi	r3, [r6, #0]
 8000f06:	6825      	ldr	r5, [r4, #0]
 8000f08:	f015 0506 	ands.w	r5, r5, #6
 8000f0c:	d106      	bne.n	8000f1c <_printf_common+0x48>
 8000f0e:	f104 0a19 	add.w	sl, r4, #25
 8000f12:	68e3      	ldr	r3, [r4, #12]
 8000f14:	6832      	ldr	r2, [r6, #0]
 8000f16:	1a9b      	subs	r3, r3, r2
 8000f18:	42ab      	cmp	r3, r5
 8000f1a:	dc26      	bgt.n	8000f6a <_printf_common+0x96>
 8000f1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f20:	6822      	ldr	r2, [r4, #0]
 8000f22:	3b00      	subs	r3, #0
 8000f24:	bf18      	it	ne
 8000f26:	2301      	movne	r3, #1
 8000f28:	0692      	lsls	r2, r2, #26
 8000f2a:	d42b      	bmi.n	8000f84 <_printf_common+0xb0>
 8000f2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000f30:	4641      	mov	r1, r8
 8000f32:	4638      	mov	r0, r7
 8000f34:	47c8      	blx	r9
 8000f36:	3001      	adds	r0, #1
 8000f38:	d01e      	beq.n	8000f78 <_printf_common+0xa4>
 8000f3a:	6823      	ldr	r3, [r4, #0]
 8000f3c:	6922      	ldr	r2, [r4, #16]
 8000f3e:	f003 0306 	and.w	r3, r3, #6
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf02      	ittt	eq
 8000f46:	68e5      	ldreq	r5, [r4, #12]
 8000f48:	6833      	ldreq	r3, [r6, #0]
 8000f4a:	1aed      	subeq	r5, r5, r3
 8000f4c:	68a3      	ldr	r3, [r4, #8]
 8000f4e:	bf0c      	ite	eq
 8000f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f54:	2500      	movne	r5, #0
 8000f56:	4293      	cmp	r3, r2
 8000f58:	bfc4      	itt	gt
 8000f5a:	1a9b      	subgt	r3, r3, r2
 8000f5c:	18ed      	addgt	r5, r5, r3
 8000f5e:	2600      	movs	r6, #0
 8000f60:	341a      	adds	r4, #26
 8000f62:	42b5      	cmp	r5, r6
 8000f64:	d11a      	bne.n	8000f9c <_printf_common+0xc8>
 8000f66:	2000      	movs	r0, #0
 8000f68:	e008      	b.n	8000f7c <_printf_common+0xa8>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	4652      	mov	r2, sl
 8000f6e:	4641      	mov	r1, r8
 8000f70:	4638      	mov	r0, r7
 8000f72:	47c8      	blx	r9
 8000f74:	3001      	adds	r0, #1
 8000f76:	d103      	bne.n	8000f80 <_printf_common+0xac>
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f80:	3501      	adds	r5, #1
 8000f82:	e7c6      	b.n	8000f12 <_printf_common+0x3e>
 8000f84:	18e1      	adds	r1, r4, r3
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	2030      	movs	r0, #48	@ 0x30
 8000f8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f8e:	4422      	add	r2, r4
 8000f90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f98:	3302      	adds	r3, #2
 8000f9a:	e7c7      	b.n	8000f2c <_printf_common+0x58>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	4622      	mov	r2, r4
 8000fa0:	4641      	mov	r1, r8
 8000fa2:	4638      	mov	r0, r7
 8000fa4:	47c8      	blx	r9
 8000fa6:	3001      	adds	r0, #1
 8000fa8:	d0e6      	beq.n	8000f78 <_printf_common+0xa4>
 8000faa:	3601      	adds	r6, #1
 8000fac:	e7d9      	b.n	8000f62 <_printf_common+0x8e>
	...

08000fb0 <_printf_i>:
 8000fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000fb4:	7e0f      	ldrb	r7, [r1, #24]
 8000fb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000fb8:	2f78      	cmp	r7, #120	@ 0x78
 8000fba:	4691      	mov	r9, r2
 8000fbc:	4680      	mov	r8, r0
 8000fbe:	460c      	mov	r4, r1
 8000fc0:	469a      	mov	sl, r3
 8000fc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000fc6:	d807      	bhi.n	8000fd8 <_printf_i+0x28>
 8000fc8:	2f62      	cmp	r7, #98	@ 0x62
 8000fca:	d80a      	bhi.n	8000fe2 <_printf_i+0x32>
 8000fcc:	2f00      	cmp	r7, #0
 8000fce:	f000 80d1 	beq.w	8001174 <_printf_i+0x1c4>
 8000fd2:	2f58      	cmp	r7, #88	@ 0x58
 8000fd4:	f000 80b8 	beq.w	8001148 <_printf_i+0x198>
 8000fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000fe0:	e03a      	b.n	8001058 <_printf_i+0xa8>
 8000fe2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000fe6:	2b15      	cmp	r3, #21
 8000fe8:	d8f6      	bhi.n	8000fd8 <_printf_i+0x28>
 8000fea:	a101      	add	r1, pc, #4	@ (adr r1, 8000ff0 <_printf_i+0x40>)
 8000fec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ff0:	08001049 	.word	0x08001049
 8000ff4:	0800105d 	.word	0x0800105d
 8000ff8:	08000fd9 	.word	0x08000fd9
 8000ffc:	08000fd9 	.word	0x08000fd9
 8001000:	08000fd9 	.word	0x08000fd9
 8001004:	08000fd9 	.word	0x08000fd9
 8001008:	0800105d 	.word	0x0800105d
 800100c:	08000fd9 	.word	0x08000fd9
 8001010:	08000fd9 	.word	0x08000fd9
 8001014:	08000fd9 	.word	0x08000fd9
 8001018:	08000fd9 	.word	0x08000fd9
 800101c:	0800115b 	.word	0x0800115b
 8001020:	08001087 	.word	0x08001087
 8001024:	08001115 	.word	0x08001115
 8001028:	08000fd9 	.word	0x08000fd9
 800102c:	08000fd9 	.word	0x08000fd9
 8001030:	0800117d 	.word	0x0800117d
 8001034:	08000fd9 	.word	0x08000fd9
 8001038:	08001087 	.word	0x08001087
 800103c:	08000fd9 	.word	0x08000fd9
 8001040:	08000fd9 	.word	0x08000fd9
 8001044:	0800111d 	.word	0x0800111d
 8001048:	6833      	ldr	r3, [r6, #0]
 800104a:	1d1a      	adds	r2, r3, #4
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6032      	str	r2, [r6, #0]
 8001050:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001054:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001058:	2301      	movs	r3, #1
 800105a:	e09c      	b.n	8001196 <_printf_i+0x1e6>
 800105c:	6833      	ldr	r3, [r6, #0]
 800105e:	6820      	ldr	r0, [r4, #0]
 8001060:	1d19      	adds	r1, r3, #4
 8001062:	6031      	str	r1, [r6, #0]
 8001064:	0606      	lsls	r6, r0, #24
 8001066:	d501      	bpl.n	800106c <_printf_i+0xbc>
 8001068:	681d      	ldr	r5, [r3, #0]
 800106a:	e003      	b.n	8001074 <_printf_i+0xc4>
 800106c:	0645      	lsls	r5, r0, #25
 800106e:	d5fb      	bpl.n	8001068 <_printf_i+0xb8>
 8001070:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001074:	2d00      	cmp	r5, #0
 8001076:	da03      	bge.n	8001080 <_printf_i+0xd0>
 8001078:	232d      	movs	r3, #45	@ 0x2d
 800107a:	426d      	negs	r5, r5
 800107c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001080:	4858      	ldr	r0, [pc, #352]	@ (80011e4 <_printf_i+0x234>)
 8001082:	230a      	movs	r3, #10
 8001084:	e011      	b.n	80010aa <_printf_i+0xfa>
 8001086:	6821      	ldr	r1, [r4, #0]
 8001088:	6833      	ldr	r3, [r6, #0]
 800108a:	0608      	lsls	r0, r1, #24
 800108c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001090:	d402      	bmi.n	8001098 <_printf_i+0xe8>
 8001092:	0649      	lsls	r1, r1, #25
 8001094:	bf48      	it	mi
 8001096:	b2ad      	uxthmi	r5, r5
 8001098:	2f6f      	cmp	r7, #111	@ 0x6f
 800109a:	4852      	ldr	r0, [pc, #328]	@ (80011e4 <_printf_i+0x234>)
 800109c:	6033      	str	r3, [r6, #0]
 800109e:	bf14      	ite	ne
 80010a0:	230a      	movne	r3, #10
 80010a2:	2308      	moveq	r3, #8
 80010a4:	2100      	movs	r1, #0
 80010a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80010aa:	6866      	ldr	r6, [r4, #4]
 80010ac:	60a6      	str	r6, [r4, #8]
 80010ae:	2e00      	cmp	r6, #0
 80010b0:	db05      	blt.n	80010be <_printf_i+0x10e>
 80010b2:	6821      	ldr	r1, [r4, #0]
 80010b4:	432e      	orrs	r6, r5
 80010b6:	f021 0104 	bic.w	r1, r1, #4
 80010ba:	6021      	str	r1, [r4, #0]
 80010bc:	d04b      	beq.n	8001156 <_printf_i+0x1a6>
 80010be:	4616      	mov	r6, r2
 80010c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80010c4:	fb03 5711 	mls	r7, r3, r1, r5
 80010c8:	5dc7      	ldrb	r7, [r0, r7]
 80010ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80010ce:	462f      	mov	r7, r5
 80010d0:	42bb      	cmp	r3, r7
 80010d2:	460d      	mov	r5, r1
 80010d4:	d9f4      	bls.n	80010c0 <_printf_i+0x110>
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d10b      	bne.n	80010f2 <_printf_i+0x142>
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	07df      	lsls	r7, r3, #31
 80010de:	d508      	bpl.n	80010f2 <_printf_i+0x142>
 80010e0:	6923      	ldr	r3, [r4, #16]
 80010e2:	6861      	ldr	r1, [r4, #4]
 80010e4:	4299      	cmp	r1, r3
 80010e6:	bfde      	ittt	le
 80010e8:	2330      	movle	r3, #48	@ 0x30
 80010ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80010ee:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80010f2:	1b92      	subs	r2, r2, r6
 80010f4:	6122      	str	r2, [r4, #16]
 80010f6:	f8cd a000 	str.w	sl, [sp]
 80010fa:	464b      	mov	r3, r9
 80010fc:	aa03      	add	r2, sp, #12
 80010fe:	4621      	mov	r1, r4
 8001100:	4640      	mov	r0, r8
 8001102:	f7ff fee7 	bl	8000ed4 <_printf_common>
 8001106:	3001      	adds	r0, #1
 8001108:	d14a      	bne.n	80011a0 <_printf_i+0x1f0>
 800110a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800110e:	b004      	add	sp, #16
 8001110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	f043 0320 	orr.w	r3, r3, #32
 800111a:	6023      	str	r3, [r4, #0]
 800111c:	4832      	ldr	r0, [pc, #200]	@ (80011e8 <_printf_i+0x238>)
 800111e:	2778      	movs	r7, #120	@ 0x78
 8001120:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	6831      	ldr	r1, [r6, #0]
 8001128:	061f      	lsls	r7, r3, #24
 800112a:	f851 5b04 	ldr.w	r5, [r1], #4
 800112e:	d402      	bmi.n	8001136 <_printf_i+0x186>
 8001130:	065f      	lsls	r7, r3, #25
 8001132:	bf48      	it	mi
 8001134:	b2ad      	uxthmi	r5, r5
 8001136:	6031      	str	r1, [r6, #0]
 8001138:	07d9      	lsls	r1, r3, #31
 800113a:	bf44      	itt	mi
 800113c:	f043 0320 	orrmi.w	r3, r3, #32
 8001140:	6023      	strmi	r3, [r4, #0]
 8001142:	b11d      	cbz	r5, 800114c <_printf_i+0x19c>
 8001144:	2310      	movs	r3, #16
 8001146:	e7ad      	b.n	80010a4 <_printf_i+0xf4>
 8001148:	4826      	ldr	r0, [pc, #152]	@ (80011e4 <_printf_i+0x234>)
 800114a:	e7e9      	b.n	8001120 <_printf_i+0x170>
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	f023 0320 	bic.w	r3, r3, #32
 8001152:	6023      	str	r3, [r4, #0]
 8001154:	e7f6      	b.n	8001144 <_printf_i+0x194>
 8001156:	4616      	mov	r6, r2
 8001158:	e7bd      	b.n	80010d6 <_printf_i+0x126>
 800115a:	6833      	ldr	r3, [r6, #0]
 800115c:	6825      	ldr	r5, [r4, #0]
 800115e:	6961      	ldr	r1, [r4, #20]
 8001160:	1d18      	adds	r0, r3, #4
 8001162:	6030      	str	r0, [r6, #0]
 8001164:	062e      	lsls	r6, r5, #24
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	d501      	bpl.n	800116e <_printf_i+0x1be>
 800116a:	6019      	str	r1, [r3, #0]
 800116c:	e002      	b.n	8001174 <_printf_i+0x1c4>
 800116e:	0668      	lsls	r0, r5, #25
 8001170:	d5fb      	bpl.n	800116a <_printf_i+0x1ba>
 8001172:	8019      	strh	r1, [r3, #0]
 8001174:	2300      	movs	r3, #0
 8001176:	6123      	str	r3, [r4, #16]
 8001178:	4616      	mov	r6, r2
 800117a:	e7bc      	b.n	80010f6 <_printf_i+0x146>
 800117c:	6833      	ldr	r3, [r6, #0]
 800117e:	1d1a      	adds	r2, r3, #4
 8001180:	6032      	str	r2, [r6, #0]
 8001182:	681e      	ldr	r6, [r3, #0]
 8001184:	6862      	ldr	r2, [r4, #4]
 8001186:	2100      	movs	r1, #0
 8001188:	4630      	mov	r0, r6
 800118a:	f7ff f829 	bl	80001e0 <memchr>
 800118e:	b108      	cbz	r0, 8001194 <_printf_i+0x1e4>
 8001190:	1b80      	subs	r0, r0, r6
 8001192:	6060      	str	r0, [r4, #4]
 8001194:	6863      	ldr	r3, [r4, #4]
 8001196:	6123      	str	r3, [r4, #16]
 8001198:	2300      	movs	r3, #0
 800119a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800119e:	e7aa      	b.n	80010f6 <_printf_i+0x146>
 80011a0:	6923      	ldr	r3, [r4, #16]
 80011a2:	4632      	mov	r2, r6
 80011a4:	4649      	mov	r1, r9
 80011a6:	4640      	mov	r0, r8
 80011a8:	47d0      	blx	sl
 80011aa:	3001      	adds	r0, #1
 80011ac:	d0ad      	beq.n	800110a <_printf_i+0x15a>
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	079b      	lsls	r3, r3, #30
 80011b2:	d413      	bmi.n	80011dc <_printf_i+0x22c>
 80011b4:	68e0      	ldr	r0, [r4, #12]
 80011b6:	9b03      	ldr	r3, [sp, #12]
 80011b8:	4298      	cmp	r0, r3
 80011ba:	bfb8      	it	lt
 80011bc:	4618      	movlt	r0, r3
 80011be:	e7a6      	b.n	800110e <_printf_i+0x15e>
 80011c0:	2301      	movs	r3, #1
 80011c2:	4632      	mov	r2, r6
 80011c4:	4649      	mov	r1, r9
 80011c6:	4640      	mov	r0, r8
 80011c8:	47d0      	blx	sl
 80011ca:	3001      	adds	r0, #1
 80011cc:	d09d      	beq.n	800110a <_printf_i+0x15a>
 80011ce:	3501      	adds	r5, #1
 80011d0:	68e3      	ldr	r3, [r4, #12]
 80011d2:	9903      	ldr	r1, [sp, #12]
 80011d4:	1a5b      	subs	r3, r3, r1
 80011d6:	42ab      	cmp	r3, r5
 80011d8:	dcf2      	bgt.n	80011c0 <_printf_i+0x210>
 80011da:	e7eb      	b.n	80011b4 <_printf_i+0x204>
 80011dc:	2500      	movs	r5, #0
 80011de:	f104 0619 	add.w	r6, r4, #25
 80011e2:	e7f5      	b.n	80011d0 <_printf_i+0x220>
 80011e4:	080014bc 	.word	0x080014bc
 80011e8:	080014cd 	.word	0x080014cd

080011ec <__malloc_lock>:
 80011ec:	4801      	ldr	r0, [pc, #4]	@ (80011f4 <__malloc_lock+0x8>)
 80011ee:	f7ff bc75 	b.w	8000adc <__retarget_lock_acquire_recursive>
 80011f2:	bf00      	nop
 80011f4:	20000808 	.word	0x20000808

080011f8 <__malloc_unlock>:
 80011f8:	4801      	ldr	r0, [pc, #4]	@ (8001200 <__malloc_unlock+0x8>)
 80011fa:	f7ff bc70 	b.w	8000ade <__retarget_lock_release_recursive>
 80011fe:	bf00      	nop
 8001200:	20000808 	.word	0x20000808

08001204 <_realloc_r>:
 8001204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001208:	4607      	mov	r7, r0
 800120a:	4614      	mov	r4, r2
 800120c:	460d      	mov	r5, r1
 800120e:	b921      	cbnz	r1, 800121a <_realloc_r+0x16>
 8001210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001214:	4611      	mov	r1, r2
 8001216:	f7ff bddd 	b.w	8000dd4 <_malloc_r>
 800121a:	b92a      	cbnz	r2, 8001228 <_realloc_r+0x24>
 800121c:	f000 f858 	bl	80012d0 <_free_r>
 8001220:	4625      	mov	r5, r4
 8001222:	4628      	mov	r0, r5
 8001224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001228:	f000 f89c 	bl	8001364 <_malloc_usable_size_r>
 800122c:	4284      	cmp	r4, r0
 800122e:	4606      	mov	r6, r0
 8001230:	d802      	bhi.n	8001238 <_realloc_r+0x34>
 8001232:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001236:	d8f4      	bhi.n	8001222 <_realloc_r+0x1e>
 8001238:	4621      	mov	r1, r4
 800123a:	4638      	mov	r0, r7
 800123c:	f7ff fdca 	bl	8000dd4 <_malloc_r>
 8001240:	4680      	mov	r8, r0
 8001242:	b908      	cbnz	r0, 8001248 <_realloc_r+0x44>
 8001244:	4645      	mov	r5, r8
 8001246:	e7ec      	b.n	8001222 <_realloc_r+0x1e>
 8001248:	42b4      	cmp	r4, r6
 800124a:	4622      	mov	r2, r4
 800124c:	4629      	mov	r1, r5
 800124e:	bf28      	it	cs
 8001250:	4632      	movcs	r2, r6
 8001252:	f000 f82f 	bl	80012b4 <memcpy>
 8001256:	4629      	mov	r1, r5
 8001258:	4638      	mov	r0, r7
 800125a:	f000 f839 	bl	80012d0 <_free_r>
 800125e:	e7f1      	b.n	8001244 <_realloc_r+0x40>

08001260 <memmove>:
 8001260:	4288      	cmp	r0, r1
 8001262:	b510      	push	{r4, lr}
 8001264:	eb01 0402 	add.w	r4, r1, r2
 8001268:	d902      	bls.n	8001270 <memmove+0x10>
 800126a:	4284      	cmp	r4, r0
 800126c:	4623      	mov	r3, r4
 800126e:	d807      	bhi.n	8001280 <memmove+0x20>
 8001270:	1e43      	subs	r3, r0, #1
 8001272:	42a1      	cmp	r1, r4
 8001274:	d008      	beq.n	8001288 <memmove+0x28>
 8001276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800127a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800127e:	e7f8      	b.n	8001272 <memmove+0x12>
 8001280:	4402      	add	r2, r0
 8001282:	4601      	mov	r1, r0
 8001284:	428a      	cmp	r2, r1
 8001286:	d100      	bne.n	800128a <memmove+0x2a>
 8001288:	bd10      	pop	{r4, pc}
 800128a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800128e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001292:	e7f7      	b.n	8001284 <memmove+0x24>

08001294 <_sbrk_r>:
 8001294:	b538      	push	{r3, r4, r5, lr}
 8001296:	4d06      	ldr	r5, [pc, #24]	@ (80012b0 <_sbrk_r+0x1c>)
 8001298:	2300      	movs	r3, #0
 800129a:	4604      	mov	r4, r0
 800129c:	4608      	mov	r0, r1
 800129e:	602b      	str	r3, [r5, #0]
 80012a0:	f7ff fb68 	bl	8000974 <_sbrk>
 80012a4:	1c43      	adds	r3, r0, #1
 80012a6:	d102      	bne.n	80012ae <_sbrk_r+0x1a>
 80012a8:	682b      	ldr	r3, [r5, #0]
 80012aa:	b103      	cbz	r3, 80012ae <_sbrk_r+0x1a>
 80012ac:	6023      	str	r3, [r4, #0]
 80012ae:	bd38      	pop	{r3, r4, r5, pc}
 80012b0:	20000814 	.word	0x20000814

080012b4 <memcpy>:
 80012b4:	440a      	add	r2, r1
 80012b6:	4291      	cmp	r1, r2
 80012b8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80012bc:	d100      	bne.n	80012c0 <memcpy+0xc>
 80012be:	4770      	bx	lr
 80012c0:	b510      	push	{r4, lr}
 80012c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80012c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80012ca:	4291      	cmp	r1, r2
 80012cc:	d1f9      	bne.n	80012c2 <memcpy+0xe>
 80012ce:	bd10      	pop	{r4, pc}

080012d0 <_free_r>:
 80012d0:	b538      	push	{r3, r4, r5, lr}
 80012d2:	4605      	mov	r5, r0
 80012d4:	2900      	cmp	r1, #0
 80012d6:	d041      	beq.n	800135c <_free_r+0x8c>
 80012d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012dc:	1f0c      	subs	r4, r1, #4
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bfb8      	it	lt
 80012e2:	18e4      	addlt	r4, r4, r3
 80012e4:	f7ff ff82 	bl	80011ec <__malloc_lock>
 80012e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001360 <_free_r+0x90>)
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	b933      	cbnz	r3, 80012fc <_free_r+0x2c>
 80012ee:	6063      	str	r3, [r4, #4]
 80012f0:	6014      	str	r4, [r2, #0]
 80012f2:	4628      	mov	r0, r5
 80012f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80012f8:	f7ff bf7e 	b.w	80011f8 <__malloc_unlock>
 80012fc:	42a3      	cmp	r3, r4
 80012fe:	d908      	bls.n	8001312 <_free_r+0x42>
 8001300:	6820      	ldr	r0, [r4, #0]
 8001302:	1821      	adds	r1, r4, r0
 8001304:	428b      	cmp	r3, r1
 8001306:	bf01      	itttt	eq
 8001308:	6819      	ldreq	r1, [r3, #0]
 800130a:	685b      	ldreq	r3, [r3, #4]
 800130c:	1809      	addeq	r1, r1, r0
 800130e:	6021      	streq	r1, [r4, #0]
 8001310:	e7ed      	b.n	80012ee <_free_r+0x1e>
 8001312:	461a      	mov	r2, r3
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	b10b      	cbz	r3, 800131c <_free_r+0x4c>
 8001318:	42a3      	cmp	r3, r4
 800131a:	d9fa      	bls.n	8001312 <_free_r+0x42>
 800131c:	6811      	ldr	r1, [r2, #0]
 800131e:	1850      	adds	r0, r2, r1
 8001320:	42a0      	cmp	r0, r4
 8001322:	d10b      	bne.n	800133c <_free_r+0x6c>
 8001324:	6820      	ldr	r0, [r4, #0]
 8001326:	4401      	add	r1, r0
 8001328:	1850      	adds	r0, r2, r1
 800132a:	4283      	cmp	r3, r0
 800132c:	6011      	str	r1, [r2, #0]
 800132e:	d1e0      	bne.n	80012f2 <_free_r+0x22>
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	6053      	str	r3, [r2, #4]
 8001336:	4408      	add	r0, r1
 8001338:	6010      	str	r0, [r2, #0]
 800133a:	e7da      	b.n	80012f2 <_free_r+0x22>
 800133c:	d902      	bls.n	8001344 <_free_r+0x74>
 800133e:	230c      	movs	r3, #12
 8001340:	602b      	str	r3, [r5, #0]
 8001342:	e7d6      	b.n	80012f2 <_free_r+0x22>
 8001344:	6820      	ldr	r0, [r4, #0]
 8001346:	1821      	adds	r1, r4, r0
 8001348:	428b      	cmp	r3, r1
 800134a:	bf04      	itt	eq
 800134c:	6819      	ldreq	r1, [r3, #0]
 800134e:	685b      	ldreq	r3, [r3, #4]
 8001350:	6063      	str	r3, [r4, #4]
 8001352:	bf04      	itt	eq
 8001354:	1809      	addeq	r1, r1, r0
 8001356:	6021      	streq	r1, [r4, #0]
 8001358:	6054      	str	r4, [r2, #4]
 800135a:	e7ca      	b.n	80012f2 <_free_r+0x22>
 800135c:	bd38      	pop	{r3, r4, r5, pc}
 800135e:	bf00      	nop
 8001360:	20000810 	.word	0x20000810

08001364 <_malloc_usable_size_r>:
 8001364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001368:	1f18      	subs	r0, r3, #4
 800136a:	2b00      	cmp	r3, #0
 800136c:	bfbc      	itt	lt
 800136e:	580b      	ldrlt	r3, [r1, r0]
 8001370:	18c0      	addlt	r0, r0, r3
 8001372:	4770      	bx	lr

08001374 <_init>:
 8001374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001376:	bf00      	nop
 8001378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800137a:	bc08      	pop	{r3}
 800137c:	469e      	mov	lr, r3
 800137e:	4770      	bx	lr

08001380 <_fini>:
 8001380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001382:	bf00      	nop
 8001384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001386:	bc08      	pop	{r3}
 8001388:	469e      	mov	lr, r3
 800138a:	4770      	bx	lr
