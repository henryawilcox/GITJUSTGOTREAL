
Stepper Control V8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e68  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08000ffc  08000ffc  00001ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010ec  080010ec  00003158  2**0
                  CONTENTS
  4 .ARM          00000000  080010ec  080010ec  00003158  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010ec  080010ec  00003158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010ec  080010ec  000020ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080010f0  080010f0  000020f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  080010f4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003158  2**0
                  CONTENTS
 10 .bss          00000060  20000158  20000158  00003158  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b8  200001b8  00003158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000222b  00000000  00000000  00003188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000079c  00000000  00000000  000053b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00005b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000120  00000000  00000000  00005cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000977  00000000  00000000  00005de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002196  00000000  00000000  0000675f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007719a  00000000  00000000  000088f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0007fa8f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000480  00000000  00000000  0007fad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  0007ff54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000158 	.word	0x20000158
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000fe4 	.word	0x08000fe4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000015c 	.word	0x2000015c
 80001d0:	08000fe4 	.word	0x08000fe4

080001d4 <on_serial_command>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void on_serial_command(uint32_t len) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
//    parse_command(USART2_PORT.RXBuffer, &USART2_PORT);
	SerialOutputString((uint8_t *)"YESS\r\n", &USART2_PORT);
 80001dc:	4903      	ldr	r1, [pc, #12]	@ (80001ec <on_serial_command+0x18>)
 80001de:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <on_serial_command+0x1c>)
 80001e0:	f000 fa3d 	bl	800065e <SerialOutputString>
}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	200000ac 	.word	0x200000ac
 80001f0:	08000ffc 	.word	0x08000ffc

080001f4 <main>:



int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	SCB->CPACR |= (0xF << 20);  // Enable CP10 and CP11 (FPU)
 80001f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000238 <main+0x44>)
 80001fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80001fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000238 <main+0x44>)
 8000200:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000204:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SerialInitialise(BAUD_115200, &USART1_PORT, on_serial_command);
 8000208:	4a0c      	ldr	r2, [pc, #48]	@ (800023c <main+0x48>)
 800020a:	490d      	ldr	r1, [pc, #52]	@ (8000240 <main+0x4c>)
 800020c:	2004      	movs	r0, #4
 800020e:	f000 f865 	bl	80002dc <SerialInitialise>
	SerialOutputString((uint8_t *)"System ready\r\n", &USART1_PORT);
 8000212:	490b      	ldr	r1, [pc, #44]	@ (8000240 <main+0x4c>)
 8000214:	480b      	ldr	r0, [pc, #44]	@ (8000244 <main+0x50>)
 8000216:	f000 fa22 	bl	800065e <SerialOutputString>
	enable_interrupt_USART1_PC11(); // enables RX interrupt
 800021a:	f000 f90f 	bl	800043c <enable_interrupt_USART1_PC11>

	SerialInitialise(BAUD_115200, &USART2_PORT, on_serial_command);
 800021e:	4a07      	ldr	r2, [pc, #28]	@ (800023c <main+0x48>)
 8000220:	4909      	ldr	r1, [pc, #36]	@ (8000248 <main+0x54>)
 8000222:	2004      	movs	r0, #4
 8000224:	f000 f85a 	bl	80002dc <SerialInitialise>
//	SerialOutputString((uint8_t *)"System ready\r\n", &USART2_PORT);
	enable_interrupt_USART2_PA3();
 8000228:	f000 f920 	bl	800046c <enable_interrupt_USART2_PA3>


	Servo_Init();
 800022c:	f000 fa3c 	bl	80006a8 <Servo_Init>

	stepper_control_init();
 8000230:	f000 fb50 	bl	80008d4 <stepper_control_init>
//	SerialOutputString((uint8_t *)"Steppers Initialised\r\n", &USART1_PORT);



//    /* Loop forever */
	for(;;){
 8000234:	bf00      	nop
 8000236:	e7fd      	b.n	8000234 <main+0x40>
 8000238:	e000ed00 	.word	0xe000ed00
 800023c:	080001d5 	.word	0x080001d5
 8000240:	20000000 	.word	0x20000000
 8000244:	08001004 	.word	0x08001004
 8000248:	200000ac 	.word	0x200000ac

0800024c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025a:	2b00      	cmp	r3, #0
 800025c:	db0b      	blt.n	8000276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	f003 021f 	and.w	r2, r3, #31
 8000264:	4907      	ldr	r1, [pc, #28]	@ (8000284 <__NVIC_EnableIRQ+0x38>)
 8000266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026a:	095b      	lsrs	r3, r3, #5
 800026c:	2001      	movs	r0, #1
 800026e:	fa00 f202 	lsl.w	r2, r0, r2
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000276:	bf00      	nop
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000e100 	.word	0xe000e100

08000288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	6039      	str	r1, [r7, #0]
 8000292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000298:	2b00      	cmp	r3, #0
 800029a:	db0a      	blt.n	80002b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	490c      	ldr	r1, [pc, #48]	@ (80002d4 <__NVIC_SetPriority+0x4c>)
 80002a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a6:	0112      	lsls	r2, r2, #4
 80002a8:	b2d2      	uxtb	r2, r2
 80002aa:	440b      	add	r3, r1
 80002ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002b0:	e00a      	b.n	80002c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	4908      	ldr	r1, [pc, #32]	@ (80002d8 <__NVIC_SetPriority+0x50>)
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	f003 030f 	and.w	r3, r3, #15
 80002be:	3b04      	subs	r3, #4
 80002c0:	0112      	lsls	r2, r2, #4
 80002c2:	b2d2      	uxtb	r2, r2
 80002c4:	440b      	add	r3, r1
 80002c6:	761a      	strb	r2, [r3, #24]
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr
 80002d4:	e000e100 	.word	0xe000e100
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <SerialInitialise>:


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set

void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 80002dc:	b480      	push	{r7}
 80002de:	b087      	sub	sp, #28
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002f0:	4b51      	ldr	r3, [pc, #324]	@ (8000438 <SerialInitialise+0x15c>)
 80002f2:	69db      	ldr	r3, [r3, #28]
 80002f4:	4a50      	ldr	r2, [pc, #320]	@ (8000438 <SerialInitialise+0x15c>)
 80002f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002fa:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002fc:	4b4e      	ldr	r3, [pc, #312]	@ (8000438 <SerialInitialise+0x15c>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a4d      	ldr	r2, [pc, #308]	@ (8000438 <SerialInitialise+0x15c>)
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	691a      	ldr	r2, [r3, #16]
 800030c:	4b4a      	ldr	r3, [pc, #296]	@ (8000438 <SerialInitialise+0x15c>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	4949      	ldr	r1, [pc, #292]	@ (8000438 <SerialInitialise+0x15c>)
 8000312:	4313      	orrs	r3, r2
 8000314:	614b      	str	r3, [r1, #20]

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000316:	4b48      	ldr	r3, [pc, #288]	@ (8000438 <SerialInitialise+0x15c>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	4a47      	ldr	r2, [pc, #284]	@ (8000438 <SerialInitialise+0x15c>)
 800031c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000320:	6153      	str	r3, [r2, #20]
	GPIOA->OSPEEDR |= (0xF << 4);       // High speed on PA2 and PA3
 8000322:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800032c:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000330:	6093      	str	r3, [r2, #8]
	// Clear bits 4–7 (PA2 and PA3), then set to alternate function (10)
	GPIOA->MODER &= ~(0xF << 4);        // Clear PA2 and PA3 mode
 8000332:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800033c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000340:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (0xA << 4);        // Set PA2, PA3 to alternate function (10)
 8000342:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800034c:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000350:	6013      	str	r3, [r2, #0]


	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	68ba      	ldr	r2, [r7, #8]
 8000358:	6952      	ldr	r2, [r2, #20]
 800035a:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	68ba      	ldr	r2, [r7, #8]
 8000362:	6992      	ldr	r2, [r2, #24]
 8000364:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	69d9      	ldr	r1, [r3, #28]
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	6a1a      	ldr	r2, [r3, #32]
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	430a      	orrs	r2, r1
 8000376:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	6a19      	ldr	r1, [r3, #32]
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	430a      	orrs	r2, r1
 8000388:	625a      	str	r2, [r3, #36]	@ 0x24

	GPIOA->AFR[0] &= ~((0xF << (4 * 2)) | (0xF << (4 * 3)));  // Clear bits for PA2, PA3
 800038a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800038e:	6a1b      	ldr	r3, [r3, #32]
 8000390:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000394:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000398:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  ((0x7 << (4 * 2)) | (0x7 << (4 * 3)));  // Set AF7 for PA2, PA3
 800039a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800039e:	6a1b      	ldr	r3, [r3, #32]
 80003a0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003a4:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80003a8:	6213      	str	r3, [r2, #32]


	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	68da      	ldr	r2, [r3, #12]
 80003ae:	4b22      	ldr	r3, [pc, #136]	@ (8000438 <SerialInitialise+0x15c>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	4921      	ldr	r1, [pc, #132]	@ (8000438 <SerialInitialise+0x15c>)
 80003b4:	4313      	orrs	r3, r2
 80003b6:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	689a      	ldr	r2, [r3, #8]
 80003bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000438 <SerialInitialise+0x15c>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	491d      	ldr	r1, [pc, #116]	@ (8000438 <SerialInitialise+0x15c>)
 80003c2:	4313      	orrs	r3, r2
 80003c4:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	330c      	adds	r3, #12
 80003cc:	617b      	str	r3, [r7, #20]

	switch(baudRate){
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	2b04      	cmp	r3, #4
 80003d2:	d823      	bhi.n	800041c <SerialInitialise+0x140>
 80003d4:	a201      	add	r2, pc, #4	@ (adr r2, 80003dc <SerialInitialise+0x100>)
 80003d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003da:	bf00      	nop
 80003dc:	080003f1 	.word	0x080003f1
 80003e0:	080003fb 	.word	0x080003fb
 80003e4:	08000405 	.word	0x08000405
 80003e8:	0800040d 	.word	0x0800040d
 80003ec:	08000415 	.word	0x08000415
		case BAUD_9600:
			*baud_rate_config = 0x341;
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	f240 3241 	movw	r2, #833	@ 0x341
 80003f6:	801a      	strh	r2, [r3, #0]
			break;
 80003f8:	e010      	b.n	800041c <SerialInitialise+0x140>
		case BAUD_19200:
			*baud_rate_config = 0x1A1;
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000400:	801a      	strh	r2, [r3, #0]
			break;
 8000402:	e00b      	b.n	800041c <SerialInitialise+0x140>
		case BAUD_38400:
			*baud_rate_config = 0xD1;
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	22d1      	movs	r2, #209	@ 0xd1
 8000408:	801a      	strh	r2, [r3, #0]
			break;
 800040a:	e007      	b.n	800041c <SerialInitialise+0x140>
		case BAUD_57600:
			*baud_rate_config = 0x8B;
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	228b      	movs	r2, #139	@ 0x8b
 8000410:	801a      	strh	r2, [r3, #0]
			break;
 8000412:	e003      	b.n	800041c <SerialInitialise+0x140>
		case BAUD_115200:
			*baud_rate_config = 0x46;
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	2246      	movs	r2, #70	@ 0x46
 8000418:	801a      	strh	r2, [r3, #0]
			break;
 800041a:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f042 020d 	orr.w	r2, r2, #13
 800042a:	601a      	str	r2, [r3, #0]
}
 800042c:	bf00      	nop
 800042e:	371c      	adds	r7, #28
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000

0800043c <enable_interrupt_USART1_PC11>:


void enable_interrupt_USART1_PC11() {
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
    __disable_irq();

    // Enable NVIC interrupt for USART1
    NVIC_SetPriority(USART1_IRQn, 5);
 8000444:	2105      	movs	r1, #5
 8000446:	2025      	movs	r0, #37	@ 0x25
 8000448:	f7ff ff1e 	bl	8000288 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART1_IRQn);
 800044c:	2025      	movs	r0, #37	@ 0x25
 800044e:	f7ff fefd 	bl	800024c <__NVIC_EnableIRQ>

    // Enable RXNE (receive register not empty) interrupt
    USART1->CR1 |= USART_CR1_RXNEIE;
 8000452:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <enable_interrupt_USART1_PC11+0x2c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a04      	ldr	r2, [pc, #16]	@ (8000468 <enable_interrupt_USART1_PC11+0x2c>)
 8000458:	f043 0320 	orr.w	r3, r3, #32
 800045c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800045e:	b662      	cpsie	i
}
 8000460:	bf00      	nop

    __enable_irq();
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40013800 	.word	0x40013800

0800046c <enable_interrupt_USART2_PA3>:

void enable_interrupt_USART2_PA3() {
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000470:	b672      	cpsid	i
}
 8000472:	bf00      	nop
    __disable_irq();
    NVIC_SetPriority(USART2_IRQn, 5);
 8000474:	2105      	movs	r1, #5
 8000476:	2026      	movs	r0, #38	@ 0x26
 8000478:	f7ff ff06 	bl	8000288 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART2_IRQn);
 800047c:	2026      	movs	r0, #38	@ 0x26
 800047e:	f7ff fee5 	bl	800024c <__NVIC_EnableIRQ>
    USART2->CR1 |= USART_CR1_RXNEIE;
 8000482:	4b05      	ldr	r3, [pc, #20]	@ (8000498 <enable_interrupt_USART2_PA3+0x2c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a04      	ldr	r2, [pc, #16]	@ (8000498 <enable_interrupt_USART2_PA3+0x2c>)
 8000488:	f043 0320 	orr.w	r3, r3, #32
 800048c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800048e:	b662      	cpsie	i
}
 8000490:	bf00      	nop
    __enable_irq();
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40004400 	.word	0x40004400

0800049c <USART1_EXTI25_IRQHandler>:

#define PACKET_SIZE 8
volatile uint8_t rx_packet[PACKET_SIZE];
volatile uint8_t rx_index = 0;

void USART1_EXTI25_IRQHandler(void) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
    if (USART1->ISR & USART_ISR_RXNE) {
 80004a2:	4b30      	ldr	r3, [pc, #192]	@ (8000564 <USART1_EXTI25_IRQHandler+0xc8>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	f003 0320 	and.w	r3, r3, #32
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d057      	beq.n	800055e <USART1_EXTI25_IRQHandler+0xc2>
        char c = USART1->RDR;
 80004ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000564 <USART1_EXTI25_IRQHandler+0xc8>)
 80004b0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	71fb      	strb	r3, [r7, #7]

        if (rx_index == 0 && c != 0xAA) {
 80004b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000568 <USART1_EXTI25_IRQHandler+0xcc>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d102      	bne.n	80004c6 <USART1_EXTI25_IRQHandler+0x2a>
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	2baa      	cmp	r3, #170	@ 0xaa
 80004c4:	d14a      	bne.n	800055c <USART1_EXTI25_IRQHandler+0xc0>
            return;  // Wait for start byte
        }

        rx_packet[rx_index++] = c;
 80004c6:	4b28      	ldr	r3, [pc, #160]	@ (8000568 <USART1_EXTI25_IRQHandler+0xcc>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	1c5a      	adds	r2, r3, #1
 80004ce:	b2d1      	uxtb	r1, r2
 80004d0:	4a25      	ldr	r2, [pc, #148]	@ (8000568 <USART1_EXTI25_IRQHandler+0xcc>)
 80004d2:	7011      	strb	r1, [r2, #0]
 80004d4:	4619      	mov	r1, r3
 80004d6:	4a25      	ldr	r2, [pc, #148]	@ (800056c <USART1_EXTI25_IRQHandler+0xd0>)
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	5453      	strb	r3, [r2, r1]

        if (rx_index >= PACKET_SIZE) {
 80004dc:	4b22      	ldr	r3, [pc, #136]	@ (8000568 <USART1_EXTI25_IRQHandler+0xcc>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	2b07      	cmp	r3, #7
 80004e4:	d93b      	bls.n	800055e <USART1_EXTI25_IRQHandler+0xc2>
            rx_index = 0;
 80004e6:	4b20      	ldr	r3, [pc, #128]	@ (8000568 <USART1_EXTI25_IRQHandler+0xcc>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]

            // Dispatch based on command
            switch (rx_packet[1]) {
 80004ec:	4b1f      	ldr	r3, [pc, #124]	@ (800056c <USART1_EXTI25_IRQHandler+0xd0>)
 80004ee:	785b      	ldrb	r3, [r3, #1]
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	2b03      	cmp	r3, #3
 80004f4:	d02f      	beq.n	8000556 <USART1_EXTI25_IRQHandler+0xba>
 80004f6:	2b03      	cmp	r3, #3
 80004f8:	dc31      	bgt.n	800055e <USART1_EXTI25_IRQHandler+0xc2>
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d002      	beq.n	8000504 <USART1_EXTI25_IRQHandler+0x68>
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d026      	beq.n	8000550 <USART1_EXTI25_IRQHandler+0xb4>
 8000502:	e02c      	b.n	800055e <USART1_EXTI25_IRQHandler+0xc2>
                case 0x01: {
                    int8_t vx = rx_packet[2];
 8000504:	4b19      	ldr	r3, [pc, #100]	@ (800056c <USART1_EXTI25_IRQHandler+0xd0>)
 8000506:	789b      	ldrb	r3, [r3, #2]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	71bb      	strb	r3, [r7, #6]
                    int8_t vy = rx_packet[3];
 800050c:	4b17      	ldr	r3, [pc, #92]	@ (800056c <USART1_EXTI25_IRQHandler+0xd0>)
 800050e:	78db      	ldrb	r3, [r3, #3]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	717b      	strb	r3, [r7, #5]
                    int8_t i = rx_packet[4];
 8000514:	4b15      	ldr	r3, [pc, #84]	@ (800056c <USART1_EXTI25_IRQHandler+0xd0>)
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	b2db      	uxtb	r3, r3
 800051a:	713b      	strb	r3, [r7, #4]
                    uint16_t z_target = (rx_packet[6] << 8) | rx_packet[5];  // Little endian
 800051c:	4b13      	ldr	r3, [pc, #76]	@ (800056c <USART1_EXTI25_IRQHandler+0xd0>)
 800051e:	799b      	ldrb	r3, [r3, #6]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	021b      	lsls	r3, r3, #8
 8000524:	b21a      	sxth	r2, r3
 8000526:	4b11      	ldr	r3, [pc, #68]	@ (800056c <USART1_EXTI25_IRQHandler+0xd0>)
 8000528:	795b      	ldrb	r3, [r3, #5]
 800052a:	b2db      	uxtb	r3, r3
 800052c:	b21b      	sxth	r3, r3
 800052e:	4313      	orrs	r3, r2
 8000530:	b21b      	sxth	r3, r3
 8000532:	807b      	strh	r3, [r7, #2]
                    plan_velocity(vx, vy, i);  // Use your existing logic
 8000534:	793a      	ldrb	r2, [r7, #4]
 8000536:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800053a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800053e:	4618      	mov	r0, r3
 8000540:	f000 faa6 	bl	8000a90 <plan_velocity>
                    set_z_target(z_target);
 8000544:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fb29 	bl	8000ba0 <set_z_target>
                    break;
 800054e:	e006      	b.n	800055e <USART1_EXTI25_IRQHandler+0xc2>
                }
                case 0x02:
                	Servo_Close();
 8000550:	f000 f928 	bl	80007a4 <Servo_Close>
                    // future: home command
                    break;
 8000554:	e003      	b.n	800055e <USART1_EXTI25_IRQHandler+0xc2>
                case 0x03:
                	Servo_Open();
 8000556:	f000 f91d 	bl	8000794 <Servo_Open>
                    // future: return current position
                    break;
 800055a:	e000      	b.n	800055e <USART1_EXTI25_IRQHandler+0xc2>
            return;  // Wait for start byte
 800055c:	bf00      	nop
            }
        }
    }
}
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40013800 	.word	0x40013800
 8000568:	2000017c 	.word	0x2000017c
 800056c:	20000174 	.word	0x20000174

08000570 <USART2_EXTI26_IRQHandler>:


void USART2_EXTI26_IRQHandler(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
	SerialOutputString((uint8_t *)"recieved\r\n", &USART2_PORT);
 8000576:	492a      	ldr	r1, [pc, #168]	@ (8000620 <USART2_EXTI26_IRQHandler+0xb0>)
 8000578:	482a      	ldr	r0, [pc, #168]	@ (8000624 <USART2_EXTI26_IRQHandler+0xb4>)
 800057a:	f000 f870 	bl	800065e <SerialOutputString>

    if (USART2->ISR & USART_ISR_RXNE) {
 800057e:	4b2a      	ldr	r3, [pc, #168]	@ (8000628 <USART2_EXTI26_IRQHandler+0xb8>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	f003 0320 	and.w	r3, r3, #32
 8000586:	2b00      	cmp	r3, #0
 8000588:	d046      	beq.n	8000618 <USART2_EXTI26_IRQHandler+0xa8>
        char c = USART2->RDR;
 800058a:	4b27      	ldr	r3, [pc, #156]	@ (8000628 <USART2_EXTI26_IRQHandler+0xb8>)
 800058c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800058e:	b29b      	uxth	r3, r3
 8000590:	71fb      	strb	r3, [r7, #7]

        if (USART2_PORT.RXIndex < BUFFER_SIZE - 2) {  // -2 to fit \n and \0
 8000592:	4b23      	ldr	r3, [pc, #140]	@ (8000620 <USART2_EXTI26_IRQHandler+0xb0>)
 8000594:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b3d      	cmp	r3, #61	@ 0x3d
 800059c:	d838      	bhi.n	8000610 <USART2_EXTI26_IRQHandler+0xa0>
            if (c == '\r') {
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b0d      	cmp	r3, #13
 80005a2:	d125      	bne.n	80005f0 <USART2_EXTI26_IRQHandler+0x80>
                USART2_PORT.RXBuffer[USART2_PORT.RXIndex++] = '\0';
 80005a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000620 <USART2_EXTI26_IRQHandler+0xb0>)
 80005a6:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	1c5a      	adds	r2, r3, #1
 80005ae:	b2d1      	uxtb	r1, r2
 80005b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000620 <USART2_EXTI26_IRQHandler+0xb0>)
 80005b2:	f882 1064 	strb.w	r1, [r2, #100]	@ 0x64
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <USART2_EXTI26_IRQHandler+0xb0>)
 80005ba:	4413      	add	r3, r2
 80005bc:	2200      	movs	r2, #0
 80005be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

                if (USART2_PORT.completion_function) {
 80005c2:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <USART2_EXTI26_IRQHandler+0xb0>)
 80005c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d008      	beq.n	80005de <USART2_EXTI26_IRQHandler+0x6e>
					USART2_PORT.completion_function(USART2_PORT.RXIndex);
 80005cc:	4b14      	ldr	r3, [pc, #80]	@ (8000620 <USART2_EXTI26_IRQHandler+0xb0>)
 80005ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80005d2:	4a13      	ldr	r2, [pc, #76]	@ (8000620 <USART2_EXTI26_IRQHandler+0xb0>)
 80005d4:	f892 2064 	ldrb.w	r2, [r2, #100]	@ 0x64
 80005d8:	b2d2      	uxtb	r2, r2
 80005da:	4610      	mov	r0, r2
 80005dc:	4798      	blx	r3
                //  Copy to TX buffer


                //  Start TX
                // Enable TX interrupt
                USART2_PORT.string_ready = 1;
 80005de:	4b10      	ldr	r3, [pc, #64]	@ (8000620 <USART2_EXTI26_IRQHandler+0xb0>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6

                // Reset RX buffer
                USART2_PORT.RXIndex = 0;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <USART2_EXTI26_IRQHandler+0xb0>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
            }
        } else {
            USART2_PORT.RXIndex = 0; // Overflow safety
        }
    }
}
 80005ee:	e013      	b.n	8000618 <USART2_EXTI26_IRQHandler+0xa8>
                USART2_PORT.RXBuffer[USART2_PORT.RXIndex++] = c;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <USART2_EXTI26_IRQHandler+0xb0>)
 80005f2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	1c5a      	adds	r2, r3, #1
 80005fa:	b2d1      	uxtb	r1, r2
 80005fc:	4a08      	ldr	r2, [pc, #32]	@ (8000620 <USART2_EXTI26_IRQHandler+0xb0>)
 80005fe:	f882 1064 	strb.w	r1, [r2, #100]	@ 0x64
 8000602:	461a      	mov	r2, r3
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <USART2_EXTI26_IRQHandler+0xb0>)
 8000606:	4413      	add	r3, r2
 8000608:	79fa      	ldrb	r2, [r7, #7]
 800060a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800060e:	e003      	b.n	8000618 <USART2_EXTI26_IRQHandler+0xa8>
            USART2_PORT.RXIndex = 0; // Overflow safety
 8000610:	4b03      	ldr	r3, [pc, #12]	@ (8000620 <USART2_EXTI26_IRQHandler+0xb0>)
 8000612:	2200      	movs	r2, #0
 8000614:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200000ac 	.word	0x200000ac
 8000624:	08001014 	.word	0x08001014
 8000628:	40004400 	.word	0x40004400

0800062c <SerialOutputChar>:
    serial_port->completion_function(counter);
}



void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	6039      	str	r1, [r7, #0]
 8000636:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 8000638:	bf00      	nop
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000644:	2b00      	cmp	r3, #0
 8000646:	d0f8      	beq.n	800063a <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data;
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	79fa      	ldrb	r2, [r7, #7]
 800064e:	b292      	uxth	r2, r2
 8000650:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000652:	bf00      	nop
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <SerialOutputString>:

void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 800065e:	b580      	push	{r7, lr}
 8000660:	b084      	sub	sp, #16
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 800066c:	e00b      	b.n	8000686 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	6839      	ldr	r1, [r7, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ffd9 	bl	800062c <SerialOutputChar>
		counter++;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	3301      	adds	r3, #1
 800067e:	60fb      	str	r3, [r7, #12]
		pt++;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3301      	adds	r3, #1
 8000684:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1ef      	bne.n	800066e <SerialOutputString+0x10>
	}

	SerialOutputChar('\n', serial_port);
 800068e:	6839      	ldr	r1, [r7, #0]
 8000690:	200a      	movs	r0, #10
 8000692:	f7ff ffcb 	bl	800062c <SerialOutputChar>
	SerialOutputChar('\r', serial_port);
 8000696:	6839      	ldr	r1, [r7, #0]
 8000698:	200d      	movs	r0, #13
 800069a:	f7ff ffc7 	bl	800062c <SerialOutputChar>
	//serial_port->completion_function(counter);
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <Servo_Init>:
#define SERVO_GPIO_PIN    6
#define SERVO_GPIO_AF     2  // AF2 for TIM3_CH1 on PC6
#define SERVO_OPEN_PULSE  2400  // in microseconds
#define SERVO_CLOSE_PULSE 500  // in microseconds

void Servo_Init(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
    // Enable clocks
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80006ac:	4b27      	ldr	r3, [pc, #156]	@ (800074c <Servo_Init+0xa4>)
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	4a26      	ldr	r2, [pc, #152]	@ (800074c <Servo_Init+0xa4>)
 80006b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006b6:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80006b8:	4b24      	ldr	r3, [pc, #144]	@ (800074c <Servo_Init+0xa4>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	4a23      	ldr	r2, [pc, #140]	@ (800074c <Servo_Init+0xa4>)
 80006be:	f043 0302 	orr.w	r3, r3, #2
 80006c2:	61d3      	str	r3, [r2, #28]

    // Set PA6 to AF mode
    SERVO_GPIO_PORT->MODER &= ~(3 << (SERVO_GPIO_PIN * 2));
 80006c4:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <Servo_Init+0xa8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <Servo_Init+0xa8>)
 80006ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80006ce:	6013      	str	r3, [r2, #0]
    SERVO_GPIO_PORT->MODER |= (2 << (SERVO_GPIO_PIN * 2));  // AF mode
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <Servo_Init+0xa8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000750 <Servo_Init+0xa8>)
 80006d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006da:	6013      	str	r3, [r2, #0]
    SERVO_GPIO_PORT->AFR[0] |= (SERVO_GPIO_AF << (SERVO_GPIO_PIN * 4));
 80006dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <Servo_Init+0xa8>)
 80006de:	6a1b      	ldr	r3, [r3, #32]
 80006e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000750 <Servo_Init+0xa8>)
 80006e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006e6:	6213      	str	r3, [r2, #32]

    // Configure timer for 50 Hz PWM (20 ms period)
    SERVO_TIMER->PSC = 8 - 1;      // 72 MHz / 72 = 1 MHz (1 µs tick)
 80006e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <Servo_Init+0xac>)
 80006ea:	2207      	movs	r2, #7
 80006ec:	629a      	str	r2, [r3, #40]	@ 0x28
    SERVO_TIMER->ARR = 20000 - 1;   // 20,000 µs period = 50 Hz
 80006ee:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <Servo_Init+0xac>)
 80006f0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80006f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    // PWM mode 1 on CH1
    SERVO_TIMER->CCMR1 |= (6 << 4);  // OC1M = 110
 80006f6:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <Servo_Init+0xac>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	4a16      	ldr	r2, [pc, #88]	@ (8000754 <Servo_Init+0xac>)
 80006fc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000700:	6193      	str	r3, [r2, #24]
    SERVO_TIMER->CCMR1 |= (1 << 3);  // OC1PE enable
 8000702:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <Servo_Init+0xac>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a13      	ldr	r2, [pc, #76]	@ (8000754 <Servo_Init+0xac>)
 8000708:	f043 0308 	orr.w	r3, r3, #8
 800070c:	6193      	str	r3, [r2, #24]
    SERVO_TIMER->CCER |= (1 << 0);   // Enable CH1 output
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <Servo_Init+0xac>)
 8000710:	6a1b      	ldr	r3, [r3, #32]
 8000712:	4a10      	ldr	r2, [pc, #64]	@ (8000754 <Servo_Init+0xac>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6213      	str	r3, [r2, #32]
    SERVO_TIMER->CR1 |= (1 << 7);    // ARPE
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <Servo_Init+0xac>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a0d      	ldr	r2, [pc, #52]	@ (8000754 <Servo_Init+0xac>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000724:	6013      	str	r3, [r2, #0]
    SERVO_TIMER->EGR |= (1 << 0);    // UG - force update
 8000726:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <Servo_Init+0xac>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a0a      	ldr	r2, [pc, #40]	@ (8000754 <Servo_Init+0xac>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6153      	str	r3, [r2, #20]
    SERVO_TIMER->CR1 |= (1 << 0);    // Enable counter
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <Servo_Init+0xac>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a07      	ldr	r2, [pc, #28]	@ (8000754 <Servo_Init+0xac>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6013      	str	r3, [r2, #0]

    // Start with neutral pulse
    Servo_SetPulse(1500);
 800073e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000742:	f000 f809 	bl	8000758 <Servo_SetPulse>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	48000800 	.word	0x48000800
 8000754:	40000400 	.word	0x40000400

08000758 <Servo_SetPulse>:

void Servo_SetPulse(uint16_t pulse_us) {
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	80fb      	strh	r3, [r7, #6]
    if (pulse_us < 1000) pulse_us = 1000;
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000768:	d202      	bcs.n	8000770 <Servo_SetPulse+0x18>
 800076a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800076e:	80fb      	strh	r3, [r7, #6]
    if (pulse_us > 2000) pulse_us = 2000;
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000776:	d902      	bls.n	800077e <Servo_SetPulse+0x26>
 8000778:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800077c:	80fb      	strh	r3, [r7, #6]
    SERVO_TIMER->CCR1 = pulse_us;
 800077e:	4a04      	ldr	r2, [pc, #16]	@ (8000790 <Servo_SetPulse+0x38>)
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	40000400 	.word	0x40000400

08000794 <Servo_Open>:

void Servo_Open(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
    Servo_SetPulse(SERVO_OPEN_PULSE);
 8000798:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 800079c:	f7ff ffdc 	bl	8000758 <Servo_SetPulse>
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Servo_Close>:

void Servo_Close(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    Servo_SetPulse(SERVO_CLOSE_PULSE);
 80007a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007ac:	f7ff ffd4 	bl	8000758 <Servo_SetPulse>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <__NVIC_EnableIRQ>:
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	db0b      	blt.n	80007de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	f003 021f 	and.w	r2, r3, #31
 80007cc:	4907      	ldr	r1, [pc, #28]	@ (80007ec <__NVIC_EnableIRQ+0x38>)
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	095b      	lsrs	r3, r3, #5
 80007d4:	2001      	movs	r0, #1
 80007d6:	fa00 f202 	lsl.w	r2, r0, r2
 80007da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <__NVIC_SetPriority>:
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	@ (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	@ (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <stepper_timer_init>:
static inline void step_motor_B(void);

#define CLAMP(val, min, max) ((val < min) ? min : ((val > max) ? max : val))

// === TIMER SETUP ===
void stepper_timer_init(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000848:	4b21      	ldr	r3, [pc, #132]	@ (80008d0 <stepper_timer_init+0x8c>)
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	4a20      	ldr	r2, [pc, #128]	@ (80008d0 <stepper_timer_init+0x8c>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	61d3      	str	r3, [r2, #28]

//    TIM2->PSC = 79999;          // 1 µs resolution at 8 MHz
    TIM2->PSC = 7;
 8000854:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000858:	2207      	movs	r2, #7
 800085a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 50; //60
 800085c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000860:	2232      	movs	r2, #50	@ 0x32
 8000862:	62da      	str	r2, [r3, #44]	@ 0x2c


    TIM2->DIER |= TIM_DIER_UIE;       // Enable Update Interrupt
 8000864:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	60d3      	str	r3, [r2, #12]
    TIM2->EGR |= TIM_EGR_UG;          // Force update event to load settings
 8000874:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	6153      	str	r3, [r2, #20]
    TIM2->CR1 |= TIM_CR1_CEN;         // Start timer
 8000884:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6013      	str	r3, [r2, #0]

    TIM2->EGR |= TIM_EGR_UG;
 8000894:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	6153      	str	r3, [r2, #20]
    TIM2->CR1 |= TIM_CR1_CEN;
 80008a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop

    __disable_irq();
    NVIC_SetPriority(TIM2_IRQn, 0);
 80008b8:	2100      	movs	r1, #0
 80008ba:	201c      	movs	r0, #28
 80008bc:	f7ff ff98 	bl	80007f0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 80008c0:	201c      	movs	r0, #28
 80008c2:	f7ff ff77 	bl	80007b4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80008c6:	b662      	cpsie	i
}
 80008c8:	bf00      	nop
    __enable_irq();
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <stepper_control_init>:

void stepper_control_init(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	init_axis0_gpio();
 80008d8:	f000 fa28 	bl	8000d2c <init_axis0_gpio>
	init_axis1_gpio();
 80008dc:	f000 fa80 	bl	8000de0 <init_axis1_gpio>
	init_axis2_gpio();
 80008e0:	f000 fad8 	bl	8000e94 <init_axis2_gpio>
    stepper_timer_init();
 80008e4:	f7ff ffae 	bl	8000844 <stepper_timer_init>


    corexy.x = 0;
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <stepper_control_init+0x68>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
    corexy.y = 0;
 80008ee:	4b13      	ldr	r3, [pc, #76]	@ (800093c <stepper_control_init+0x68>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
    corexy.signA = 0;
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <stepper_control_init+0x68>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	741a      	strb	r2, [r3, #16]
    corexy.signB = 0;
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <stepper_control_init+0x68>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	745a      	strb	r2, [r3, #17]
    corexy.a_steps = 0;
 8000900:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <stepper_control_init+0x68>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
    corexy.b_steps = 0;
 8000906:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <stepper_control_init+0x68>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
    corexy.tick_counter = 0;
 800090c:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <stepper_control_init+0x68>)
 800090e:	2200      	movs	r2, #0
 8000910:	761a      	strb	r2, [r3, #24]

    axis2.position_steps = 0;
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <stepper_control_init+0x6c>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
    axis2.step_count_remaining = 0;
 8000918:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <stepper_control_init+0x6c>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
    axis2.step_delay_ticks = 6;
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <stepper_control_init+0x6c>)
 8000920:	2206      	movs	r2, #6
 8000922:	609a      	str	r2, [r3, #8]
    axis2.direction = 0;
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <stepper_control_init+0x6c>)
 8000926:	2200      	movs	r2, #0
 8000928:	731a      	strb	r2, [r3, #12]
    axis2.tick_counter = 0;
 800092a:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <stepper_control_init+0x6c>)
 800092c:	2200      	movs	r2, #0
 800092e:	735a      	strb	r2, [r3, #13]
    axis2.enabled = 0;
 8000930:	4b03      	ldr	r3, [pc, #12]	@ (8000940 <stepper_control_init+0x6c>)
 8000932:	2200      	movs	r2, #0
 8000934:	739a      	strb	r2, [r3, #14]

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000180 	.word	0x20000180
 8000940:	200001a8 	.word	0x200001a8

08000944 <TIM2_IRQHandler>:


// === ISR ===
void TIM2_IRQHandler(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 8000948:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800094c:	691b      	ldr	r3, [r3, #16]
 800094e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000952:	f023 0301 	bic.w	r3, r3, #1
 8000956:	6113      	str	r3, [r2, #16]


	corexy.tick_counter--;
 8000958:	4b49      	ldr	r3, [pc, #292]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 800095a:	7e1b      	ldrb	r3, [r3, #24]
 800095c:	b25b      	sxtb	r3, r3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	3b01      	subs	r3, #1
 8000962:	b2db      	uxtb	r3, r3
 8000964:	b25a      	sxtb	r2, r3
 8000966:	4b46      	ldr	r3, [pc, #280]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 8000968:	761a      	strb	r2, [r3, #24]

	if(corexy.tick_counter <= 0){
 800096a:	4b45      	ldr	r3, [pc, #276]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 800096c:	7e1b      	ldrb	r3, [r3, #24]
 800096e:	b25b      	sxtb	r3, r3
 8000970:	2b00      	cmp	r3, #0
 8000972:	dc3e      	bgt.n	80009f2 <TIM2_IRQHandler+0xae>
		if (corexy.a_steps >= corexy.b_steps) {
 8000974:	4b42      	ldr	r3, [pc, #264]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	4b41      	ldr	r3, [pc, #260]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	429a      	cmp	r2, r3
 800097e:	db18      	blt.n	80009b2 <TIM2_IRQHandler+0x6e>
			step_motor_A();
 8000980:	f000 f952 	bl	8000c28 <step_motor_A>
			corexy.a_error += corexy.b_steps;
 8000984:	4b3e      	ldr	r3, [pc, #248]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 8000986:	68da      	ldr	r2, [r3, #12]
 8000988:	4b3d      	ldr	r3, [pc, #244]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4413      	add	r3, r2
 800098e:	4a3c      	ldr	r2, [pc, #240]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 8000990:	6013      	str	r3, [r2, #0]
			if (corexy.a_error >= corexy.a_steps) {
 8000992:	4b3b      	ldr	r3, [pc, #236]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	4b3a      	ldr	r3, [pc, #232]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	429a      	cmp	r2, r3
 800099c:	db21      	blt.n	80009e2 <TIM2_IRQHandler+0x9e>
				step_motor_B();
 800099e:	f000 f985 	bl	8000cac <step_motor_B>
				corexy.a_error -= corexy.a_steps;
 80009a2:	4b37      	ldr	r3, [pc, #220]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	4a36      	ldr	r2, [pc, #216]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 80009a8:	6812      	ldr	r2, [r2, #0]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	4a34      	ldr	r2, [pc, #208]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	e017      	b.n	80009e2 <TIM2_IRQHandler+0x9e>
			}
		} else {
			step_motor_B();
 80009b2:	f000 f97b 	bl	8000cac <step_motor_B>
			corexy.b_error += corexy.a_steps;
 80009b6:	4b32      	ldr	r3, [pc, #200]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	4b31      	ldr	r3, [pc, #196]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	4413      	add	r3, r2
 80009c0:	4a2f      	ldr	r2, [pc, #188]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 80009c2:	6053      	str	r3, [r2, #4]
			if (corexy.b_error >= corexy.b_steps) {
 80009c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	db08      	blt.n	80009e2 <TIM2_IRQHandler+0x9e>
				step_motor_A();
 80009d0:	f000 f92a 	bl	8000c28 <step_motor_A>
				corexy.b_error -= corexy.b_steps;
 80009d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	4a29      	ldr	r2, [pc, #164]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 80009da:	6852      	ldr	r2, [r2, #4]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	4a28      	ldr	r2, [pc, #160]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 80009e0:	6053      	str	r3, [r2, #4]
			}
		}

		corexy.tick_counter = delay_table[corexy.index];
 80009e2:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 80009e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009e6:	4a27      	ldr	r2, [pc, #156]	@ (8000a84 <TIM2_IRQHandler+0x140>)
 80009e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ec:	b25a      	sxtb	r2, r3
 80009ee:	4b24      	ldr	r3, [pc, #144]	@ (8000a80 <TIM2_IRQHandler+0x13c>)
 80009f0:	761a      	strb	r2, [r3, #24]
	}

//	 ----- Z Axis -----
	if (axis2.tick_counter > 0) axis2.tick_counter--;
 80009f2:	4b25      	ldr	r3, [pc, #148]	@ (8000a88 <TIM2_IRQHandler+0x144>)
 80009f4:	7b5b      	ldrb	r3, [r3, #13]
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	dd08      	ble.n	8000a0e <TIM2_IRQHandler+0xca>
 80009fc:	4b22      	ldr	r3, [pc, #136]	@ (8000a88 <TIM2_IRQHandler+0x144>)
 80009fe:	7b5b      	ldrb	r3, [r3, #13]
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	3b01      	subs	r3, #1
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	b25a      	sxtb	r2, r3
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <TIM2_IRQHandler+0x144>)
 8000a0c:	735a      	strb	r2, [r3, #13]

	if (axis2.tick_counter == 0 && axis2.enabled) {
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <TIM2_IRQHandler+0x144>)
 8000a10:	7b5b      	ldrb	r3, [r3, #13]
 8000a12:	b25b      	sxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d131      	bne.n	8000a7c <TIM2_IRQHandler+0x138>
 8000a18:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <TIM2_IRQHandler+0x144>)
 8000a1a:	7b9b      	ldrb	r3, [r3, #14]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d02c      	beq.n	8000a7c <TIM2_IRQHandler+0x138>
		if (axis2.step_count_remaining == 0) {
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <TIM2_IRQHandler+0x144>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d103      	bne.n	8000a32 <TIM2_IRQHandler+0xee>
			axis2.enabled = 0;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <TIM2_IRQHandler+0x144>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	739a      	strb	r2, [r3, #14]
			axis2.step_count_remaining--;
			axis2.tick_counter = axis2.step_delay_ticks;
		}
	}

}
 8000a30:	e024      	b.n	8000a7c <TIM2_IRQHandler+0x138>
			if (axis2.direction > 0)
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <TIM2_IRQHandler+0x144>)
 8000a34:	7b1b      	ldrb	r3, [r3, #12]
 8000a36:	b25b      	sxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	dd03      	ble.n	8000a44 <TIM2_IRQHandler+0x100>
				AXIS2_GPIO_PORT->BSRR = (1 << AXIS2_DIR_PIN);
 8000a3c:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <TIM2_IRQHandler+0x148>)
 8000a3e:	2208      	movs	r2, #8
 8000a40:	619a      	str	r2, [r3, #24]
 8000a42:	e003      	b.n	8000a4c <TIM2_IRQHandler+0x108>
				AXIS2_GPIO_PORT->BSRR = (1 << (AXIS2_DIR_PIN + 16));
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <TIM2_IRQHandler+0x148>)
 8000a46:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a4a:	619a      	str	r2, [r3, #24]
			AXIS2_GPIO_PORT->BSRR = (1 << AXIS2_STEP_PIN);
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <TIM2_IRQHandler+0x148>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	619a      	str	r2, [r3, #24]
			AXIS2_GPIO_PORT->BRR  = (1 << AXIS2_STEP_PIN);
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <TIM2_IRQHandler+0x148>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	629a      	str	r2, [r3, #40]	@ 0x28
			axis2.position_steps += axis2.direction;
 8000a58:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <TIM2_IRQHandler+0x144>)
 8000a5a:	7b1b      	ldrb	r3, [r3, #12]
 8000a5c:	b25a      	sxtb	r2, r3
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <TIM2_IRQHandler+0x144>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a08      	ldr	r2, [pc, #32]	@ (8000a88 <TIM2_IRQHandler+0x144>)
 8000a66:	6013      	str	r3, [r2, #0]
			axis2.step_count_remaining--;
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <TIM2_IRQHandler+0x144>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	4a06      	ldr	r2, [pc, #24]	@ (8000a88 <TIM2_IRQHandler+0x144>)
 8000a70:	6053      	str	r3, [r2, #4]
			axis2.tick_counter = axis2.step_delay_ticks;
 8000a72:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <TIM2_IRQHandler+0x144>)
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	b25a      	sxtb	r2, r3
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <TIM2_IRQHandler+0x144>)
 8000a7a:	735a      	strb	r2, [r3, #13]
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000180 	.word	0x20000180
 8000a84:	08001024 	.word	0x08001024
 8000a88:	200001a8 	.word	0x200001a8
 8000a8c:	48000c00 	.word	0x48000c00

08000a90 <plan_velocity>:
//    corexy.steps_remaining = (corexy.a_steps > corexy.b_steps) ? corexy.a_steps : corexy.b_steps;
//
//    corexy.a_error = 0;
//    corexy.b_error = 0;
//}
void plan_velocity(int8_t vx, int8_t vy, uint8_t index) {
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	71bb      	strb	r3, [r7, #6]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	717b      	strb	r3, [r7, #5]
//	char msg[64];
//	snprintf(msg, sizeof(msg), "%d, %d\r\n", vx, vy);
//	SerialOutputString((uint8_t*)msg, &USART1_PORT);

	if (vx == 0 && vy == 0) {
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d110      	bne.n	8000acc <plan_velocity+0x3c>
 8000aaa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d10c      	bne.n	8000acc <plan_velocity+0x3c>
//		char msg[64];
//		snprintf(msg, sizeof(msg), "s");
//		SerialOutputString((uint8_t*)msg, &USART1_PORT);

        corexy.a_steps = 0;
 8000ab2:	4b39      	ldr	r3, [pc, #228]	@ (8000b98 <plan_velocity+0x108>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
        corexy.b_steps = 0;
 8000ab8:	4b37      	ldr	r3, [pc, #220]	@ (8000b98 <plan_velocity+0x108>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
        corexy.signA = 0;
 8000abe:	4b36      	ldr	r3, [pc, #216]	@ (8000b98 <plan_velocity+0x108>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	741a      	strb	r2, [r3, #16]
        corexy.signB = 0;
 8000ac4:	4b34      	ldr	r3, [pc, #208]	@ (8000b98 <plan_velocity+0x108>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	745a      	strb	r2, [r3, #17]
        return;
 8000aca:	e05f      	b.n	8000b8c <plan_velocity+0xfc>
    }

    int vA = vx + vy;
 8000acc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000ad0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]
    int vB = vx - vy;
 8000ad8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000adc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	60bb      	str	r3, [r7, #8]

    corexy.signA = (vA >= 0) ? 1 : -1;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	db01      	blt.n	8000aee <plan_velocity+0x5e>
 8000aea:	2201      	movs	r2, #1
 8000aec:	e001      	b.n	8000af2 <plan_velocity+0x62>
 8000aee:	f04f 32ff 	mov.w	r2, #4294967295
 8000af2:	4b29      	ldr	r3, [pc, #164]	@ (8000b98 <plan_velocity+0x108>)
 8000af4:	741a      	strb	r2, [r3, #16]
    corexy.signB = (vB >= 0) ? 1 : -1;
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db01      	blt.n	8000b00 <plan_velocity+0x70>
 8000afc:	2201      	movs	r2, #1
 8000afe:	e001      	b.n	8000b04 <plan_velocity+0x74>
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295
 8000b04:	4b24      	ldr	r3, [pc, #144]	@ (8000b98 <plan_velocity+0x108>)
 8000b06:	745a      	strb	r2, [r3, #17]
    corexy.a_steps = abs(vA);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	4a21      	ldr	r2, [pc, #132]	@ (8000b98 <plan_velocity+0x108>)
 8000b12:	6093      	str	r3, [r2, #8]
    corexy.b_steps = abs(vB);
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bfb8      	it	lt
 8000b1a:	425b      	neglt	r3, r3
 8000b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000b98 <plan_velocity+0x108>)
 8000b1e:	60d3      	str	r3, [r2, #12]
    corexy.steps_remaining = (corexy.a_steps > corexy.b_steps) ? corexy.a_steps : corexy.b_steps;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <plan_velocity+0x108>)
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <plan_velocity+0x108>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dd02      	ble.n	8000b32 <plan_velocity+0xa2>
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <plan_velocity+0x108>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	e001      	b.n	8000b36 <plan_velocity+0xa6>
 8000b32:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <plan_velocity+0x108>)
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	4a18      	ldr	r2, [pc, #96]	@ (8000b98 <plan_velocity+0x108>)
 8000b38:	6153      	str	r3, [r2, #20]

    corexy.a_error = 0;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <plan_velocity+0x108>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
    corexy.b_error = 0;
 8000b40:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <plan_velocity+0x108>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	605a      	str	r2, [r3, #4]


	if (corexy.signA > 0)
 8000b46:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <plan_velocity+0x108>)
 8000b48:	7c1b      	ldrb	r3, [r3, #16]
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd04      	ble.n	8000b5a <plan_velocity+0xca>
		AXIS0_GPIO_PORT->BSRR = (1 << AXIS0_DIR_PIN);
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <plan_velocity+0x10c>)
 8000b52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b56:	619a      	str	r2, [r3, #24]
 8000b58:	e003      	b.n	8000b62 <plan_velocity+0xd2>
	else
		AXIS0_GPIO_PORT->BSRR = (1 << (AXIS0_DIR_PIN + 16)); // Reset bit
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <plan_velocity+0x10c>)
 8000b5c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000b60:	619a      	str	r2, [r3, #24]


	if (corexy.signB > 0)
 8000b62:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <plan_velocity+0x108>)
 8000b64:	7c5b      	ldrb	r3, [r3, #17]
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	dd03      	ble.n	8000b74 <plan_velocity+0xe4>
		AXIS1_GPIO_PORT->BSRR = (1 << AXIS1_DIR_PIN);
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <plan_velocity+0x10c>)
 8000b6e:	2210      	movs	r2, #16
 8000b70:	619a      	str	r2, [r3, #24]
 8000b72:	e003      	b.n	8000b7c <plan_velocity+0xec>
	else
		AXIS1_GPIO_PORT->BSRR = (1 << (AXIS1_DIR_PIN + 16));
 8000b74:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <plan_velocity+0x10c>)
 8000b76:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000b7a:	619a      	str	r2, [r3, #24]
    // === Vector magnitude normalization ===
//    float fx = (float)vx;
//    float fy = (float)vy;
//    int index = (int)(sqrtf((float)(vx * vx + vy * vy)) + 0.5f);
    if (index < 0) index = 0;
    if (index > 100) index = 99;
 8000b7c:	797b      	ldrb	r3, [r7, #5]
 8000b7e:	2b64      	cmp	r3, #100	@ 0x64
 8000b80:	d901      	bls.n	8000b86 <plan_velocity+0xf6>
 8000b82:	2363      	movs	r3, #99	@ 0x63
 8000b84:	717b      	strb	r3, [r7, #5]

    corexy.index = index;
 8000b86:	797b      	ldrb	r3, [r7, #5]
 8000b88:	4a03      	ldr	r2, [pc, #12]	@ (8000b98 <plan_velocity+0x108>)
 8000b8a:	6253      	str	r3, [r2, #36]	@ 0x24
//	char buf[64];
//	snprintf(buf, sizeof(buf), "%d\r\n", corexy.index);
//	SerialOutputString((uint8_t*)buf, &USART1_PORT);

//    corexy.tick_counter = delay_table[index];
}
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000180 	.word	0x20000180
 8000b9c:	48000c00 	.word	0x48000c00

08000ba0 <set_z_target>:
//    corexy.x = x_next;
//    corexy.y = y_next;
//}

// === Z-Axis Command Handler ===
void set_z_target(int16_t z_target) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80fb      	strh	r3, [r7, #6]
    if (!axis2.enabled && z_target >= 0) {
 8000baa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <set_z_target+0x84>)
 8000bac:	7b9b      	ldrb	r3, [r3, #14]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d130      	bne.n	8000c16 <set_z_target+0x76>
 8000bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db2c      	blt.n	8000c16 <set_z_target+0x76>
        z_target = CLAMP(z_target, AXIS2_LIMIT_MIN, AXIS2_LIMIT_MAX);
 8000bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db08      	blt.n	8000bd6 <set_z_target+0x36>
 8000bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bc8:	f242 22ec 	movw	r2, #8940	@ 0x22ec
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	bfa8      	it	ge
 8000bd0:	4613      	movge	r3, r2
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	e000      	b.n	8000bd8 <set_z_target+0x38>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	80fb      	strh	r3, [r7, #6]
        int delta = z_target - axis2.position_steps;
 8000bda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <set_z_target+0x84>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	60fb      	str	r3, [r7, #12]
        if (delta != 0) {
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d014      	beq.n	8000c16 <set_z_target+0x76>
            axis2.direction = (delta > 0) ? 1 : -1;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	dd01      	ble.n	8000bf6 <set_z_target+0x56>
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	e001      	b.n	8000bfa <set_z_target+0x5a>
 8000bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <set_z_target+0x84>)
 8000bfc:	731a      	strb	r2, [r3, #12]
            axis2.step_count_remaining = abs(delta);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	bfb8      	it	lt
 8000c04:	425b      	neglt	r3, r3
 8000c06:	4a07      	ldr	r2, [pc, #28]	@ (8000c24 <set_z_target+0x84>)
 8000c08:	6053      	str	r3, [r2, #4]
            axis2.step_delay_ticks = 2;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <set_z_target+0x84>)
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	609a      	str	r2, [r3, #8]
            axis2.enabled = 1;
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <set_z_target+0x84>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	739a      	strb	r2, [r3, #14]
        }
    }
}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	200001a8 	.word	0x200001a8

08000c28 <step_motor_A>:


// === INLINE STEPPING ===
static inline void step_motor_A(void) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
    if (corexy.signA == 0) return;
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <step_motor_A+0x7c>)
 8000c30:	7c1b      	ldrb	r3, [r3, #16]
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d02c      	beq.n	8000c92 <step_motor_A+0x6a>

    int32_t x_next = corexy.x + corexy.signA;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <step_motor_A+0x7c>)
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	4a19      	ldr	r2, [pc, #100]	@ (8000ca4 <step_motor_A+0x7c>)
 8000c3e:	7c12      	ldrb	r2, [r2, #16]
 8000c40:	b252      	sxtb	r2, r2
 8000c42:	4413      	add	r3, r2
 8000c44:	607b      	str	r3, [r7, #4]
    int32_t y_next = corexy.y + corexy.signA;
 8000c46:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <step_motor_A+0x7c>)
 8000c48:	6a1b      	ldr	r3, [r3, #32]
 8000c4a:	4a16      	ldr	r2, [pc, #88]	@ (8000ca4 <step_motor_A+0x7c>)
 8000c4c:	7c12      	ldrb	r2, [r2, #16]
 8000c4e:	b252      	sxtb	r2, r2
 8000c50:	4413      	add	r3, r2
 8000c52:	603b      	str	r3, [r7, #0]
    if (x_next < X_MIN || x_next > X_MAX || y_next < Y_MIN || y_next > Y_MAX) return;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db1d      	blt.n	8000c96 <step_motor_A+0x6e>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000c60:	4293      	cmp	r3, r2
 8000c62:	dc18      	bgt.n	8000c96 <step_motor_A+0x6e>
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db15      	blt.n	8000c96 <step_motor_A+0x6e>
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8000c70:	4293      	cmp	r3, r2
 8000c72:	dc10      	bgt.n	8000c96 <step_motor_A+0x6e>

//    AXIS0_GPIO_PORT->BSRR = (corexy.signA > 0) ? (1 << AXIS0_DIR_PIN) : (1 << (AXIS0_DIR_PIN + 16));
    AXIS0_GPIO_PORT->BSRR = (1 << AXIS0_STEP_PIN);
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <step_motor_A+0x80>)
 8000c76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c7a:	619a      	str	r2, [r3, #24]
    AXIS0_GPIO_PORT->BSRR = (1 << (AXIS0_STEP_PIN + 16));
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <step_motor_A+0x80>)
 8000c7e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c82:	619a      	str	r2, [r3, #24]

	corexy.x = x_next;
 8000c84:	4a07      	ldr	r2, [pc, #28]	@ (8000ca4 <step_motor_A+0x7c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	61d3      	str	r3, [r2, #28]
	corexy.y = y_next;
 8000c8a:	4a06      	ldr	r2, [pc, #24]	@ (8000ca4 <step_motor_A+0x7c>)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	6213      	str	r3, [r2, #32]
 8000c90:	e002      	b.n	8000c98 <step_motor_A+0x70>
    if (corexy.signA == 0) return;
 8000c92:	bf00      	nop
 8000c94:	e000      	b.n	8000c98 <step_motor_A+0x70>
    if (x_next < X_MIN || x_next > X_MAX || y_next < Y_MIN || y_next > Y_MAX) return;
 8000c96:	bf00      	nop
}
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000180 	.word	0x20000180
 8000ca8:	48000c00 	.word	0x48000c00

08000cac <step_motor_B>:

static inline void step_motor_B(void) {
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
    if (corexy.signB == 0) return;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <step_motor_B+0x78>)
 8000cb4:	7c5b      	ldrb	r3, [r3, #17]
 8000cb6:	b25b      	sxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d02b      	beq.n	8000d14 <step_motor_B+0x68>

    //next steps
    int32_t x_next = corexy.x + corexy.signB;
 8000cbc:	4b19      	ldr	r3, [pc, #100]	@ (8000d24 <step_motor_B+0x78>)
 8000cbe:	69db      	ldr	r3, [r3, #28]
 8000cc0:	4a18      	ldr	r2, [pc, #96]	@ (8000d24 <step_motor_B+0x78>)
 8000cc2:	7c52      	ldrb	r2, [r2, #17]
 8000cc4:	b252      	sxtb	r2, r2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	607b      	str	r3, [r7, #4]
    int32_t y_next = corexy.y - corexy.signB;
 8000cca:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <step_motor_B+0x78>)
 8000ccc:	6a1b      	ldr	r3, [r3, #32]
 8000cce:	4a15      	ldr	r2, [pc, #84]	@ (8000d24 <step_motor_B+0x78>)
 8000cd0:	7c52      	ldrb	r2, [r2, #17]
 8000cd2:	b252      	sxtb	r2, r2
 8000cd4:	1a9b      	subs	r3, r3, r2
 8000cd6:	603b      	str	r3, [r7, #0]
    if (x_next < X_MIN || x_next > X_MAX || y_next < Y_MIN || y_next > Y_MAX) return;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db1c      	blt.n	8000d18 <step_motor_B+0x6c>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	dc17      	bgt.n	8000d18 <step_motor_B+0x6c>
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	db14      	blt.n	8000d18 <step_motor_B+0x6c>
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	dc0f      	bgt.n	8000d18 <step_motor_B+0x6c>

//    AXIS1_GPIO_PORT->BSRR = (corexy.signB > 0) ? (1 << AXIS1_DIR_PIN) : (1 << (AXIS1_DIR_PIN + 16));
    AXIS1_GPIO_PORT->BSRR = (1 << AXIS1_STEP_PIN);
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <step_motor_B+0x7c>)
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	619a      	str	r2, [r3, #24]
    AXIS1_GPIO_PORT->BSRR = (1 << (AXIS1_STEP_PIN + 16));
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <step_motor_B+0x7c>)
 8000d00:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d04:	619a      	str	r2, [r3, #24]

	corexy.x = x_next;
 8000d06:	4a07      	ldr	r2, [pc, #28]	@ (8000d24 <step_motor_B+0x78>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	61d3      	str	r3, [r2, #28]
	corexy.y = y_next;
 8000d0c:	4a05      	ldr	r2, [pc, #20]	@ (8000d24 <step_motor_B+0x78>)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	6213      	str	r3, [r2, #32]
 8000d12:	e002      	b.n	8000d1a <step_motor_B+0x6e>
    if (corexy.signB == 0) return;
 8000d14:	bf00      	nop
 8000d16:	e000      	b.n	8000d1a <step_motor_B+0x6e>
    if (x_next < X_MIN || x_next > X_MAX || y_next < Y_MIN || y_next > Y_MAX) return;
 8000d18:	bf00      	nop

}
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	20000180 	.word	0x20000180
 8000d28:	48000c00 	.word	0x48000c00

08000d2c <init_axis0_gpio>:




void init_axis0_gpio(void) {
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
    // --- Enable clock for GPIO port used by AXIS0 ---
    if (AXIS0_GPIO_PORT == GPIOA) RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
    else if (AXIS0_GPIO_PORT == GPIOB) RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
    else if (AXIS0_GPIO_PORT == GPIOC) RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
    else if (AXIS0_GPIO_PORT == GPIOD) RCC->AHBENR |= RCC_AHBENR_GPIODEN;
 8000d30:	4b29      	ldr	r3, [pc, #164]	@ (8000dd8 <init_axis0_gpio+0xac>)
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	4a28      	ldr	r2, [pc, #160]	@ (8000dd8 <init_axis0_gpio+0xac>)
 8000d36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d3a:	6153      	str	r3, [r2, #20]
    else if (AXIS0_GPIO_PORT == GPIOE) RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
    else if (AXIS0_GPIO_PORT == GPIOF) RCC->AHBENR |= RCC_AHBENR_GPIOFEN;

    // --- STEP Pin Setup ---
    AXIS0_GPIO_PORT->MODER   &= ~(3 << (AXIS0_STEP_PIN * 2));         // Clear mode bits (input mode)
 8000d3c:	4b27      	ldr	r3, [pc, #156]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a26      	ldr	r2, [pc, #152]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d42:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000d46:	6013      	str	r3, [r2, #0]
    AXIS0_GPIO_PORT->MODER   |=  (1 << (AXIS0_STEP_PIN * 2));         // Set as general-purpose output mode
 8000d48:	4b24      	ldr	r3, [pc, #144]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a23      	ldr	r2, [pc, #140]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d52:	6013      	str	r3, [r2, #0]
    AXIS0_GPIO_PORT->OTYPER  &= ~(1 << AXIS0_STEP_PIN);               // Output push-pull
 8000d54:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	4a20      	ldr	r2, [pc, #128]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000d5e:	6053      	str	r3, [r2, #4]
    AXIS0_GPIO_PORT->OSPEEDR |=  (3 << (AXIS0_STEP_PIN * 2));         // High speed output
 8000d60:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	4a1d      	ldr	r2, [pc, #116]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d66:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8000d6a:	6093      	str	r3, [r2, #8]
    AXIS0_GPIO_PORT->PUPDR   &= ~(3 << (AXIS0_STEP_PIN * 2));         // No pull-up/pull-down
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	4a1a      	ldr	r2, [pc, #104]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d72:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000d76:	60d3      	str	r3, [r2, #12]

    // --- DIR Pin Setup ---
    AXIS0_GPIO_PORT->MODER   &= ~(3 << (AXIS0_DIR_PIN * 2));          // 1. Clear MODER bits (sets to input)
 8000d78:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a17      	ldr	r2, [pc, #92]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d7e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000d82:	6013      	str	r3, [r2, #0]
    AXIS0_GPIO_PORT->MODER   |=  (1 << (AXIS0_DIR_PIN * 2));          // 2. Set MODER to 01 (output mode)
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d8e:	6013      	str	r3, [r2, #0]
    AXIS0_GPIO_PORT->OTYPER  &= ~(1 << AXIS0_DIR_PIN);                // 3. Set output type to push-pull
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	4a11      	ldr	r2, [pc, #68]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000d9a:	6053      	str	r3, [r2, #4]
    AXIS0_GPIO_PORT->OSPEEDR |=  (3 << (AXIS0_DIR_PIN * 2));          // 4. Set speed to high (11)
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	4a0e      	ldr	r2, [pc, #56]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000da2:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 8000da6:	6093      	str	r3, [r2, #8]
    AXIS0_GPIO_PORT->PUPDR   &= ~(3 << (AXIS0_DIR_PIN * 2));          // 5. No pull-up / pull-down
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	4a0b      	ldr	r2, [pc, #44]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000dae:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000db2:	60d3      	str	r3, [r2, #12]

    // --- LIMIT Pin Setup ---
    AXIS0_GPIO_PORT->MODER   &= ~(3 << (AXIS0_LIMIT_PIN * 2));        // Set as input (00)
 8000db4:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a08      	ldr	r2, [pc, #32]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000dba:	f023 0303 	bic.w	r3, r3, #3
 8000dbe:	6013      	str	r3, [r2, #0]
    AXIS0_GPIO_PORT->PUPDR   &= ~(3 << (AXIS0_LIMIT_PIN * 2));        // No pull-up/pull-down
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	4a05      	ldr	r2, [pc, #20]	@ (8000ddc <init_axis0_gpio+0xb0>)
 8000dc6:	f023 0303 	bic.w	r3, r3, #3
 8000dca:	60d3      	str	r3, [r2, #12]


    // Optional: enable pull-up if limit switch is normally open
    // AXIS0_GPIO_PORT->PUPDR |= (1 << (AXIS0_LIMIT_PIN * 2));        // Pull-up
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	48000c00 	.word	0x48000c00

08000de0 <init_axis1_gpio>:

void init_axis1_gpio(void) {
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
    // --- Enable clock for GPIO port used by AXIS0 ---
    if (AXIS1_GPIO_PORT == GPIOA) RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
    else if (AXIS1_GPIO_PORT == GPIOB) RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
    else if (AXIS1_GPIO_PORT == GPIOC) RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
    else if (AXIS1_GPIO_PORT == GPIOD) RCC->AHBENR |= RCC_AHBENR_GPIODEN;
 8000de4:	4b29      	ldr	r3, [pc, #164]	@ (8000e8c <init_axis1_gpio+0xac>)
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	4a28      	ldr	r2, [pc, #160]	@ (8000e8c <init_axis1_gpio+0xac>)
 8000dea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000dee:	6153      	str	r3, [r2, #20]
    else if (AXIS1_GPIO_PORT == GPIOE) RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
    else if (AXIS1_GPIO_PORT == GPIOF) RCC->AHBENR |= RCC_AHBENR_GPIOFEN;

    // --- STEP Pin Setup ---
    AXIS1_GPIO_PORT->MODER   &= ~(3 << (AXIS1_STEP_PIN * 2));         // Clear mode bits (input mode)
 8000df0:	4b27      	ldr	r3, [pc, #156]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a26      	ldr	r2, [pc, #152]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000df6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000dfa:	6013      	str	r3, [r2, #0]
    AXIS1_GPIO_PORT->MODER   |=  (1 << (AXIS1_STEP_PIN * 2));         // Set as general-purpose output mode
 8000dfc:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a23      	ldr	r2, [pc, #140]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e02:	f043 0310 	orr.w	r3, r3, #16
 8000e06:	6013      	str	r3, [r2, #0]
    AXIS1_GPIO_PORT->OTYPER  &= ~(1 << AXIS1_STEP_PIN);               // Output push-pull
 8000e08:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	4a20      	ldr	r2, [pc, #128]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e0e:	f023 0304 	bic.w	r3, r3, #4
 8000e12:	6053      	str	r3, [r2, #4]
    AXIS1_GPIO_PORT->OSPEEDR |=  (3 << (AXIS1_STEP_PIN * 2));         // High speed output
 8000e14:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	4a1d      	ldr	r2, [pc, #116]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e1a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000e1e:	6093      	str	r3, [r2, #8]
    AXIS1_GPIO_PORT->PUPDR   &= ~(3 << (AXIS1_STEP_PIN * 2));         // No pull-up/pull-down
 8000e20:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	4a1a      	ldr	r2, [pc, #104]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e26:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000e2a:	60d3      	str	r3, [r2, #12]

    // --- DIR Pin Setup ---
    AXIS1_GPIO_PORT->MODER   &= ~(3 << (AXIS1_DIR_PIN * 2));          // 1. Clear MODER bits (sets to input)
 8000e2c:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a17      	ldr	r2, [pc, #92]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000e36:	6013      	str	r3, [r2, #0]
    AXIS1_GPIO_PORT->MODER   |=  (1 << (AXIS1_DIR_PIN * 2));          // 2. Set MODER to 01 (output mode)
 8000e38:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a14      	ldr	r2, [pc, #80]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e42:	6013      	str	r3, [r2, #0]
    AXIS1_GPIO_PORT->OTYPER  &= ~(1 << AXIS1_DIR_PIN);                // 3. Set output type to push-pull
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	4a11      	ldr	r2, [pc, #68]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e4a:	f023 0310 	bic.w	r3, r3, #16
 8000e4e:	6053      	str	r3, [r2, #4]
    AXIS1_GPIO_PORT->OSPEEDR |=  (3 << (AXIS1_DIR_PIN * 2));          // 4. Set speed to high (11)
 8000e50:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	4a0e      	ldr	r2, [pc, #56]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e56:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000e5a:	6093      	str	r3, [r2, #8]
    AXIS1_GPIO_PORT->PUPDR   &= ~(3 << (AXIS1_DIR_PIN * 2));          // 5. No pull-up / pull-down
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	4a0b      	ldr	r2, [pc, #44]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000e66:	60d3      	str	r3, [r2, #12]

    // --- LIMIT Pin Setup ---
    AXIS1_GPIO_PORT->MODER   &= ~(3 << (AXIS1_LIMIT_PIN * 2));        // Set as input (00)
 8000e68:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a08      	ldr	r2, [pc, #32]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e6e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e72:	6013      	str	r3, [r2, #0]
    AXIS1_GPIO_PORT->PUPDR   &= ~(3 << (AXIS1_LIMIT_PIN * 2));        // No pull-up/pull-down
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <init_axis1_gpio+0xb0>)
 8000e7a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e7e:	60d3      	str	r3, [r2, #12]
    // Optional: enable pull-up if limit switch is normally open
    // AXIS0_GPIO_PORT->PUPDR |= (1 << (AXIS0_LIMIT_PIN * 2));        // Pull-up
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	48000c00 	.word	0x48000c00

08000e94 <init_axis2_gpio>:

void init_axis2_gpio(void) {
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
    if (AXIS2_GPIO_PORT == GPIOA) RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
    else if (AXIS2_GPIO_PORT == GPIOB) RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
    else if (AXIS2_GPIO_PORT == GPIOC) RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
    else if (AXIS2_GPIO_PORT == GPIOD) RCC->AHBENR |= RCC_AHBENR_GPIODEN;
 8000e98:	4b29      	ldr	r3, [pc, #164]	@ (8000f40 <init_axis2_gpio+0xac>)
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	4a28      	ldr	r2, [pc, #160]	@ (8000f40 <init_axis2_gpio+0xac>)
 8000e9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ea2:	6153      	str	r3, [r2, #20]
    else if (AXIS2_GPIO_PORT == GPIOE) RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
    else if (AXIS2_GPIO_PORT == GPIOF) RCC->AHBENR |= RCC_AHBENR_GPIOFEN;

    AXIS2_GPIO_PORT->MODER   &= ~(3 << (AXIS2_STEP_PIN * 2));
 8000ea4:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a26      	ldr	r2, [pc, #152]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000eaa:	f023 030c 	bic.w	r3, r3, #12
 8000eae:	6013      	str	r3, [r2, #0]
    AXIS2_GPIO_PORT->MODER   |=  (1 << (AXIS2_STEP_PIN * 2));
 8000eb0:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a23      	ldr	r2, [pc, #140]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000eb6:	f043 0304 	orr.w	r3, r3, #4
 8000eba:	6013      	str	r3, [r2, #0]
    AXIS2_GPIO_PORT->OTYPER  &= ~(1 << AXIS2_STEP_PIN);
 8000ebc:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	4a20      	ldr	r2, [pc, #128]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000ec2:	f023 0302 	bic.w	r3, r3, #2
 8000ec6:	6053      	str	r3, [r2, #4]
    AXIS2_GPIO_PORT->OSPEEDR |=  (3 << (AXIS2_STEP_PIN * 2));
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000ece:	f043 030c 	orr.w	r3, r3, #12
 8000ed2:	6093      	str	r3, [r2, #8]
    AXIS2_GPIO_PORT->PUPDR   &= ~(3 << (AXIS2_STEP_PIN * 2));
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000eda:	f023 030c 	bic.w	r3, r3, #12
 8000ede:	60d3      	str	r3, [r2, #12]

    AXIS2_GPIO_PORT->MODER   &= ~(3 << (AXIS2_DIR_PIN * 2));
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a17      	ldr	r2, [pc, #92]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000ee6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000eea:	6013      	str	r3, [r2, #0]
    AXIS2_GPIO_PORT->MODER   |=  (1 << (AXIS2_DIR_PIN * 2));
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ef6:	6013      	str	r3, [r2, #0]
    AXIS2_GPIO_PORT->OTYPER  &= ~(1 << AXIS2_DIR_PIN);
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	4a11      	ldr	r2, [pc, #68]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000efe:	f023 0308 	bic.w	r3, r3, #8
 8000f02:	6053      	str	r3, [r2, #4]
    AXIS2_GPIO_PORT->OSPEEDR |=  (3 << (AXIS2_DIR_PIN * 2));
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	4a0e      	ldr	r2, [pc, #56]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000f0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000f0e:	6093      	str	r3, [r2, #8]
    AXIS2_GPIO_PORT->PUPDR   &= ~(3 << (AXIS2_DIR_PIN * 2));
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	4a0b      	ldr	r2, [pc, #44]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000f16:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000f1a:	60d3      	str	r3, [r2, #12]

    AXIS2_GPIO_PORT->MODER   &= ~(3 << (AXIS2_LIMIT_PIN * 2));
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a08      	ldr	r2, [pc, #32]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000f22:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000f26:	6013      	str	r3, [r2, #0]
    AXIS2_GPIO_PORT->PUPDR   &= ~(3 << (AXIS2_LIMIT_PIN * 2));
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <init_axis2_gpio+0xb0>)
 8000f2e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000
 8000f44:	48000c00 	.word	0x48000c00

08000f48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f48:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f4c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	@ (8000f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <LoopForever+0xe>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	@ (8000f94 <LoopForever+0x16>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f76:	f000 f811 	bl	8000f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f7a:	f7ff f93b 	bl	80001f4 <main>

08000f7e <LoopForever>:

LoopForever:
  b LoopForever
 8000f7e:	e7fe      	b.n	8000f7e <LoopForever>
  ldr   r0, =_estack
 8000f80:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000f8c:	080010f4 	.word	0x080010f4
  ldr r2, =_sbss
 8000f90:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000f94:	200001b8 	.word	0x200001b8

08000f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_2_IRQHandler>
	...

08000f9c <__libc_init_array>:
 8000f9c:	b570      	push	{r4, r5, r6, lr}
 8000f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8000fd4 <__libc_init_array+0x38>)
 8000fa0:	4c0d      	ldr	r4, [pc, #52]	@ (8000fd8 <__libc_init_array+0x3c>)
 8000fa2:	1b64      	subs	r4, r4, r5
 8000fa4:	10a4      	asrs	r4, r4, #2
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	42a6      	cmp	r6, r4
 8000faa:	d109      	bne.n	8000fc0 <__libc_init_array+0x24>
 8000fac:	4d0b      	ldr	r5, [pc, #44]	@ (8000fdc <__libc_init_array+0x40>)
 8000fae:	4c0c      	ldr	r4, [pc, #48]	@ (8000fe0 <__libc_init_array+0x44>)
 8000fb0:	f000 f818 	bl	8000fe4 <_init>
 8000fb4:	1b64      	subs	r4, r4, r5
 8000fb6:	10a4      	asrs	r4, r4, #2
 8000fb8:	2600      	movs	r6, #0
 8000fba:	42a6      	cmp	r6, r4
 8000fbc:	d105      	bne.n	8000fca <__libc_init_array+0x2e>
 8000fbe:	bd70      	pop	{r4, r5, r6, pc}
 8000fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fc4:	4798      	blx	r3
 8000fc6:	3601      	adds	r6, #1
 8000fc8:	e7ee      	b.n	8000fa8 <__libc_init_array+0xc>
 8000fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fce:	4798      	blx	r3
 8000fd0:	3601      	adds	r6, #1
 8000fd2:	e7f2      	b.n	8000fba <__libc_init_array+0x1e>
 8000fd4:	080010ec 	.word	0x080010ec
 8000fd8:	080010ec 	.word	0x080010ec
 8000fdc:	080010ec 	.word	0x080010ec
 8000fe0:	080010f0 	.word	0x080010f0

08000fe4 <_init>:
 8000fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe6:	bf00      	nop
 8000fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fea:	bc08      	pop	{r3}
 8000fec:	469e      	mov	lr, r3
 8000fee:	4770      	bx	lr

08000ff0 <_fini>:
 8000ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff2:	bf00      	nop
 8000ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ff6:	bc08      	pop	{r3}
 8000ff8:	469e      	mov	lr, r3
 8000ffa:	4770      	bx	lr
