
Stepper Control V9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ec8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800105c  0800105c  0000205c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800113c  0800113c  000031a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800113c  0800113c  000031a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800113c  0800113c  000031a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800113c  0800113c  0000213c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001140  08001140  00002140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a8  20000000  08001144  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000031a8  2**0
                  CONTENTS
 10 .bss          00000054  200001a8  200001a8  000031a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001fc  200001fc  000031a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000031a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000226e  00000000  00000000  000031d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000085e  00000000  00000000  00005446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00005ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000120  00000000  00000000  00005e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016156  00000000  00000000  00005f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002b9b  00000000  00000000  0001c0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076933  00000000  00000000  0001ec41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00095574  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000424  00000000  00000000  000955b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  000959dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001a8 	.word	0x200001a8
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001044 	.word	0x08001044

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001ac 	.word	0x200001ac
 80001d0:	08001044 	.word	0x08001044

080001d4 <command_parser_execute>:
/**
 * @brief Execute parsed packet
 * @param packet Pointer to received 8-byte buffer
 * @param port Pointer to the SerialPort that received it
 */
void command_parser_execute(uint8_t *packet, SerialPort *port) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
    uint8_t message_type = packet[1];
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	785b      	ldrb	r3, [r3, #1]
 80001e2:	73fb      	strb	r3, [r7, #15]

    switch (message_type) {
 80001e4:	7bfb      	ldrb	r3, [r7, #15]
 80001e6:	2b03      	cmp	r3, #3
 80001e8:	d02e      	beq.n	8000248 <command_parser_execute+0x74>
 80001ea:	2b03      	cmp	r3, #3
 80001ec:	dc2f      	bgt.n	800024e <command_parser_execute+0x7a>
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	d002      	beq.n	80001f8 <command_parser_execute+0x24>
 80001f2:	2b02      	cmp	r3, #2
 80001f4:	d025      	beq.n	8000242 <command_parser_execute+0x6e>
            Servo_Open();
            break;

        default:
//            SerialOutputString((uint8_t *)"Unknown command\r\n", port);
            break;
 80001f6:	e02a      	b.n	800024e <command_parser_execute+0x7a>
            int8_t vx = packet[2];
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	3302      	adds	r3, #2
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	73bb      	strb	r3, [r7, #14]
            int8_t vy = packet[3];
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	3303      	adds	r3, #3
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	737b      	strb	r3, [r7, #13]
            uint8_t velocity_index = packet[4];
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	791b      	ldrb	r3, [r3, #4]
 800020c:	733b      	strb	r3, [r7, #12]
            uint16_t z_target = (packet[6] << 8) | packet[5];
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	3306      	adds	r3, #6
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	021b      	lsls	r3, r3, #8
 8000216:	b21a      	sxth	r2, r3
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	3305      	adds	r3, #5
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	b21b      	sxth	r3, r3
 8000220:	4313      	orrs	r3, r2
 8000222:	b21b      	sxth	r3, r3
 8000224:	817b      	strh	r3, [r7, #10]
            plan_velocity(vx, vy, velocity_index);
 8000226:	7b3a      	ldrb	r2, [r7, #12]
 8000228:	f997 100d 	ldrsb.w	r1, [r7, #13]
 800022c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000230:	4618      	mov	r0, r3
 8000232:	f000 fc5b 	bl	8000aec <plan_velocity>
            set_z_target(z_target);
 8000236:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800023a:	4618      	mov	r0, r3
 800023c:	f000 fcd8 	bl	8000bf0 <set_z_target>
            break;
 8000240:	e006      	b.n	8000250 <command_parser_execute+0x7c>
            Servo_Close();
 8000242:	f000 fb03 	bl	800084c <Servo_Close>
            break;
 8000246:	e003      	b.n	8000250 <command_parser_execute+0x7c>
            Servo_Open();
 8000248:	f000 faf8 	bl	800083c <Servo_Open>
            break;
 800024c:	e000      	b.n	8000250 <command_parser_execute+0x7c>
            break;
 800024e:	bf00      	nop
    }
}
 8000250:	bf00      	nop
 8000252:	3710      	adds	r7, #16
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}

08000258 <main>:
#endif



int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0

//	SCB->CPACR |= (0xF << 20);  // Enable CP10 and CP11 (FPU)
	SerialInitialise(BAUD_115200, &USART1_PORT, 8, command_parser_execute);
 800025c:	4b0c      	ldr	r3, [pc, #48]	@ (8000290 <main+0x38>)
 800025e:	2208      	movs	r2, #8
 8000260:	490c      	ldr	r1, [pc, #48]	@ (8000294 <main+0x3c>)
 8000262:	2004      	movs	r0, #4
 8000264:	f000 f864 	bl	8000330 <SerialInitialise>
	SerialInitialise(BAUD_115200, &USART2_PORT, 8, command_parser_execute);
 8000268:	4b09      	ldr	r3, [pc, #36]	@ (8000290 <main+0x38>)
 800026a:	2208      	movs	r2, #8
 800026c:	490a      	ldr	r1, [pc, #40]	@ (8000298 <main+0x40>)
 800026e:	2004      	movs	r0, #4
 8000270:	f000 f85e 	bl	8000330 <SerialInitialise>

	enable_interrupt_USART1_PC11();
 8000274:	f000 f8fc 	bl	8000470 <enable_interrupt_USART1_PC11>
	enable_interrupt_USART2_PA3();
 8000278:	f000 f912 	bl	80004a0 <enable_interrupt_USART2_PA3>

	SerialOutputStringInterrupt((uint8_t *)"Steppers Initialised\r\n", &USART1_PORT);
 800027c:	4905      	ldr	r1, [pc, #20]	@ (8000294 <main+0x3c>)
 800027e:	4807      	ldr	r0, [pc, #28]	@ (800029c <main+0x44>)
 8000280:	f000 fa1a 	bl	80006b8 <SerialOutputStringInterrupt>

	Servo_Init();
 8000284:	f000 fa5e 	bl	8000744 <Servo_Init>

	stepper_control_init();
 8000288:	f000 fb68 	bl	800095c <stepper_control_init>
//	SerialOutputStringInterrupt((uint8_t *)"Steppers Initialised\r\n", &USART1_PORT);



//    /* Loop forever */
	for(;;){
 800028c:	bf00      	nop
 800028e:	e7fd      	b.n	800028c <main+0x34>
 8000290:	080001d5 	.word	0x080001d5
 8000294:	20000000 	.word	0x20000000
 8000298:	200000d4 	.word	0x200000d4
 800029c:	0800105c 	.word	0x0800105c

080002a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db0b      	blt.n	80002ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	f003 021f 	and.w	r2, r3, #31
 80002b8:	4907      	ldr	r1, [pc, #28]	@ (80002d8 <__NVIC_EnableIRQ+0x38>)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	095b      	lsrs	r3, r3, #5
 80002c0:	2001      	movs	r0, #1
 80002c2:	fa00 f202 	lsl.w	r2, r0, r2
 80002c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e100 	.word	0xe000e100

080002dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	6039      	str	r1, [r7, #0]
 80002e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	db0a      	blt.n	8000306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	490c      	ldr	r1, [pc, #48]	@ (8000328 <__NVIC_SetPriority+0x4c>)
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	0112      	lsls	r2, r2, #4
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	440b      	add	r3, r1
 8000300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000304:	e00a      	b.n	800031c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4908      	ldr	r1, [pc, #32]	@ (800032c <__NVIC_SetPriority+0x50>)
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3b04      	subs	r3, #4
 8000314:	0112      	lsls	r2, r2, #4
 8000316:	b2d2      	uxtb	r2, r2
 8000318:	440b      	add	r3, r1
 800031a:	761a      	strb	r2, [r3, #24]
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <SerialInitialise>:
    &(GPIOA->OSPEEDR), (3 << (2 * 2)) | (3 << (3 * 2)), (3 << (2 * 2)) | (3 << (3 * 2)),
    &(GPIOA->AFR[0]), (7 << (4 * 2)) | (7 << (4 * 3)), (0xF << (4 * 2)) | (0xF << (4 * 3))
};

void SerialInitialise(uint32_t baudrate, SerialPort *port, uint8_t packet_size,
                      void (*on_packet_received)(uint8_t *packet, SerialPort *port)) {
 8000330:	b480      	push	{r7}
 8000332:	b087      	sub	sp, #28
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	603b      	str	r3, [r7, #0]
 800033c:	4613      	mov	r3, r2
 800033e:	71fb      	strb	r3, [r7, #7]
    port->completion_function = on_packet_received;
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	683a      	ldr	r2, [r7, #0]
 8000344:	649a      	str	r2, [r3, #72]	@ 0x48
    port->expected_packet_size = packet_size;
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	79fa      	ldrb	r2, [r7, #7]
 800034a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    port->TXbusy = 0;
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	2200      	movs	r2, #0
 8000352:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    // Enable required peripheral clocks
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000356:	4b45      	ldr	r3, [pc, #276]	@ (800046c <SerialInitialise+0x13c>)
 8000358:	69db      	ldr	r3, [r3, #28]
 800035a:	4a44      	ldr	r2, [pc, #272]	@ (800046c <SerialInitialise+0x13c>)
 800035c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000360:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000362:	4b42      	ldr	r3, [pc, #264]	@ (800046c <SerialInitialise+0x13c>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	4a41      	ldr	r2, [pc, #260]	@ (800046c <SerialInitialise+0x13c>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6193      	str	r3, [r2, #24]

    switch (port->SerialPortGPIO) {
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	6a1b      	ldr	r3, [r3, #32]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d002      	beq.n	800037c <SerialInitialise+0x4c>
 8000376:	2b02      	cmp	r3, #2
 8000378:	d007      	beq.n	800038a <SerialInitialise+0x5a>
 800037a:	e00d      	b.n	8000398 <SerialInitialise+0x68>
        case SERIAL_GPIO_A: RCC->AHBENR |= RCC_AHBENR_GPIOAEN; break;
 800037c:	4b3b      	ldr	r3, [pc, #236]	@ (800046c <SerialInitialise+0x13c>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4a3a      	ldr	r2, [pc, #232]	@ (800046c <SerialInitialise+0x13c>)
 8000382:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000386:	6153      	str	r3, [r2, #20]
 8000388:	e006      	b.n	8000398 <SerialInitialise+0x68>
        case SERIAL_GPIO_C: RCC->AHBENR |= RCC_AHBENR_GPIOCEN; break;
 800038a:	4b38      	ldr	r3, [pc, #224]	@ (800046c <SerialInitialise+0x13c>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a37      	ldr	r2, [pc, #220]	@ (800046c <SerialInitialise+0x13c>)
 8000390:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	bf00      	nop
    }

    // Configure GPIO for alternate function
    *(port->SerialPinModeRegister) = (*(port->SerialPinModeRegister) & ~port->SerialPinModeMask) | port->SerialPinModeValue;
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003a2:	43db      	mvns	r3, r3
 80003a4:	ea02 0103 	and.w	r1, r2, r3
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003b0:	430a      	orrs	r2, r1
 80003b2:	601a      	str	r2, [r3, #0]
    *(port->SerialPinSpeedRegister) = (*(port->SerialPinSpeedRegister) & ~port->SerialPinSpeedMask) | port->SerialPinSpeedValue;
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003be:	43db      	mvns	r3, r3
 80003c0:	ea02 0103 	and.w	r1, r2, r3
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003cc:	430a      	orrs	r2, r1
 80003ce:	601a      	str	r2, [r3, #0]
    *(port->SerialPinAlternateRegister) = (*(port->SerialPinAlternateRegister) & ~port->SerialPinAlternateMask) | port->SerialPinAlternateValue;
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003da:	43db      	mvns	r3, r3
 80003dc:	ea02 0103 	and.w	r1, r2, r3
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003e8:	430a      	orrs	r2, r1
 80003ea:	601a      	str	r2, [r3, #0]

    // Enable USART peripheral
    *(port->TimerEnableRegister) |= port->TimerEnableMask;
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	69d9      	ldr	r1, [r3, #28]
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	430a      	orrs	r2, r1
 80003fc:	601a      	str	r2, [r3, #0]

    // Set baud rate (assumes 8 MHz clock)
    uint16_t *baud = (uint16_t *)port->BaudRate;
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	617b      	str	r3, [r7, #20]
    switch (baudrate) {
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	2b04      	cmp	r3, #4
 8000408:	d822      	bhi.n	8000450 <SerialInitialise+0x120>
 800040a:	a201      	add	r2, pc, #4	@ (adr r2, 8000410 <SerialInitialise+0xe0>)
 800040c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000410:	08000425 	.word	0x08000425
 8000414:	0800042f 	.word	0x0800042f
 8000418:	08000439 	.word	0x08000439
 800041c:	08000441 	.word	0x08000441
 8000420:	08000449 	.word	0x08000449
        case BAUD_9600: *baud = 0x341; break;
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	f240 3241 	movw	r2, #833	@ 0x341
 800042a:	801a      	strh	r2, [r3, #0]
 800042c:	e010      	b.n	8000450 <SerialInitialise+0x120>
        case BAUD_19200: *baud = 0x1A1; break;
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000434:	801a      	strh	r2, [r3, #0]
 8000436:	e00b      	b.n	8000450 <SerialInitialise+0x120>
        case BAUD_38400: *baud = 0xD1; break;
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	22d1      	movs	r2, #209	@ 0xd1
 800043c:	801a      	strh	r2, [r3, #0]
 800043e:	e007      	b.n	8000450 <SerialInitialise+0x120>
        case BAUD_57600: *baud = 0x8B; break;
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	228b      	movs	r2, #139	@ 0x8b
 8000444:	801a      	strh	r2, [r3, #0]
 8000446:	e003      	b.n	8000450 <SerialInitialise+0x120>
        case BAUD_115200: *baud = 0x46; break;
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	2246      	movs	r2, #70	@ 0x46
 800044c:	801a      	strh	r2, [r3, #0]
 800044e:	bf00      	nop
    }

    *(port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;  // Enable TX, RX, USART
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f042 020d 	orr.w	r2, r2, #13
 800045e:	601a      	str	r2, [r3, #0]
}
 8000460:	bf00      	nop
 8000462:	371c      	adds	r7, #28
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000

08000470 <enable_interrupt_USART1_PC11>:

void enable_interrupt_USART1_PC11() {
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
}
 8000476:	bf00      	nop
    __disable_irq();
    NVIC_SetPriority(USART1_IRQn, 5);
 8000478:	2105      	movs	r1, #5
 800047a:	2025      	movs	r0, #37	@ 0x25
 800047c:	f7ff ff2e 	bl	80002dc <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART1_IRQn);
 8000480:	2025      	movs	r0, #37	@ 0x25
 8000482:	f7ff ff0d 	bl	80002a0 <__NVIC_EnableIRQ>
    USART1->CR1 |= USART_CR1_RXNEIE;  // Enable RX interrupt
 8000486:	4b05      	ldr	r3, [pc, #20]	@ (800049c <enable_interrupt_USART1_PC11+0x2c>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a04      	ldr	r2, [pc, #16]	@ (800049c <enable_interrupt_USART1_PC11+0x2c>)
 800048c:	f043 0320 	orr.w	r3, r3, #32
 8000490:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000492:	b662      	cpsie	i
}
 8000494:	bf00      	nop
    __enable_irq();
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40013800 	.word	0x40013800

080004a0 <enable_interrupt_USART2_PA3>:

void enable_interrupt_USART2_PA3() {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80004a4:	b672      	cpsid	i
}
 80004a6:	bf00      	nop
    __disable_irq();
    NVIC_SetPriority(USART2_IRQn, 4);
 80004a8:	2104      	movs	r1, #4
 80004aa:	2026      	movs	r0, #38	@ 0x26
 80004ac:	f7ff ff16 	bl	80002dc <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART2_IRQn);
 80004b0:	2026      	movs	r0, #38	@ 0x26
 80004b2:	f7ff fef5 	bl	80002a0 <__NVIC_EnableIRQ>
    USART2->CR1 |= USART_CR1_RXNEIE;
 80004b6:	4b05      	ldr	r3, [pc, #20]	@ (80004cc <enable_interrupt_USART2_PA3+0x2c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a04      	ldr	r2, [pc, #16]	@ (80004cc <enable_interrupt_USART2_PA3+0x2c>)
 80004bc:	f043 0320 	orr.w	r3, r3, #32
 80004c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004c2:	b662      	cpsie	i
}
 80004c4:	bf00      	nop
    __enable_irq();
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40004400 	.word	0x40004400

080004d0 <USART1_EXTI25_IRQHandler>:

// Interrupt handler for USART1
void USART1_EXTI25_IRQHandler(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
    if (USART1->ISR & USART_ISR_RXNE) {
 80004d6:	4b38      	ldr	r3, [pc, #224]	@ (80005b8 <USART1_EXTI25_IRQHandler+0xe8>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 0320 	and.w	r3, r3, #32
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d031      	beq.n	8000546 <USART1_EXTI25_IRQHandler+0x76>
        char c = USART1->RDR;
 80004e2:	4b35      	ldr	r3, [pc, #212]	@ (80005b8 <USART1_EXTI25_IRQHandler+0xe8>)
 80004e4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	71fb      	strb	r3, [r7, #7]
        if (USART1_PORT.RXIndex == 0 && c != 0xAA) return;  // Wait for start byte
 80004ea:	4b34      	ldr	r3, [pc, #208]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 80004ec:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d102      	bne.n	80004fc <USART1_EXTI25_IRQHandler+0x2c>
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2baa      	cmp	r3, #170	@ 0xaa
 80004fa:	d159      	bne.n	80005b0 <USART1_EXTI25_IRQHandler+0xe0>
        USART1_PORT.RXBuffer[USART1_PORT.RXIndex++] = c;
 80004fc:	4b2f      	ldr	r3, [pc, #188]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 80004fe:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8000502:	b2db      	uxtb	r3, r3
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	b2d1      	uxtb	r1, r2
 8000508:	4a2c      	ldr	r2, [pc, #176]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 800050a:	f882 108d 	strb.w	r1, [r2, #141]	@ 0x8d
 800050e:	461a      	mov	r2, r3
 8000510:	4b2a      	ldr	r3, [pc, #168]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 8000512:	4413      	add	r3, r2
 8000514:	79fa      	ldrb	r2, [r7, #7]
 8000516:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (USART1_PORT.RXIndex >= USART1_PORT.expected_packet_size) {
 800051a:	4b28      	ldr	r3, [pc, #160]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 800051c:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b26      	ldr	r3, [pc, #152]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 8000524:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8000528:	429a      	cmp	r2, r3
 800052a:	d30c      	bcc.n	8000546 <USART1_EXTI25_IRQHandler+0x76>
            USART1_PORT.RXIndex = 0;
 800052c:	4b23      	ldr	r3, [pc, #140]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 800052e:	2200      	movs	r2, #0
 8000530:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
            if (USART1_PORT.completion_function) {
 8000534:	4b21      	ldr	r3, [pc, #132]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 8000536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000538:	2b00      	cmp	r3, #0
 800053a:	d004      	beq.n	8000546 <USART1_EXTI25_IRQHandler+0x76>
                USART1_PORT.completion_function((uint8_t *)USART1_PORT.RXBuffer, &USART1_PORT);
 800053c:	4b1f      	ldr	r3, [pc, #124]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 800053e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000540:	491e      	ldr	r1, [pc, #120]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 8000542:	481f      	ldr	r0, [pc, #124]	@ (80005c0 <USART1_EXTI25_IRQHandler+0xf0>)
 8000544:	4798      	blx	r3
            }
        }
    }

    if (USART1->ISR & USART_ISR_TXE) {
 8000546:	4b1c      	ldr	r3, [pc, #112]	@ (80005b8 <USART1_EXTI25_IRQHandler+0xe8>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800054e:	2b00      	cmp	r3, #0
 8000550:	d02f      	beq.n	80005b2 <USART1_EXTI25_IRQHandler+0xe2>
        if (USART1_PORT.TXIndex < USART1_PORT.TXLength) {
 8000552:	4b1a      	ldr	r3, [pc, #104]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 8000554:	f893 30ce 	ldrb.w	r3, [r3, #206]	@ 0xce
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b18      	ldr	r3, [pc, #96]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 800055c:	f893 30cf 	ldrb.w	r3, [r3, #207]	@ 0xcf
 8000560:	b2db      	uxtb	r3, r3
 8000562:	429a      	cmp	r2, r3
 8000564:	d211      	bcs.n	800058a <USART1_EXTI25_IRQHandler+0xba>
            USART1->TDR = USART1_PORT.TXBuffer[USART1_PORT.TXIndex++];
 8000566:	4b15      	ldr	r3, [pc, #84]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 8000568:	f893 30ce 	ldrb.w	r3, [r3, #206]	@ 0xce
 800056c:	b2db      	uxtb	r3, r3
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	b2d1      	uxtb	r1, r2
 8000572:	4a12      	ldr	r2, [pc, #72]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 8000574:	f882 10ce 	strb.w	r1, [r2, #206]	@ 0xce
 8000578:	461a      	mov	r2, r3
 800057a:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 800057c:	4413      	add	r3, r2
 800057e:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8000582:	b2da      	uxtb	r2, r3
 8000584:	4b0c      	ldr	r3, [pc, #48]	@ (80005b8 <USART1_EXTI25_IRQHandler+0xe8>)
 8000586:	851a      	strh	r2, [r3, #40]	@ 0x28
 8000588:	e013      	b.n	80005b2 <USART1_EXTI25_IRQHandler+0xe2>
        } else {
            USART1->CR1 &= ~USART_CR1_TXEIE;
 800058a:	4b0b      	ldr	r3, [pc, #44]	@ (80005b8 <USART1_EXTI25_IRQHandler+0xe8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <USART1_EXTI25_IRQHandler+0xe8>)
 8000590:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000594:	6013      	str	r3, [r2, #0]
            USART1_PORT.TXIndex = 0;
 8000596:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 8000598:	2200      	movs	r2, #0
 800059a:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
            USART1_PORT.TXLength = 0;
 800059e:	4b07      	ldr	r3, [pc, #28]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf
            USART1_PORT.TXbusy = 0;
 80005a6:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <USART1_EXTI25_IRQHandler+0xec>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 80005ae:	e000      	b.n	80005b2 <USART1_EXTI25_IRQHandler+0xe2>
        if (USART1_PORT.RXIndex == 0 && c != 0xAA) return;  // Wait for start byte
 80005b0:	bf00      	nop
        }
    }
}
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40013800 	.word	0x40013800
 80005bc:	20000000 	.word	0x20000000
 80005c0:	2000004d 	.word	0x2000004d

080005c4 <USART2_EXTI26_IRQHandler>:

// Interrupt handler for USART2
void USART2_EXTI26_IRQHandler(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
    if (USART2->ISR & USART_ISR_RXNE) {
 80005ca:	4b38      	ldr	r3, [pc, #224]	@ (80006ac <USART2_EXTI26_IRQHandler+0xe8>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f003 0320 	and.w	r3, r3, #32
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d031      	beq.n	800063a <USART2_EXTI26_IRQHandler+0x76>
        char c = USART2->RDR;
 80005d6:	4b35      	ldr	r3, [pc, #212]	@ (80006ac <USART2_EXTI26_IRQHandler+0xe8>)
 80005d8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80005da:	b29b      	uxth	r3, r3
 80005dc:	71fb      	strb	r3, [r7, #7]
        if (USART2_PORT.RXIndex == 0 && c != 0xAA) return;
 80005de:	4b34      	ldr	r3, [pc, #208]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 80005e0:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d102      	bne.n	80005f0 <USART2_EXTI26_IRQHandler+0x2c>
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2baa      	cmp	r3, #170	@ 0xaa
 80005ee:	d159      	bne.n	80006a4 <USART2_EXTI26_IRQHandler+0xe0>
        USART2_PORT.RXBuffer[USART2_PORT.RXIndex++] = c;
 80005f0:	4b2f      	ldr	r3, [pc, #188]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 80005f2:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	1c5a      	adds	r2, r3, #1
 80005fa:	b2d1      	uxtb	r1, r2
 80005fc:	4a2c      	ldr	r2, [pc, #176]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 80005fe:	f882 108d 	strb.w	r1, [r2, #141]	@ 0x8d
 8000602:	461a      	mov	r2, r3
 8000604:	4b2a      	ldr	r3, [pc, #168]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 8000606:	4413      	add	r3, r2
 8000608:	79fa      	ldrb	r2, [r7, #7]
 800060a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (USART2_PORT.RXIndex >= USART2_PORT.expected_packet_size) {
 800060e:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 8000610:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b26      	ldr	r3, [pc, #152]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 8000618:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800061c:	429a      	cmp	r2, r3
 800061e:	d30c      	bcc.n	800063a <USART2_EXTI26_IRQHandler+0x76>
            USART2_PORT.RXIndex = 0;
 8000620:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 8000622:	2200      	movs	r2, #0
 8000624:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
            if (USART2_PORT.completion_function) {
 8000628:	4b21      	ldr	r3, [pc, #132]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 800062a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800062c:	2b00      	cmp	r3, #0
 800062e:	d004      	beq.n	800063a <USART2_EXTI26_IRQHandler+0x76>
                USART2_PORT.completion_function((uint8_t *)USART2_PORT.RXBuffer, &USART2_PORT);
 8000630:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 8000632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000634:	491e      	ldr	r1, [pc, #120]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 8000636:	481f      	ldr	r0, [pc, #124]	@ (80006b4 <USART2_EXTI26_IRQHandler+0xf0>)
 8000638:	4798      	blx	r3
            }
        }
    }

    if (USART2->ISR & USART_ISR_TXE) {
 800063a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <USART2_EXTI26_IRQHandler+0xe8>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000642:	2b00      	cmp	r3, #0
 8000644:	d02f      	beq.n	80006a6 <USART2_EXTI26_IRQHandler+0xe2>
        if (USART2_PORT.TXIndex < USART2_PORT.TXLength) {
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 8000648:	f893 30ce 	ldrb.w	r3, [r3, #206]	@ 0xce
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 8000650:	f893 30cf 	ldrb.w	r3, [r3, #207]	@ 0xcf
 8000654:	b2db      	uxtb	r3, r3
 8000656:	429a      	cmp	r2, r3
 8000658:	d211      	bcs.n	800067e <USART2_EXTI26_IRQHandler+0xba>
            USART2->TDR = USART2_PORT.TXBuffer[USART2_PORT.TXIndex++];
 800065a:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 800065c:	f893 30ce 	ldrb.w	r3, [r3, #206]	@ 0xce
 8000660:	b2db      	uxtb	r3, r3
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	b2d1      	uxtb	r1, r2
 8000666:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 8000668:	f882 10ce 	strb.w	r1, [r2, #206]	@ 0xce
 800066c:	461a      	mov	r2, r3
 800066e:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 8000670:	4413      	add	r3, r2
 8000672:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <USART2_EXTI26_IRQHandler+0xe8>)
 800067a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800067c:	e013      	b.n	80006a6 <USART2_EXTI26_IRQHandler+0xe2>
        } else {
            USART2->CR1 &= ~USART_CR1_TXEIE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <USART2_EXTI26_IRQHandler+0xe8>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a0a      	ldr	r2, [pc, #40]	@ (80006ac <USART2_EXTI26_IRQHandler+0xe8>)
 8000684:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000688:	6013      	str	r3, [r2, #0]
            USART2_PORT.TXIndex = 0;
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
            USART2_PORT.TXLength = 0;
 8000692:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf
            USART2_PORT.TXbusy = 0;
 800069a:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <USART2_EXTI26_IRQHandler+0xec>)
 800069c:	2200      	movs	r2, #0
 800069e:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
 80006a2:	e000      	b.n	80006a6 <USART2_EXTI26_IRQHandler+0xe2>
        if (USART2_PORT.RXIndex == 0 && c != 0xAA) return;
 80006a4:	bf00      	nop
        }
    }
}
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40004400 	.word	0x40004400
 80006b0:	200000d4 	.word	0x200000d4
 80006b4:	20000121 	.word	0x20000121

080006b8 <SerialOutputStringInterrupt>:

// Sends a null-terminated string using interrupt-driven TX
void SerialOutputStringInterrupt(uint8_t *pt, SerialPort *port) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
    if (port->TXbusy) return;  // Drop if TX in progress
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d133      	bne.n	8000736 <SerialOutputStringInterrupt+0x7e>

    uint8_t i = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	73fb      	strb	r3, [r7, #15]
    while (pt[i] != '\0' && i < BUFFER_SIZE - 1) {
 80006d2:	e00c      	b.n	80006ee <SerialOutputStringInterrupt+0x36>
        port->TXBuffer[i] = pt[i];
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	441a      	add	r2, r3
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	7811      	ldrb	r1, [r2, #0]
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	4413      	add	r3, r2
 80006e2:	460a      	mov	r2, r1
 80006e4:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
        i++;
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	3301      	adds	r3, #1
 80006ec:	73fb      	strb	r3, [r7, #15]
    while (pt[i] != '\0' && i < BUFFER_SIZE - 1) {
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <SerialOutputStringInterrupt+0x48>
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80006fe:	d9e9      	bls.n	80006d4 <SerialOutputStringInterrupt+0x1c>
    }
    port->TXBuffer[i] = '\0';
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	683a      	ldr	r2, [r7, #0]
 8000704:	4413      	add	r3, r2
 8000706:	2200      	movs	r2, #0
 8000708:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    port->TXLength = i;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	7bfa      	ldrb	r2, [r7, #15]
 8000710:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf
    port->TXIndex = 0;
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	2200      	movs	r2, #0
 8000718:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
    port->TXbusy = 1;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2201      	movs	r2, #1
 8000720:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    *(port->ControlRegister1) |= USART_CR1_TXEIE;  // Enable TXE interrupt
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	e000      	b.n	8000738 <SerialOutputStringInterrupt+0x80>
    if (port->TXbusy) return;  // Drop if TX in progress
 8000736:	bf00      	nop
}
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <Servo_Init>:
#define SERVO_CLOSE_PULSE 1470  ///< in microseconds

/**
 * @brief Initialises TIM3 CH1 for PWM output to control a servo on PC6.
 */
void Servo_Init(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    // Enable GPIO and timer clocks
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000748:	4b2a      	ldr	r3, [pc, #168]	@ (80007f4 <Servo_Init+0xb0>)
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	4a29      	ldr	r2, [pc, #164]	@ (80007f4 <Servo_Init+0xb0>)
 800074e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000752:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000754:	4b27      	ldr	r3, [pc, #156]	@ (80007f4 <Servo_Init+0xb0>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	4a26      	ldr	r2, [pc, #152]	@ (80007f4 <Servo_Init+0xb0>)
 800075a:	f043 0302 	orr.w	r3, r3, #2
 800075e:	61d3      	str	r3, [r2, #28]

    // Set PC6 to Alternate Function mode
    SERVO_GPIO_PORT->MODER &= ~(3 << (SERVO_GPIO_PIN * 2));
 8000760:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <Servo_Init+0xb4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a24      	ldr	r2, [pc, #144]	@ (80007f8 <Servo_Init+0xb4>)
 8000766:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800076a:	6013      	str	r3, [r2, #0]
    SERVO_GPIO_PORT->MODER |=  (2 << (SERVO_GPIO_PIN * 2));
 800076c:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <Servo_Init+0xb4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a21      	ldr	r2, [pc, #132]	@ (80007f8 <Servo_Init+0xb4>)
 8000772:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000776:	6013      	str	r3, [r2, #0]

    // Select alternate function AF2 for TIM3_CH1
    SERVO_GPIO_PORT->AFR[0] &= ~(0xF << (SERVO_GPIO_PIN * 4));
 8000778:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <Servo_Init+0xb4>)
 800077a:	6a1b      	ldr	r3, [r3, #32]
 800077c:	4a1e      	ldr	r2, [pc, #120]	@ (80007f8 <Servo_Init+0xb4>)
 800077e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000782:	6213      	str	r3, [r2, #32]
    SERVO_GPIO_PORT->AFR[0] |=  (SERVO_GPIO_AF << (SERVO_GPIO_PIN * 4));
 8000784:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <Servo_Init+0xb4>)
 8000786:	6a1b      	ldr	r3, [r3, #32]
 8000788:	4a1b      	ldr	r2, [pc, #108]	@ (80007f8 <Servo_Init+0xb4>)
 800078a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800078e:	6213      	str	r3, [r2, #32]

    // Configure TIM3 for 50Hz PWM: 1us ticks, 20ms period
    SERVO_TIMER->PSC = 8 - 1;       // 8-1 = 1 MHz = 1us tick
 8000790:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <Servo_Init+0xb8>)
 8000792:	2207      	movs	r2, #7
 8000794:	629a      	str	r2, [r3, #40]	@ 0x28
    SERVO_TIMER->ARR = 20000 - 1;    // 20,000us = 20ms = 50Hz
 8000796:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <Servo_Init+0xb8>)
 8000798:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800079c:	62da      	str	r2, [r3, #44]	@ 0x2c

    // PWM Mode 1 on CH1, preload enable
    SERVO_TIMER->CCMR1 |= (6 << 4);  // OC1M = 110
 800079e:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <Servo_Init+0xb8>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	4a16      	ldr	r2, [pc, #88]	@ (80007fc <Servo_Init+0xb8>)
 80007a4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80007a8:	6193      	str	r3, [r2, #24]
    SERVO_TIMER->CCMR1 |= (1 << 3);  // OC1PE = 1
 80007aa:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <Servo_Init+0xb8>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a13      	ldr	r2, [pc, #76]	@ (80007fc <Servo_Init+0xb8>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6193      	str	r3, [r2, #24]
    SERVO_TIMER->CCER  |= (1 << 0);  // Enable CH1 output
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <Servo_Init+0xb8>)
 80007b8:	6a1b      	ldr	r3, [r3, #32]
 80007ba:	4a10      	ldr	r2, [pc, #64]	@ (80007fc <Servo_Init+0xb8>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6213      	str	r3, [r2, #32]
    SERVO_TIMER->CR1   |= (1 << 7);  // ARPE = 1
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <Servo_Init+0xb8>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a0d      	ldr	r2, [pc, #52]	@ (80007fc <Servo_Init+0xb8>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007cc:	6013      	str	r3, [r2, #0]
    SERVO_TIMER->EGR   |= (1 << 0);  // UG = update registers
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <Servo_Init+0xb8>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a0a      	ldr	r2, [pc, #40]	@ (80007fc <Servo_Init+0xb8>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6153      	str	r3, [r2, #20]
    SERVO_TIMER->CR1   |= (1 << 0);  // CEN = enable counter
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <Servo_Init+0xb8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a07      	ldr	r2, [pc, #28]	@ (80007fc <Servo_Init+0xb8>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6013      	str	r3, [r2, #0]

    // Start with neutral position
    Servo_SetPulse(1500);
 80007e6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80007ea:	f000 f809 	bl	8000800 <Servo_SetPulse>
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000
 80007f8:	48000800 	.word	0x48000800
 80007fc:	40000400 	.word	0x40000400

08000800 <Servo_SetPulse>:

/**
 * @brief Sets the servo pulse width in microseconds (1000-2000us typical).
 * @param pulse_us Desired pulse width
 */
void Servo_SetPulse(uint16_t pulse_us) {
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	80fb      	strh	r3, [r7, #6]
    if (pulse_us < 1000) pulse_us = 1000;
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000810:	d202      	bcs.n	8000818 <Servo_SetPulse+0x18>
 8000812:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000816:	80fb      	strh	r3, [r7, #6]
    if (pulse_us > 2000) pulse_us = 2000;
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800081e:	d902      	bls.n	8000826 <Servo_SetPulse+0x26>
 8000820:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000824:	80fb      	strh	r3, [r7, #6]
    SERVO_TIMER->CCR1 = pulse_us;
 8000826:	4a04      	ldr	r2, [pc, #16]	@ (8000838 <Servo_SetPulse+0x38>)
 8000828:	88fb      	ldrh	r3, [r7, #6]
 800082a:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	40000400 	.word	0x40000400

0800083c <Servo_Open>:

/**
 * @brief Sends the 'open' position pulse to the servo.
 */
void Servo_Open(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
    Servo_SetPulse(SERVO_OPEN_PULSE);
 8000840:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8000844:	f7ff ffdc 	bl	8000800 <Servo_SetPulse>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <Servo_Close>:

/**
 * @brief Sends the 'close' position pulse to the servo.
 */
void Servo_Close(void) {
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
    Servo_SetPulse(SERVO_CLOSE_PULSE);
 8000850:	f240 50be 	movw	r0, #1470	@ 0x5be
 8000854:	f7ff ffd4 	bl	8000800 <Servo_SetPulse>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <__NVIC_EnableIRQ>:
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	2b00      	cmp	r3, #0
 800086c:	db0b      	blt.n	8000886 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 021f 	and.w	r2, r3, #31
 8000874:	4907      	ldr	r1, [pc, #28]	@ (8000894 <__NVIC_EnableIRQ+0x38>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	095b      	lsrs	r3, r3, #5
 800087c:	2001      	movs	r0, #1
 800087e:	fa00 f202 	lsl.w	r2, r0, r2
 8000882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000e100 	.word	0xe000e100

08000898 <__NVIC_SetPriority>:
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	@ (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	@ (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <stepper_timer_init>:
// === Internal Helpers ===
static inline void step_motor_A(void);
static inline void step_motor_B(void);

// === Stepper Timer Setup ===
void stepper_timer_init(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80008f0:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <stepper_timer_init+0x6c>)
 80008f2:	69db      	ldr	r3, [r3, #28]
 80008f4:	4a18      	ldr	r2, [pc, #96]	@ (8000958 <stepper_timer_init+0x6c>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	61d3      	str	r3, [r2, #28]
    TIM2->PSC = 7;             // Prescaler for 1 MHz (assuming 8 MHz input clock)
 80008fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000900:	2207      	movs	r2, #7
 8000902:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 50;            // Auto-reload for interrupt rate
 8000904:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000908:	2232      	movs	r2, #50	@ 0x32
 800090a:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= TIM_DIER_UIE;
 800090c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	60d3      	str	r3, [r2, #12]
    TIM2->EGR |= TIM_EGR_UG;
 800091c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	6153      	str	r3, [r2, #20]
    TIM2->CR1 |= TIM_CR1_CEN;
 800092c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop

    __disable_irq();
    NVIC_SetPriority(TIM2_IRQn, 0);
 8000940:	2100      	movs	r1, #0
 8000942:	201c      	movs	r0, #28
 8000944:	f7ff ffa8 	bl	8000898 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8000948:	201c      	movs	r0, #28
 800094a:	f7ff ff87 	bl	800085c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800094e:	b662      	cpsie	i
}
 8000950:	bf00      	nop
    __enable_irq();
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <stepper_control_init>:

void stepper_control_init(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	@ 0x38
 8000960:	af00      	add	r7, sp, #0
    init_axis0_gpio();
 8000962:	f000 fa0b 	bl	8000d7c <init_axis0_gpio>
    init_axis1_gpio();
 8000966:	f000 fa63 	bl	8000e30 <init_axis1_gpio>
    init_axis2_gpio();
 800096a:	f000 fabb 	bl	8000ee4 <init_axis2_gpio>
    stepper_timer_init();
 800096e:	f7ff ffbd 	bl	80008ec <stepper_timer_init>

    corexy = (CoreXYMotion){0};
 8000972:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <stepper_control_init+0x40>)
 8000974:	4618      	mov	r0, r3
 8000976:	2328      	movs	r3, #40	@ 0x28
 8000978:	461a      	mov	r2, r3
 800097a:	2100      	movs	r1, #0
 800097c:	f000 fb35 	bl	8000fea <memset>
    axis2 = (ZAxis){.step_delay_ticks = 6};
 8000980:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <stepper_control_init+0x44>)
 8000982:	461a      	mov	r2, r3
 8000984:	2300      	movs	r3, #0
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	6053      	str	r3, [r2, #4]
 800098a:	6093      	str	r3, [r2, #8]
 800098c:	60d3      	str	r3, [r2, #12]
 800098e:	4b04      	ldr	r3, [pc, #16]	@ (80009a0 <stepper_control_init+0x44>)
 8000990:	2206      	movs	r2, #6
 8000992:	609a      	str	r2, [r3, #8]
}
 8000994:	bf00      	nop
 8000996:	3738      	adds	r7, #56	@ 0x38
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200001c4 	.word	0x200001c4
 80009a0:	200001ec 	.word	0x200001ec

080009a4 <TIM2_IRQHandler>:

// === Timer Interrupt Handler ===
void TIM2_IRQHandler(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
    TIM2->SR &= ~TIM_SR_UIF;
 80009a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009ac:	691b      	ldr	r3, [r3, #16]
 80009ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009b2:	f023 0301 	bic.w	r3, r3, #1
 80009b6:	6113      	str	r3, [r2, #16]
    corexy.tick_counter--;
 80009b8:	4b48      	ldr	r3, [pc, #288]	@ (8000adc <TIM2_IRQHandler+0x138>)
 80009ba:	7e1b      	ldrb	r3, [r3, #24]
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	3b01      	subs	r3, #1
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	b25a      	sxtb	r2, r3
 80009c6:	4b45      	ldr	r3, [pc, #276]	@ (8000adc <TIM2_IRQHandler+0x138>)
 80009c8:	761a      	strb	r2, [r3, #24]

    if (corexy.tick_counter <= 0) {
 80009ca:	4b44      	ldr	r3, [pc, #272]	@ (8000adc <TIM2_IRQHandler+0x138>)
 80009cc:	7e1b      	ldrb	r3, [r3, #24]
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	dc3e      	bgt.n	8000a52 <TIM2_IRQHandler+0xae>
        if (corexy.a_steps >= corexy.b_steps) {
 80009d4:	4b41      	ldr	r3, [pc, #260]	@ (8000adc <TIM2_IRQHandler+0x138>)
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	4b40      	ldr	r3, [pc, #256]	@ (8000adc <TIM2_IRQHandler+0x138>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	db18      	blt.n	8000a12 <TIM2_IRQHandler+0x6e>
            step_motor_A();
 80009e0:	f000 f94a 	bl	8000c78 <step_motor_A>
            corexy.a_error += corexy.b_steps;
 80009e4:	4b3d      	ldr	r3, [pc, #244]	@ (8000adc <TIM2_IRQHandler+0x138>)
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	4b3c      	ldr	r3, [pc, #240]	@ (8000adc <TIM2_IRQHandler+0x138>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4413      	add	r3, r2
 80009ee:	4a3b      	ldr	r2, [pc, #236]	@ (8000adc <TIM2_IRQHandler+0x138>)
 80009f0:	6013      	str	r3, [r2, #0]
            if (corexy.a_error >= corexy.a_steps) {
 80009f2:	4b3a      	ldr	r3, [pc, #232]	@ (8000adc <TIM2_IRQHandler+0x138>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	4b39      	ldr	r3, [pc, #228]	@ (8000adc <TIM2_IRQHandler+0x138>)
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	db21      	blt.n	8000a42 <TIM2_IRQHandler+0x9e>
                step_motor_B();
 80009fe:	f000 f97d 	bl	8000cfc <step_motor_B>
                corexy.a_error -= corexy.a_steps;
 8000a02:	4b36      	ldr	r3, [pc, #216]	@ (8000adc <TIM2_IRQHandler+0x138>)
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	4a35      	ldr	r2, [pc, #212]	@ (8000adc <TIM2_IRQHandler+0x138>)
 8000a08:	6812      	ldr	r2, [r2, #0]
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	4a33      	ldr	r2, [pc, #204]	@ (8000adc <TIM2_IRQHandler+0x138>)
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	e017      	b.n	8000a42 <TIM2_IRQHandler+0x9e>
            }
        } else {
            step_motor_B();
 8000a12:	f000 f973 	bl	8000cfc <step_motor_B>
            corexy.b_error += corexy.a_steps;
 8000a16:	4b31      	ldr	r3, [pc, #196]	@ (8000adc <TIM2_IRQHandler+0x138>)
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	4b30      	ldr	r3, [pc, #192]	@ (8000adc <TIM2_IRQHandler+0x138>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a2e      	ldr	r2, [pc, #184]	@ (8000adc <TIM2_IRQHandler+0x138>)
 8000a22:	6053      	str	r3, [r2, #4]
            if (corexy.b_error >= corexy.b_steps) {
 8000a24:	4b2d      	ldr	r3, [pc, #180]	@ (8000adc <TIM2_IRQHandler+0x138>)
 8000a26:	685a      	ldr	r2, [r3, #4]
 8000a28:	4b2c      	ldr	r3, [pc, #176]	@ (8000adc <TIM2_IRQHandler+0x138>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	db08      	blt.n	8000a42 <TIM2_IRQHandler+0x9e>
                step_motor_A();
 8000a30:	f000 f922 	bl	8000c78 <step_motor_A>
                corexy.b_error -= corexy.a_steps;
 8000a34:	4b29      	ldr	r3, [pc, #164]	@ (8000adc <TIM2_IRQHandler+0x138>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	4a28      	ldr	r2, [pc, #160]	@ (8000adc <TIM2_IRQHandler+0x138>)
 8000a3a:	6852      	ldr	r2, [r2, #4]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	4a27      	ldr	r2, [pc, #156]	@ (8000adc <TIM2_IRQHandler+0x138>)
 8000a40:	6053      	str	r3, [r2, #4]
            }
        }
        corexy.tick_counter = delay_table[corexy.index];
 8000a42:	4b26      	ldr	r3, [pc, #152]	@ (8000adc <TIM2_IRQHandler+0x138>)
 8000a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a46:	4a26      	ldr	r2, [pc, #152]	@ (8000ae0 <TIM2_IRQHandler+0x13c>)
 8000a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a4c:	b25a      	sxtb	r2, r3
 8000a4e:	4b23      	ldr	r3, [pc, #140]	@ (8000adc <TIM2_IRQHandler+0x138>)
 8000a50:	761a      	strb	r2, [r3, #24]
    }

    if (axis2.tick_counter > 0) axis2.tick_counter--;
 8000a52:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <TIM2_IRQHandler+0x140>)
 8000a54:	7b5b      	ldrb	r3, [r3, #13]
 8000a56:	b25b      	sxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	dd08      	ble.n	8000a6e <TIM2_IRQHandler+0xca>
 8000a5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <TIM2_IRQHandler+0x140>)
 8000a5e:	7b5b      	ldrb	r3, [r3, #13]
 8000a60:	b25b      	sxtb	r3, r3
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	3b01      	subs	r3, #1
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	b25a      	sxtb	r2, r3
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <TIM2_IRQHandler+0x140>)
 8000a6c:	735a      	strb	r2, [r3, #13]

    if (axis2.tick_counter == 0 && axis2.enabled) {
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae4 <TIM2_IRQHandler+0x140>)
 8000a70:	7b5b      	ldrb	r3, [r3, #13]
 8000a72:	b25b      	sxtb	r3, r3
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d12f      	bne.n	8000ad8 <TIM2_IRQHandler+0x134>
 8000a78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <TIM2_IRQHandler+0x140>)
 8000a7a:	7b9b      	ldrb	r3, [r3, #14]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d02a      	beq.n	8000ad8 <TIM2_IRQHandler+0x134>
        if (axis2.step_count_remaining == 0) {
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <TIM2_IRQHandler+0x140>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d103      	bne.n	8000a92 <TIM2_IRQHandler+0xee>
            axis2.enabled = 0;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <TIM2_IRQHandler+0x140>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	739a      	strb	r2, [r3, #14]
            axis2.position_steps += axis2.direction;
            axis2.step_count_remaining--;
            axis2.tick_counter = axis2.step_delay_ticks;
        }
    }
}
 8000a90:	e022      	b.n	8000ad8 <TIM2_IRQHandler+0x134>
            AXIS2_GPIO_PORT->BSRR = (axis2.direction > 0) ? (1 << AXIS2_DIR_PIN)
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <TIM2_IRQHandler+0x140>)
 8000a94:	7b1b      	ldrb	r3, [r3, #12]
 8000a96:	b25b      	sxtb	r3, r3
                                                          : (1 << (AXIS2_DIR_PIN + 16));
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	dd01      	ble.n	8000aa0 <TIM2_IRQHandler+0xfc>
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	e001      	b.n	8000aa4 <TIM2_IRQHandler+0x100>
 8000aa0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
            AXIS2_GPIO_PORT->BSRR = (axis2.direction > 0) ? (1 << AXIS2_DIR_PIN)
 8000aa4:	4a10      	ldr	r2, [pc, #64]	@ (8000ae8 <TIM2_IRQHandler+0x144>)
 8000aa6:	6193      	str	r3, [r2, #24]
            AXIS2_GPIO_PORT->BSRR = (1 << AXIS2_STEP_PIN);
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <TIM2_IRQHandler+0x144>)
 8000aaa:	2202      	movs	r2, #2
 8000aac:	619a      	str	r2, [r3, #24]
            AXIS2_GPIO_PORT->BRR  = (1 << AXIS2_STEP_PIN);
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <TIM2_IRQHandler+0x144>)
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	629a      	str	r2, [r3, #40]	@ 0x28
            axis2.position_steps += axis2.direction;
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <TIM2_IRQHandler+0x140>)
 8000ab6:	7b1b      	ldrb	r3, [r3, #12]
 8000ab8:	b25a      	sxtb	r2, r3
 8000aba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <TIM2_IRQHandler+0x140>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <TIM2_IRQHandler+0x140>)
 8000ac2:	6013      	str	r3, [r2, #0]
            axis2.step_count_remaining--;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <TIM2_IRQHandler+0x140>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	4a06      	ldr	r2, [pc, #24]	@ (8000ae4 <TIM2_IRQHandler+0x140>)
 8000acc:	6053      	str	r3, [r2, #4]
            axis2.tick_counter = axis2.step_delay_ticks;
 8000ace:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <TIM2_IRQHandler+0x140>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	b25a      	sxtb	r2, r3
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <TIM2_IRQHandler+0x140>)
 8000ad6:	735a      	strb	r2, [r3, #13]
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200001c4 	.word	0x200001c4
 8000ae0:	08001074 	.word	0x08001074
 8000ae4:	200001ec 	.word	0x200001ec
 8000ae8:	48000c00 	.word	0x48000c00

08000aec <plan_velocity>:

// === Motion Planning ===
void plan_velocity(int8_t vx, int8_t vy, uint8_t index) {
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
 8000af6:	460b      	mov	r3, r1
 8000af8:	71bb      	strb	r3, [r7, #6]
 8000afa:	4613      	mov	r3, r2
 8000afc:	717b      	strb	r3, [r7, #5]
    if (vx == 0 && vy == 0) {
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d110      	bne.n	8000b28 <plan_velocity+0x3c>
 8000b06:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10c      	bne.n	8000b28 <plan_velocity+0x3c>
        corexy.a_steps = corexy.b_steps = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	4a35      	ldr	r2, [pc, #212]	@ (8000be8 <plan_velocity+0xfc>)
 8000b12:	60d3      	str	r3, [r2, #12]
 8000b14:	4a34      	ldr	r2, [pc, #208]	@ (8000be8 <plan_velocity+0xfc>)
 8000b16:	6093      	str	r3, [r2, #8]
        corexy.signA = corexy.signB = 0;
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4b33      	ldr	r3, [pc, #204]	@ (8000be8 <plan_velocity+0xfc>)
 8000b1c:	460a      	mov	r2, r1
 8000b1e:	745a      	strb	r2, [r3, #17]
 8000b20:	4b31      	ldr	r3, [pc, #196]	@ (8000be8 <plan_velocity+0xfc>)
 8000b22:	460a      	mov	r2, r1
 8000b24:	741a      	strb	r2, [r3, #16]
        return;
 8000b26:	e05a      	b.n	8000bde <plan_velocity+0xf2>
    }

    int vA = vx + vy;
 8000b28:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000b2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b30:	4413      	add	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
    int vB = vx - vy;
 8000b34:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000b38:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	60bb      	str	r3, [r7, #8]
    corexy.signA = (vA >= 0) ? 1 : -1;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db01      	blt.n	8000b4a <plan_velocity+0x5e>
 8000b46:	2201      	movs	r2, #1
 8000b48:	e001      	b.n	8000b4e <plan_velocity+0x62>
 8000b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4e:	4b26      	ldr	r3, [pc, #152]	@ (8000be8 <plan_velocity+0xfc>)
 8000b50:	741a      	strb	r2, [r3, #16]
    corexy.signB = (vB >= 0) ? 1 : -1;
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db01      	blt.n	8000b5c <plan_velocity+0x70>
 8000b58:	2201      	movs	r2, #1
 8000b5a:	e001      	b.n	8000b60 <plan_velocity+0x74>
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b60:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <plan_velocity+0xfc>)
 8000b62:	745a      	strb	r2, [r3, #17]
    corexy.a_steps = abs(vA);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	bfb8      	it	lt
 8000b6a:	425b      	neglt	r3, r3
 8000b6c:	4a1e      	ldr	r2, [pc, #120]	@ (8000be8 <plan_velocity+0xfc>)
 8000b6e:	6093      	str	r3, [r2, #8]
    corexy.b_steps = abs(vB);
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	bfb8      	it	lt
 8000b76:	425b      	neglt	r3, r3
 8000b78:	4a1b      	ldr	r2, [pc, #108]	@ (8000be8 <plan_velocity+0xfc>)
 8000b7a:	60d3      	str	r3, [r2, #12]
    corexy.steps_remaining = (corexy.a_steps > corexy.b_steps) ? corexy.a_steps : corexy.b_steps;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <plan_velocity+0xfc>)
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <plan_velocity+0xfc>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dd02      	ble.n	8000b8e <plan_velocity+0xa2>
 8000b88:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <plan_velocity+0xfc>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	e001      	b.n	8000b92 <plan_velocity+0xa6>
 8000b8e:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <plan_velocity+0xfc>)
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	4a15      	ldr	r2, [pc, #84]	@ (8000be8 <plan_velocity+0xfc>)
 8000b94:	6153      	str	r3, [r2, #20]
    corexy.a_error = corexy.b_error = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	4a13      	ldr	r2, [pc, #76]	@ (8000be8 <plan_velocity+0xfc>)
 8000b9a:	6053      	str	r3, [r2, #4]
 8000b9c:	4a12      	ldr	r2, [pc, #72]	@ (8000be8 <plan_velocity+0xfc>)
 8000b9e:	6013      	str	r3, [r2, #0]

    corexy.index = CLAMP(index, 0, 99);
 8000ba0:	797b      	ldrb	r3, [r7, #5]
 8000ba2:	2b63      	cmp	r3, #99	@ 0x63
 8000ba4:	bf28      	it	cs
 8000ba6:	2363      	movcs	r3, #99	@ 0x63
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <plan_velocity+0xfc>)
 8000bae:	625a      	str	r2, [r3, #36]	@ 0x24

    AXIS0_GPIO_PORT->BSRR = (corexy.signA > 0) ? (1 << AXIS0_DIR_PIN) : (1 << (AXIS0_DIR_PIN + 16));
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <plan_velocity+0xfc>)
 8000bb2:	7c1b      	ldrb	r3, [r3, #16]
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	dd02      	ble.n	8000bc0 <plan_velocity+0xd4>
 8000bba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bbe:	e001      	b.n	8000bc4 <plan_velocity+0xd8>
 8000bc0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000bc4:	4a09      	ldr	r2, [pc, #36]	@ (8000bec <plan_velocity+0x100>)
 8000bc6:	6193      	str	r3, [r2, #24]
    AXIS1_GPIO_PORT->BSRR = (corexy.signB > 0) ? (1 << AXIS1_DIR_PIN) : (1 << (AXIS1_DIR_PIN + 16));
 8000bc8:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <plan_velocity+0xfc>)
 8000bca:	7c5b      	ldrb	r3, [r3, #17]
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	dd01      	ble.n	8000bd6 <plan_velocity+0xea>
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	e001      	b.n	8000bda <plan_velocity+0xee>
 8000bd6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000bda:	4a04      	ldr	r2, [pc, #16]	@ (8000bec <plan_velocity+0x100>)
 8000bdc:	6193      	str	r3, [r2, #24]
}
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	200001c4 	.word	0x200001c4
 8000bec:	48000c00 	.word	0x48000c00

08000bf0 <set_z_target>:

// === Z-Axis Motion ===
void set_z_target(int16_t z_target) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
    if (!axis2.enabled && z_target >= 0) {
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <set_z_target+0x84>)
 8000bfc:	7b9b      	ldrb	r3, [r3, #14]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d130      	bne.n	8000c66 <set_z_target+0x76>
 8000c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db2c      	blt.n	8000c66 <set_z_target+0x76>
        z_target = CLAMP(z_target, Z_MIN, Z_MAX);
 8000c0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db08      	blt.n	8000c26 <set_z_target+0x36>
 8000c14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c18:	f642 4224 	movw	r2, #11300	@ 0x2c24
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	bfa8      	it	ge
 8000c20:	4613      	movge	r3, r2
 8000c22:	b21b      	sxth	r3, r3
 8000c24:	e000      	b.n	8000c28 <set_z_target+0x38>
 8000c26:	2300      	movs	r3, #0
 8000c28:	80fb      	strh	r3, [r7, #6]
        int delta = z_target - axis2.position_steps;
 8000c2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c2e:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <set_z_target+0x84>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	60fb      	str	r3, [r7, #12]
        if (delta != 0) {
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d014      	beq.n	8000c66 <set_z_target+0x76>
            axis2.direction = (delta > 0) ? 1 : -1;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	dd01      	ble.n	8000c46 <set_z_target+0x56>
 8000c42:	2201      	movs	r2, #1
 8000c44:	e001      	b.n	8000c4a <set_z_target+0x5a>
 8000c46:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <set_z_target+0x84>)
 8000c4c:	731a      	strb	r2, [r3, #12]
            axis2.step_count_remaining = abs(delta);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	bfb8      	it	lt
 8000c54:	425b      	neglt	r3, r3
 8000c56:	4a07      	ldr	r2, [pc, #28]	@ (8000c74 <set_z_target+0x84>)
 8000c58:	6053      	str	r3, [r2, #4]
            axis2.step_delay_ticks = 3;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <set_z_target+0x84>)
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	609a      	str	r2, [r3, #8]
            axis2.enabled = 1;
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <set_z_target+0x84>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	739a      	strb	r2, [r3, #14]
        }
    }
}
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	200001ec 	.word	0x200001ec

08000c78 <step_motor_A>:

// === Step Functions ===
static inline void step_motor_A(void) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
    if (corexy.signA == 0) return;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <step_motor_A+0x7c>)
 8000c80:	7c1b      	ldrb	r3, [r3, #16]
 8000c82:	b25b      	sxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d02c      	beq.n	8000ce2 <step_motor_A+0x6a>
    int32_t x_next = corexy.x + corexy.signA;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <step_motor_A+0x7c>)
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	4a19      	ldr	r2, [pc, #100]	@ (8000cf4 <step_motor_A+0x7c>)
 8000c8e:	7c12      	ldrb	r2, [r2, #16]
 8000c90:	b252      	sxtb	r2, r2
 8000c92:	4413      	add	r3, r2
 8000c94:	607b      	str	r3, [r7, #4]
    int32_t y_next = corexy.y + corexy.signA;
 8000c96:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <step_motor_A+0x7c>)
 8000c98:	6a1b      	ldr	r3, [r3, #32]
 8000c9a:	4a16      	ldr	r2, [pc, #88]	@ (8000cf4 <step_motor_A+0x7c>)
 8000c9c:	7c12      	ldrb	r2, [r2, #16]
 8000c9e:	b252      	sxtb	r2, r2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	603b      	str	r3, [r7, #0]
    if (x_next < X_MIN || x_next > X_MAX || y_next < Y_MIN || y_next > Y_MAX) return;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db1d      	blt.n	8000ce6 <step_motor_A+0x6e>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	dc18      	bgt.n	8000ce6 <step_motor_A+0x6e>
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db15      	blt.n	8000ce6 <step_motor_A+0x6e>
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	dc10      	bgt.n	8000ce6 <step_motor_A+0x6e>
    AXIS0_GPIO_PORT->BSRR = (1 << AXIS0_STEP_PIN);
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <step_motor_A+0x80>)
 8000cc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cca:	619a      	str	r2, [r3, #24]
    AXIS0_GPIO_PORT->BSRR = (1 << (AXIS0_STEP_PIN + 16));
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <step_motor_A+0x80>)
 8000cce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000cd2:	619a      	str	r2, [r3, #24]
    corexy.x = x_next;
 8000cd4:	4a07      	ldr	r2, [pc, #28]	@ (8000cf4 <step_motor_A+0x7c>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	61d3      	str	r3, [r2, #28]
    corexy.y = y_next;
 8000cda:	4a06      	ldr	r2, [pc, #24]	@ (8000cf4 <step_motor_A+0x7c>)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	6213      	str	r3, [r2, #32]
 8000ce0:	e002      	b.n	8000ce8 <step_motor_A+0x70>
    if (corexy.signA == 0) return;
 8000ce2:	bf00      	nop
 8000ce4:	e000      	b.n	8000ce8 <step_motor_A+0x70>
    if (x_next < X_MIN || x_next > X_MAX || y_next < Y_MIN || y_next > Y_MAX) return;
 8000ce6:	bf00      	nop
}
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200001c4 	.word	0x200001c4
 8000cf8:	48000c00 	.word	0x48000c00

08000cfc <step_motor_B>:

static inline void step_motor_B(void) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
    if (corexy.signB == 0) return;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <step_motor_B+0x78>)
 8000d04:	7c5b      	ldrb	r3, [r3, #17]
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d02b      	beq.n	8000d64 <step_motor_B+0x68>
    int32_t x_next = corexy.x + corexy.signB;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <step_motor_B+0x78>)
 8000d0e:	69db      	ldr	r3, [r3, #28]
 8000d10:	4a18      	ldr	r2, [pc, #96]	@ (8000d74 <step_motor_B+0x78>)
 8000d12:	7c52      	ldrb	r2, [r2, #17]
 8000d14:	b252      	sxtb	r2, r2
 8000d16:	4413      	add	r3, r2
 8000d18:	607b      	str	r3, [r7, #4]
    int32_t y_next = corexy.y - corexy.signB;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <step_motor_B+0x78>)
 8000d1c:	6a1b      	ldr	r3, [r3, #32]
 8000d1e:	4a15      	ldr	r2, [pc, #84]	@ (8000d74 <step_motor_B+0x78>)
 8000d20:	7c52      	ldrb	r2, [r2, #17]
 8000d22:	b252      	sxtb	r2, r2
 8000d24:	1a9b      	subs	r3, r3, r2
 8000d26:	603b      	str	r3, [r7, #0]
    if (x_next < X_MIN || x_next > X_MAX || y_next < Y_MIN || y_next > Y_MAX) return;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db1c      	blt.n	8000d68 <step_motor_B+0x6c>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000d34:	4293      	cmp	r3, r2
 8000d36:	dc17      	bgt.n	8000d68 <step_motor_B+0x6c>
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	db14      	blt.n	8000d68 <step_motor_B+0x6c>
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8000d44:	4293      	cmp	r3, r2
 8000d46:	dc0f      	bgt.n	8000d68 <step_motor_B+0x6c>
    AXIS1_GPIO_PORT->BSRR = (1 << AXIS1_STEP_PIN);
 8000d48:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <step_motor_B+0x7c>)
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	619a      	str	r2, [r3, #24]
    AXIS1_GPIO_PORT->BSRR = (1 << (AXIS1_STEP_PIN + 16));
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <step_motor_B+0x7c>)
 8000d50:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d54:	619a      	str	r2, [r3, #24]
    corexy.x = x_next;
 8000d56:	4a07      	ldr	r2, [pc, #28]	@ (8000d74 <step_motor_B+0x78>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	61d3      	str	r3, [r2, #28]
    corexy.y = y_next;
 8000d5c:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <step_motor_B+0x78>)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	6213      	str	r3, [r2, #32]
 8000d62:	e002      	b.n	8000d6a <step_motor_B+0x6e>
    if (corexy.signB == 0) return;
 8000d64:	bf00      	nop
 8000d66:	e000      	b.n	8000d6a <step_motor_B+0x6e>
    if (x_next < X_MIN || x_next > X_MAX || y_next < Y_MIN || y_next > Y_MAX) return;
 8000d68:	bf00      	nop
}
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	200001c4 	.word	0x200001c4
 8000d78:	48000c00 	.word	0x48000c00

08000d7c <init_axis0_gpio>:



void init_axis0_gpio(void) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
    // --- Enable clock for GPIO port used by AXIS0 ---
    if (AXIS0_GPIO_PORT == GPIOA) RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
    else if (AXIS0_GPIO_PORT == GPIOB) RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
    else if (AXIS0_GPIO_PORT == GPIOC) RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
    else if (AXIS0_GPIO_PORT == GPIOD) RCC->AHBENR |= RCC_AHBENR_GPIODEN;
 8000d80:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <init_axis0_gpio+0xac>)
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	4a28      	ldr	r2, [pc, #160]	@ (8000e28 <init_axis0_gpio+0xac>)
 8000d86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d8a:	6153      	str	r3, [r2, #20]
    else if (AXIS0_GPIO_PORT == GPIOE) RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
    else if (AXIS0_GPIO_PORT == GPIOF) RCC->AHBENR |= RCC_AHBENR_GPIOFEN;

    // --- STEP Pin Setup ---
    AXIS0_GPIO_PORT->MODER   &= ~(3 << (AXIS0_STEP_PIN * 2));         // Clear mode bits (input mode)
 8000d8c:	4b27      	ldr	r3, [pc, #156]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a26      	ldr	r2, [pc, #152]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000d92:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000d96:	6013      	str	r3, [r2, #0]
    AXIS0_GPIO_PORT->MODER   |=  (1 << (AXIS0_STEP_PIN * 2));         // Set as general-purpose output mode
 8000d98:	4b24      	ldr	r3, [pc, #144]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a23      	ldr	r2, [pc, #140]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000d9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000da2:	6013      	str	r3, [r2, #0]
    AXIS0_GPIO_PORT->OTYPER  &= ~(1 << AXIS0_STEP_PIN);               // Output push-pull
 8000da4:	4b21      	ldr	r3, [pc, #132]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	4a20      	ldr	r2, [pc, #128]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000daa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000dae:	6053      	str	r3, [r2, #4]
    AXIS0_GPIO_PORT->OSPEEDR |=  (3 << (AXIS0_STEP_PIN * 2));         // High speed output
 8000db0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000db6:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8000dba:	6093      	str	r3, [r2, #8]
    AXIS0_GPIO_PORT->PUPDR   &= ~(3 << (AXIS0_STEP_PIN * 2));         // No pull-up/pull-down
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000dc2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000dc6:	60d3      	str	r3, [r2, #12]

    // --- DIR Pin Setup ---
    AXIS0_GPIO_PORT->MODER   &= ~(3 << (AXIS0_DIR_PIN * 2));          // 1. Clear MODER bits (sets to input)
 8000dc8:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a17      	ldr	r2, [pc, #92]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000dce:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000dd2:	6013      	str	r3, [r2, #0]
    AXIS0_GPIO_PORT->MODER   |=  (1 << (AXIS0_DIR_PIN * 2));          // 2. Set MODER to 01 (output mode)
 8000dd4:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a14      	ldr	r2, [pc, #80]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000dda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000dde:	6013      	str	r3, [r2, #0]
    AXIS0_GPIO_PORT->OTYPER  &= ~(1 << AXIS0_DIR_PIN);                // 3. Set output type to push-pull
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	4a11      	ldr	r2, [pc, #68]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000de6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000dea:	6053      	str	r3, [r2, #4]
    AXIS0_GPIO_PORT->OSPEEDR |=  (3 << (AXIS0_DIR_PIN * 2));          // 4. Set speed to high (11)
 8000dec:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	4a0e      	ldr	r2, [pc, #56]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000df2:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 8000df6:	6093      	str	r3, [r2, #8]
    AXIS0_GPIO_PORT->PUPDR   &= ~(3 << (AXIS0_DIR_PIN * 2));          // 5. No pull-up / pull-down
 8000df8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	4a0b      	ldr	r2, [pc, #44]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000dfe:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000e02:	60d3      	str	r3, [r2, #12]

    // --- LIMIT Pin Setup ---
    AXIS0_GPIO_PORT->MODER   &= ~(3 << (AXIS0_LIMIT_PIN * 2));        // Set as input (00)
 8000e04:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a08      	ldr	r2, [pc, #32]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000e0a:	f023 0303 	bic.w	r3, r3, #3
 8000e0e:	6013      	str	r3, [r2, #0]
    AXIS0_GPIO_PORT->PUPDR   &= ~(3 << (AXIS0_LIMIT_PIN * 2));        // No pull-up/pull-down
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <init_axis0_gpio+0xb0>)
 8000e16:	f023 0303 	bic.w	r3, r3, #3
 8000e1a:	60d3      	str	r3, [r2, #12]


    // Optional: enable pull-up if limit switch is normally open
    // AXIS0_GPIO_PORT->PUPDR |= (1 << (AXIS0_LIMIT_PIN * 2));        // Pull-up
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	48000c00 	.word	0x48000c00

08000e30 <init_axis1_gpio>:

void init_axis1_gpio(void) {
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
    // --- Enable clock for GPIO port used by AXIS0 ---
    if (AXIS1_GPIO_PORT == GPIOA) RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
    else if (AXIS1_GPIO_PORT == GPIOB) RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
    else if (AXIS1_GPIO_PORT == GPIOC) RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
    else if (AXIS1_GPIO_PORT == GPIOD) RCC->AHBENR |= RCC_AHBENR_GPIODEN;
 8000e34:	4b29      	ldr	r3, [pc, #164]	@ (8000edc <init_axis1_gpio+0xac>)
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	4a28      	ldr	r2, [pc, #160]	@ (8000edc <init_axis1_gpio+0xac>)
 8000e3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e3e:	6153      	str	r3, [r2, #20]
    else if (AXIS1_GPIO_PORT == GPIOE) RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
    else if (AXIS1_GPIO_PORT == GPIOF) RCC->AHBENR |= RCC_AHBENR_GPIOFEN;

    // --- STEP Pin Setup ---
    AXIS1_GPIO_PORT->MODER   &= ~(3 << (AXIS1_STEP_PIN * 2));         // Clear mode bits (input mode)
 8000e40:	4b27      	ldr	r3, [pc, #156]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a26      	ldr	r2, [pc, #152]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000e46:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000e4a:	6013      	str	r3, [r2, #0]
    AXIS1_GPIO_PORT->MODER   |=  (1 << (AXIS1_STEP_PIN * 2));         // Set as general-purpose output mode
 8000e4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a23      	ldr	r2, [pc, #140]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000e52:	f043 0310 	orr.w	r3, r3, #16
 8000e56:	6013      	str	r3, [r2, #0]
    AXIS1_GPIO_PORT->OTYPER  &= ~(1 << AXIS1_STEP_PIN);               // Output push-pull
 8000e58:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	4a20      	ldr	r2, [pc, #128]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000e5e:	f023 0304 	bic.w	r3, r3, #4
 8000e62:	6053      	str	r3, [r2, #4]
    AXIS1_GPIO_PORT->OSPEEDR |=  (3 << (AXIS1_STEP_PIN * 2));         // High speed output
 8000e64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000e6a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000e6e:	6093      	str	r3, [r2, #8]
    AXIS1_GPIO_PORT->PUPDR   &= ~(3 << (AXIS1_STEP_PIN * 2));         // No pull-up/pull-down
 8000e70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	4a1a      	ldr	r2, [pc, #104]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000e76:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000e7a:	60d3      	str	r3, [r2, #12]

    // --- DIR Pin Setup ---
    AXIS1_GPIO_PORT->MODER   &= ~(3 << (AXIS1_DIR_PIN * 2));          // 1. Clear MODER bits (sets to input)
 8000e7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a17      	ldr	r2, [pc, #92]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000e86:	6013      	str	r3, [r2, #0]
    AXIS1_GPIO_PORT->MODER   |=  (1 << (AXIS1_DIR_PIN * 2));          // 2. Set MODER to 01 (output mode)
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e92:	6013      	str	r3, [r2, #0]
    AXIS1_GPIO_PORT->OTYPER  &= ~(1 << AXIS1_DIR_PIN);                // 3. Set output type to push-pull
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	4a11      	ldr	r2, [pc, #68]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000e9a:	f023 0310 	bic.w	r3, r3, #16
 8000e9e:	6053      	str	r3, [r2, #4]
    AXIS1_GPIO_PORT->OSPEEDR |=  (3 << (AXIS1_DIR_PIN * 2));          // 4. Set speed to high (11)
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000ea6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000eaa:	6093      	str	r3, [r2, #8]
    AXIS1_GPIO_PORT->PUPDR   &= ~(3 << (AXIS1_DIR_PIN * 2));          // 5. No pull-up / pull-down
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000eb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000eb6:	60d3      	str	r3, [r2, #12]

    // --- LIMIT Pin Setup ---
    AXIS1_GPIO_PORT->MODER   &= ~(3 << (AXIS1_LIMIT_PIN * 2));        // Set as input (00)
 8000eb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a08      	ldr	r2, [pc, #32]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000ebe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000ec2:	6013      	str	r3, [r2, #0]
    AXIS1_GPIO_PORT->PUPDR   &= ~(3 << (AXIS1_LIMIT_PIN * 2));        // No pull-up/pull-down
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	4a05      	ldr	r2, [pc, #20]	@ (8000ee0 <init_axis1_gpio+0xb0>)
 8000eca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000ece:	60d3      	str	r3, [r2, #12]
    // Optional: enable pull-up if limit switch is normally open
    // AXIS0_GPIO_PORT->PUPDR |= (1 << (AXIS0_LIMIT_PIN * 2));        // Pull-up
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48000c00 	.word	0x48000c00

08000ee4 <init_axis2_gpio>:

void init_axis2_gpio(void) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
    if (AXIS2_GPIO_PORT == GPIOA) RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
    else if (AXIS2_GPIO_PORT == GPIOB) RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
    else if (AXIS2_GPIO_PORT == GPIOC) RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
    else if (AXIS2_GPIO_PORT == GPIOD) RCC->AHBENR |= RCC_AHBENR_GPIODEN;
 8000ee8:	4b29      	ldr	r3, [pc, #164]	@ (8000f90 <init_axis2_gpio+0xac>)
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	4a28      	ldr	r2, [pc, #160]	@ (8000f90 <init_axis2_gpio+0xac>)
 8000eee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ef2:	6153      	str	r3, [r2, #20]
    else if (AXIS2_GPIO_PORT == GPIOE) RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
    else if (AXIS2_GPIO_PORT == GPIOF) RCC->AHBENR |= RCC_AHBENR_GPIOFEN;

    AXIS2_GPIO_PORT->MODER   &= ~(3 << (AXIS2_STEP_PIN * 2));
 8000ef4:	4b27      	ldr	r3, [pc, #156]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a26      	ldr	r2, [pc, #152]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000efa:	f023 030c 	bic.w	r3, r3, #12
 8000efe:	6013      	str	r3, [r2, #0]
    AXIS2_GPIO_PORT->MODER   |=  (1 << (AXIS2_STEP_PIN * 2));
 8000f00:	4b24      	ldr	r3, [pc, #144]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a23      	ldr	r2, [pc, #140]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6013      	str	r3, [r2, #0]
    AXIS2_GPIO_PORT->OTYPER  &= ~(1 << AXIS2_STEP_PIN);
 8000f0c:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	4a20      	ldr	r2, [pc, #128]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f12:	f023 0302 	bic.w	r3, r3, #2
 8000f16:	6053      	str	r3, [r2, #4]
    AXIS2_GPIO_PORT->OSPEEDR |=  (3 << (AXIS2_STEP_PIN * 2));
 8000f18:	4b1e      	ldr	r3, [pc, #120]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f1e:	f043 030c 	orr.w	r3, r3, #12
 8000f22:	6093      	str	r3, [r2, #8]
    AXIS2_GPIO_PORT->PUPDR   &= ~(3 << (AXIS2_STEP_PIN * 2));
 8000f24:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	4a1a      	ldr	r2, [pc, #104]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f2a:	f023 030c 	bic.w	r3, r3, #12
 8000f2e:	60d3      	str	r3, [r2, #12]

    AXIS2_GPIO_PORT->MODER   &= ~(3 << (AXIS2_DIR_PIN * 2));
 8000f30:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a17      	ldr	r2, [pc, #92]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f36:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000f3a:	6013      	str	r3, [r2, #0]
    AXIS2_GPIO_PORT->MODER   |=  (1 << (AXIS2_DIR_PIN * 2));
 8000f3c:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a14      	ldr	r2, [pc, #80]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f46:	6013      	str	r3, [r2, #0]
    AXIS2_GPIO_PORT->OTYPER  &= ~(1 << AXIS2_DIR_PIN);
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	4a11      	ldr	r2, [pc, #68]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f4e:	f023 0308 	bic.w	r3, r3, #8
 8000f52:	6053      	str	r3, [r2, #4]
    AXIS2_GPIO_PORT->OSPEEDR |=  (3 << (AXIS2_DIR_PIN * 2));
 8000f54:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	4a0e      	ldr	r2, [pc, #56]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000f5e:	6093      	str	r3, [r2, #8]
    AXIS2_GPIO_PORT->PUPDR   &= ~(3 << (AXIS2_DIR_PIN * 2));
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	4a0b      	ldr	r2, [pc, #44]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f66:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000f6a:	60d3      	str	r3, [r2, #12]

    AXIS2_GPIO_PORT->MODER   &= ~(3 << (AXIS2_LIMIT_PIN * 2));
 8000f6c:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a08      	ldr	r2, [pc, #32]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f72:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000f76:	6013      	str	r3, [r2, #0]
    AXIS2_GPIO_PORT->PUPDR   &= ~(3 << (AXIS2_LIMIT_PIN * 2));
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	4a05      	ldr	r2, [pc, #20]	@ (8000f94 <init_axis2_gpio+0xb0>)
 8000f7e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000
 8000f94:	48000c00 	.word	0x48000c00

08000f98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f98:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f9a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f9c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa0:	480c      	ldr	r0, [pc, #48]	@ (8000fd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa2:	490d      	ldr	r1, [pc, #52]	@ (8000fd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <LoopForever+0xe>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe4 <LoopForever+0x16>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fc6:	f000 f819 	bl	8000ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fca:	f7ff f945 	bl	8000258 <main>

08000fce <LoopForever>:

LoopForever:
  b LoopForever
 8000fce:	e7fe      	b.n	8000fce <LoopForever>
  ldr   r0, =_estack
 8000fd0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 8000fdc:	08001144 	.word	0x08001144
  ldr r2, =_sbss
 8000fe0:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8000fe4:	200001fc 	.word	0x200001fc

08000fe8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC1_2_IRQHandler>

08000fea <memset>:
 8000fea:	4402      	add	r2, r0
 8000fec:	4603      	mov	r3, r0
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d100      	bne.n	8000ff4 <memset+0xa>
 8000ff2:	4770      	bx	lr
 8000ff4:	f803 1b01 	strb.w	r1, [r3], #1
 8000ff8:	e7f9      	b.n	8000fee <memset+0x4>
	...

08000ffc <__libc_init_array>:
 8000ffc:	b570      	push	{r4, r5, r6, lr}
 8000ffe:	4d0d      	ldr	r5, [pc, #52]	@ (8001034 <__libc_init_array+0x38>)
 8001000:	4c0d      	ldr	r4, [pc, #52]	@ (8001038 <__libc_init_array+0x3c>)
 8001002:	1b64      	subs	r4, r4, r5
 8001004:	10a4      	asrs	r4, r4, #2
 8001006:	2600      	movs	r6, #0
 8001008:	42a6      	cmp	r6, r4
 800100a:	d109      	bne.n	8001020 <__libc_init_array+0x24>
 800100c:	4d0b      	ldr	r5, [pc, #44]	@ (800103c <__libc_init_array+0x40>)
 800100e:	4c0c      	ldr	r4, [pc, #48]	@ (8001040 <__libc_init_array+0x44>)
 8001010:	f000 f818 	bl	8001044 <_init>
 8001014:	1b64      	subs	r4, r4, r5
 8001016:	10a4      	asrs	r4, r4, #2
 8001018:	2600      	movs	r6, #0
 800101a:	42a6      	cmp	r6, r4
 800101c:	d105      	bne.n	800102a <__libc_init_array+0x2e>
 800101e:	bd70      	pop	{r4, r5, r6, pc}
 8001020:	f855 3b04 	ldr.w	r3, [r5], #4
 8001024:	4798      	blx	r3
 8001026:	3601      	adds	r6, #1
 8001028:	e7ee      	b.n	8001008 <__libc_init_array+0xc>
 800102a:	f855 3b04 	ldr.w	r3, [r5], #4
 800102e:	4798      	blx	r3
 8001030:	3601      	adds	r6, #1
 8001032:	e7f2      	b.n	800101a <__libc_init_array+0x1e>
 8001034:	0800113c 	.word	0x0800113c
 8001038:	0800113c 	.word	0x0800113c
 800103c:	0800113c 	.word	0x0800113c
 8001040:	08001140 	.word	0x08001140

08001044 <_init>:
 8001044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001046:	bf00      	nop
 8001048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800104a:	bc08      	pop	{r3}
 800104c:	469e      	mov	lr, r3
 800104e:	4770      	bx	lr

08001050 <_fini>:
 8001050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001052:	bf00      	nop
 8001054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001056:	bc08      	pop	{r3}
 8001058:	469e      	mov	lr, r3
 800105a:	4770      	bx	lr
