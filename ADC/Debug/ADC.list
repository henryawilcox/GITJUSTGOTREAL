
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001194  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08001334  08001334  00002334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013bc  080013bc  00003078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080013bc  080013bc  000023bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080013c4  080013c4  00003078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013c4  080013c4  000023c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080013c8  080013c8  000023c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080013cc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003078  2**0
                  CONTENTS
 10 .bss          00000168  20000078  20000078  00003078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e0  200001e0  00003078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000eb0  00000000  00000000  000030a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000524  00000000  00000000  00003f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000f8  00000000  00000000  00004480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ab  00000000  00000000  00004578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000150d6  00000000  00000000  00004623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001604  00000000  00000000  000196f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075fca  00000000  00000000  0001acfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00090cc7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000834  00000000  00000000  00090d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00091540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800131c 	.word	0x0800131c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800131c 	.word	0x0800131c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <enable_clocks>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000284:	4b05      	ldr	r3, [pc, #20]	@ (800029c <enable_clocks+0x1c>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a04      	ldr	r2, [pc, #16]	@ (800029c <enable_clocks+0x1c>)
 800028a:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 800028e:	6153      	str	r3, [r2, #20]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40021000 	.word	0x40021000

080002a0 <initialise_board>:

// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80002a6:	4b0a      	ldr	r3, [pc, #40]	@ (80002d0 <initialise_board+0x30>)
 80002a8:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f245 5255 	movw	r2, #21845	@ 0x5555
 80002b0:	801a      	strh	r2, [r3, #0]
	GPIOA->MODER |= (3 << (1 * 2)) | (3 << (2 * 2)) | (3 << (3 * 2));
 80002b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002bc:	f043 03fc 	orr.w	r3, r3, #252	@ 0xfc
 80002c0:	6013      	str	r3, [r2, #0]
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	48001002 	.word	0x48001002

080002d4 <ContinuousReadThreeChannelADC>:

	return ADC1->DR;
}


void ContinuousReadThreeChannelADC() {
 80002d4:	b5b0      	push	{r4, r5, r7, lr}
 80002d6:	b098      	sub	sp, #96	@ 0x60
 80002d8:	af02      	add	r7, sp, #8
	uint8_t buffer1[64] = "This is a string !\r\n";
 80002da:	4b8f      	ldr	r3, [pc, #572]	@ (8000518 <ContinuousReadThreeChannelADC+0x244>)
 80002dc:	1d3c      	adds	r4, r7, #4
 80002de:	461d      	mov	r5, r3
 80002e0:	6828      	ldr	r0, [r5, #0]
 80002e2:	6869      	ldr	r1, [r5, #4]
 80002e4:	68aa      	ldr	r2, [r5, #8]
 80002e6:	68eb      	ldr	r3, [r5, #12]
 80002e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ea:	6928      	ldr	r0, [r5, #16]
 80002ec:	6020      	str	r0, [r4, #0]
 80002ee:	7d2b      	ldrb	r3, [r5, #20]
 80002f0:	7123      	strb	r3, [r4, #4]
 80002f2:	f107 0319 	add.w	r3, r7, #25
 80002f6:	222b      	movs	r2, #43	@ 0x2b
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fb90 	bl	8000a20 <memset>
	// Get pointer to LEDs (PE8â€“PE15)
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000300:	4b86      	ldr	r3, [pc, #536]	@ (800051c <ContinuousReadThreeChannelADC+0x248>)
 8000302:	653b      	str	r3, [r7, #80]	@ 0x50

	// Enable ADC1 clock
	RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 8000304:	4b86      	ldr	r3, [pc, #536]	@ (8000520 <ContinuousReadThreeChannelADC+0x24c>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a85      	ldr	r2, [pc, #532]	@ (8000520 <ContinuousReadThreeChannelADC+0x24c>)
 800030a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800030e:	6153      	str	r3, [r2, #20]

	// ADC clock mode (HCLK/1)
	ADC12_COMMON->CCR |= ADC12_CCR_CKMODE_0;
 8000310:	4b84      	ldr	r3, [pc, #528]	@ (8000524 <ContinuousReadThreeChannelADC+0x250>)
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	4a83      	ldr	r2, [pc, #524]	@ (8000524 <ContinuousReadThreeChannelADC+0x250>)
 8000316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800031a:	6093      	str	r3, [r2, #8]

	// ADC voltage regulator ON
	ADC1->CR &= ~ADC_CR_ADVREGEN;
 800031c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000326:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800032a:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADVREGEN_0;
 800032c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800033a:	6093      	str	r3, [r2, #8]

	// Set to single-ended input
	ADC1->CR &= ~ADC_CR_ADCALDIF;
 800033c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000346:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800034a:	6093      	str	r3, [r2, #8]

	// Calibrate ADC
	ADC1->CR |= ADC_CR_ADCAL;
 800034c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000356:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800035a:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL);  // wait for calibration
 800035c:	bf00      	nop
 800035e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	2b00      	cmp	r3, #0
 8000366:	dbfa      	blt.n	800035e <ContinuousReadThreeChannelADC+0x8a>

	// Sampling time (maximum for better accuracy)
	ADC1->SMPR1 |= (7U << ADC_SMPR1_SMP2_Pos); // CH2
 8000368:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000372:	f443 73e0 	orr.w	r3, r3, #448	@ 0x1c0
 8000376:	6153      	str	r3, [r2, #20]
	ADC1->SMPR1 |= (7U << ADC_SMPR1_SMP3_Pos); // CH3
 8000378:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000382:	f443 6360 	orr.w	r3, r3, #3584	@ 0xe00
 8000386:	6153      	str	r3, [r2, #20]
	ADC1->SMPR1 |= (7U << ADC_SMPR1_SMP4_Pos); // CH4
 8000388:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000392:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000396:	6153      	str	r3, [r2, #20]

	// Set sequence: CH2 â†’ CH3 â†’ CH4
	ADC1->SQR1 = 0;
 8000398:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800039c:	2200      	movs	r2, #0
 800039e:	631a      	str	r2, [r3, #48]	@ 0x30
	ADC1->SQR1 |= (0x02 << ADC_SQR1_SQ1_Pos); // 1st: CH2
 80003a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ae:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC1->SQR1 |= (0x03 << ADC_SQR1_SQ2_Pos); // 2nd: CH3
 80003b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003ba:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80003be:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC1->SQR1 |= (0x04 << ADC_SQR1_SQ3_Pos); // 3rd: CH4
 80003c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003ce:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC1->SQR1 |= (2 << ADC_SQR1_L_Pos);      // L = 2 â†’ 3 conversions
 80003d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003da:	f043 0302 	orr.w	r3, r3, #2
 80003de:	6313      	str	r3, [r2, #48]	@ 0x30

	// Continuous mode ON
	ADC1->CFGR |= ADC_CFGR_CONT;
 80003e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003e4:	68db      	ldr	r3, [r3, #12]
 80003e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003ee:	60d3      	str	r3, [r2, #12]

	// Enable ADC
	ADC1->CR |= ADC_CR_ADEN;
 80003f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & ADC_ISR_ADRDY)); // wait for ADC to be ready
 8000400:	bf00      	nop
 8000402:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	2b00      	cmp	r3, #0
 800040e:	d0f8      	beq.n	8000402 <ContinuousReadThreeChannelADC+0x12e>

	// Start conversion once
	ADC1->CR |= ADC_CR_ADSTART;
 8000410:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	6093      	str	r3, [r2, #8]

	uint16_t value1 = 0, value2 = 0, value3 = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000426:	2300      	movs	r3, #0
 8000428:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800042c:	2300      	movs	r3, #0
 800042e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	uint8_t scale = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	while (1) {
		// Wait for EOS (End of Sequence)
		;
		while (!(ADC1->ISR & ADC_ISR_EOC));
 8000438:	bf00      	nop
 800043a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f003 0304 	and.w	r3, r3, #4
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0f8      	beq.n	800043a <ContinuousReadThreeChannelADC+0x166>
		// Read 3 conversion results from DR (in order of sequence)
		value1 = ADC1->DR; // Channel 2
 8000448:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800044c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800044e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		while (!(ADC1->ISR & ADC_ISR_EOC));
 8000452:	bf00      	nop
 8000454:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f003 0304 	and.w	r3, r3, #4
 800045e:	2b00      	cmp	r3, #0
 8000460:	d0f8      	beq.n	8000454 <ContinuousReadThreeChannelADC+0x180>
		value2 = ADC1->DR; // Channel 3
 8000462:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000468:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		while (!(ADC1->ISR & ADC_ISR_EOC));
 800046c:	bf00      	nop
 800046e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f003 0304 	and.w	r3, r3, #4
 8000478:	2b00      	cmp	r3, #0
 800047a:	d0f8      	beq.n	800046e <ContinuousReadThreeChannelADC+0x19a>
		value3 = ADC1->DR; // Channel 4
 800047c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000482:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

		while (!(ADC1->ISR & ADC_ISR_EOS));
 8000486:	bf00      	nop
 8000488:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f003 0308 	and.w	r3, r3, #8
 8000492:	2b00      	cmp	r3, #0
 8000494:	d0f8      	beq.n	8000488 <ContinuousReadThreeChannelADC+0x1b4>
		sprintf(buffer1, "CH2: %d, CH3: %d, CH4: %d\r\n", value1, value2, value3);
 8000496:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800049a:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 800049e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80004a2:	1d38      	adds	r0, r7, #4
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	460b      	mov	r3, r1
 80004a8:	491f      	ldr	r1, [pc, #124]	@ (8000528 <ContinuousReadThreeChannelADC+0x254>)
 80004aa:	f000 fa97 	bl	80009dc <siprintf>
		SerialOutputString(buffer1, &USART1_PORT);
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	491e      	ldr	r1, [pc, #120]	@ (800052c <ContinuousReadThreeChannelADC+0x258>)
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 fa0d 	bl	80008d2 <SerialOutputString>
		// Simple LED scale visualization based on sum (for example)
		uint32_t avg = (value1 + value2 + value3) / 3;
 80004b8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80004bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80004c0:	441a      	add	r2, r3
 80004c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80004c6:	4413      	add	r3, r2
 80004c8:	4a19      	ldr	r2, [pc, #100]	@ (8000530 <ContinuousReadThreeChannelADC+0x25c>)
 80004ca:	fb82 1203 	smull	r1, r2, r2, r3
 80004ce:	17db      	asrs	r3, r3, #31
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	647b      	str	r3, [r7, #68]	@ 0x44
		scale = avg / (0xFFF / 8);
 80004d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80004d6:	4b17      	ldr	r3, [pc, #92]	@ (8000534 <ContinuousReadThreeChannelADC+0x260>)
 80004d8:	fba3 1302 	umull	r1, r3, r3, r2
 80004dc:	1ad2      	subs	r2, r2, r3
 80004de:	0852      	lsrs	r2, r2, #1
 80004e0:	4413      	add	r3, r2
 80004e2:	0a1b      	lsrs	r3, r3, #8
 80004e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (scale > 7) scale = 7;
 80004e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80004ec:	2b07      	cmp	r3, #7
 80004ee:	d902      	bls.n	80004f6 <ContinuousReadThreeChannelADC+0x222>
 80004f0:	2307      	movs	r3, #7
 80004f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		*led_register = 1 << scale;
 80004f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80004fa:	2201      	movs	r2, #1
 80004fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000500:	b2da      	uxtb	r2, r3
 8000502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000504:	701a      	strb	r2, [r3, #0]

		// Clear EOS flag manually
		ADC1->ISR |= ADC_ISR_EOS;
 8000506:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000510:	f043 0308 	orr.w	r3, r3, #8
 8000514:	6013      	str	r3, [r2, #0]
	while (1) {
 8000516:	e78f      	b.n	8000438 <ContinuousReadThreeChannelADC+0x164>
 8000518:	08001350 	.word	0x08001350
 800051c:	48001015 	.word	0x48001015
 8000520:	40021000 	.word	0x40021000
 8000524:	50000300 	.word	0x50000300
 8000528:	08001334 	.word	0x08001334
 800052c:	20000000 	.word	0x20000000
 8000530:	55555556 	.word	0x55555556
 8000534:	00804021 	.word	0x00804021

08000538 <delay>:
	}
}



void delay(volatile uint32_t count) {
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    while (count--) {
 8000540:	e000      	b.n	8000544 <delay+0xc>
        __asm__("nop");
 8000542:	bf00      	nop
    while (count--) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	1e5a      	subs	r2, r3, #1
 8000548:	607a      	str	r2, [r7, #4]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1f9      	bne.n	8000542 <delay+0xa>
    }
}
 800054e:	bf00      	nop
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <SingleReadMultiChannelADC>:
void SingleReadMultiChannelADC() {
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b096      	sub	sp, #88	@ 0x58
 8000560:	af02      	add	r7, sp, #8

	// get a pointer to the location of the LEDs
	// This points to the higher byte of GPIOE->ODR (e.g., PE8-PE15 if GPIOE->ODR is 16-bit)
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000562:	4b6d      	ldr	r3, [pc, #436]	@ (8000718 <SingleReadMultiChannelADC+0x1bc>)
 8000564:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint8_t buffer1[64] = "This is a string !\r\n";
 8000566:	4b6d      	ldr	r3, [pc, #436]	@ (800071c <SingleReadMultiChannelADC+0x1c0>)
 8000568:	1d3c      	adds	r4, r7, #4
 800056a:	461d      	mov	r5, r3
 800056c:	6828      	ldr	r0, [r5, #0]
 800056e:	6869      	ldr	r1, [r5, #4]
 8000570:	68aa      	ldr	r2, [r5, #8]
 8000572:	68eb      	ldr	r3, [r5, #12]
 8000574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000576:	6928      	ldr	r0, [r5, #16]
 8000578:	6020      	str	r0, [r4, #0]
 800057a:	7d2b      	ldrb	r3, [r5, #20]
 800057c:	7123      	strb	r3, [r4, #4]
 800057e:	f107 0319 	add.w	r3, r7, #25
 8000582:	222b      	movs	r2, #43	@ 0x2b
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fa4a 	bl	8000a20 <memset>



	// enable the clock for ADC1
	RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 800058c:	4b64      	ldr	r3, [pc, #400]	@ (8000720 <SingleReadMultiChannelADC+0x1c4>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a63      	ldr	r2, [pc, #396]	@ (8000720 <SingleReadMultiChannelADC+0x1c4>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000596:	6153      	str	r3, [r2, #20]

	// set to synchronise the ADC with the clock
	ADC12_COMMON->CCR |= ADC12_CCR_CKMODE_0;
 8000598:	4b62      	ldr	r3, [pc, #392]	@ (8000724 <SingleReadMultiChannelADC+0x1c8>)
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	4a61      	ldr	r2, [pc, #388]	@ (8000724 <SingleReadMultiChannelADC+0x1c8>)
 800059e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005a2:	6093      	str	r3, [r2, #8]

	// ADEN must be = 0 for configuration (is the default)
	ADC1->CR &= ~ADC_CR_ADVREGEN; // clear voltage regulator enable
 80005a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005ae:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80005b2:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADVREGEN_0; // set ADVREGEN TO 01 (enable)
 80005b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	6093      	str	r3, [r2, #8]
	// Delay for ADC voltage regulator startup might be needed here, depending on MCU.
	ADC1->CR &= ~ADC_CR_ADCALDIF; // clear bit to enable Single-ended-input
 80005c4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80005d2:	6093      	str	r3, [r2, #8]

	// calibrate the ADC (self calibration routine)
	ADC1->CR |= ADC_CR_ADCAL;
 80005d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80005de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005e2:	6093      	str	r3, [r2, #8]
	while((ADC1->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL); // Waiting for the calibration to finish
 80005e4:	bf00      	nop
 80005e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80005f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80005f4:	d0f7      	beq.n	80005e6 <SingleReadMultiChannelADC+0x8a>
	// We want to read from three channels each sequence
	//  the first channel goes in SQ1
	//  the second channel goes in SQ2
	//  the third channel goes in SQ3
	//  the number of channels to read = 3, so the L value is 2 (3-1)
	ADC1->SQR1 = 0; // Clear previous sequence
 80005f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80005fa:	2200      	movs	r2, #0
 80005fc:	631a      	str	r2, [r3, #48]	@ 0x30
	// Let's assume we read Channel 2, then Channel 3, then Channel 4
	// The channel numbers (e.g., 0x02 for CH2) depend on your MCU's ADC channel mapping.
	ADC1->SQR1 |= (0x02 << ADC_SQR1_SQ1_Pos); // 1st conversion: ADC Channel 2
 80005fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000604:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC1->SQR1 |= (0x03 << ADC_SQR1_SQ2_Pos); // 2nd conversion: ADC Channel 3
 800060e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000614:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000618:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC1->SQR1 |= (0x04 << ADC_SQR1_SQ3_Pos); // 3rd conversion: ADC Channel 4 (example for the third channel)
 800061e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000624:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000628:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC1->SQR1 |= (4 << ADC_SQR1_L_Pos); // L = 2 for 3 channels in sequence
 800062e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000634:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30

	// single shot mode (one sequence per ADSTART)
	ADC1->CFGR &= ~ADC_CFGR_CONT;
 800063e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000648:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800064c:	60d3      	str	r3, [r2, #12]

	// Enable the ADC
	ADC1->CR |= ADC_CR_ADEN;
 800064e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6093      	str	r3, [r2, #8]

	// Wait for the ADC to be ready.
	// It's generally better to wait for the ADRDY flag: while(!(ADC1->ISR & ADC_ISR_ADRDY));
	while (!(ADC1->ISR & ADC_ISR_ADRDY)); // Original wait condition, ensure it implies ADRDY or is sufficient
 800065e:	bf00      	nop
 8000660:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0f8      	beq.n	8000660 <SingleReadMultiChannelADC+0x104>

	uint16_t value_1 = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	uint16_t value_2 = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	uint16_t value_3 = 0; // Variable for the third channel
 800067a:	2300      	movs	r3, #0
 800067c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    /* Loop forever */
	for(;;) {

		// request the ADC conversion sequence to start
		ADC1->CR |= ADC_CR_ADSTART;
 8000680:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6093      	str	r3, [r2, #8]

		// Wait for the end of the first conversion
		while (!(ADC1->ISR & ADC_ISR_EOC));
 8000690:	bf00      	nop
 8000692:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	2b00      	cmp	r3, #0
 800069e:	d0f8      	beq.n	8000692 <SingleReadMultiChannelADC+0x136>
		// read the first value (reading DR also clears EOC)
		value_1 = ADC1->DR;
 80006a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80006a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a



		//Wait for the end of the second conversion
		while(!(ADC1->ISR & ADC_ISR_EOC));
 80006aa:	bf00      	nop
 80006ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d0f8      	beq.n	80006ac <SingleReadMultiChannelADC+0x150>
		// read the second value
		value_2 = ADC1->DR;
 80006ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

		// Wait for the end of the third conversion
		while(!(ADC1->ISR & ADC_ISR_EOC));
 80006c4:	bf00      	nop
 80006c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0f8      	beq.n	80006c6 <SingleReadMultiChannelADC+0x16a>
		// read the third value
		value_3 = ADC1->DR;
 80006d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80006d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006da:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

		// After all conversions in the sequence are done, EOS flag is set.
		// Reset the End Of Sequence flag (optional if not explicitly checked, but good practice)
		ADC1->ISR |= ADC_ISR_EOS;
 80006de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80006e8:	f043 0308 	orr.w	r3, r3, #8
 80006ec:	6013      	str	r3, [r2, #0]
		sprintf(buffer1, "CH2: %d, CH3: %d, CH4: %d\r\n", value_1, value_2, value_3);
 80006ee:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80006f2:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 80006f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80006fa:	1d38      	adds	r0, r7, #4
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	460b      	mov	r3, r1
 8000700:	4909      	ldr	r1, [pc, #36]	@ (8000728 <SingleReadMultiChannelADC+0x1cc>)
 8000702:	f000 f96b 	bl	80009dc <siprintf>
		SerialOutputString(buffer1, &USART1_PORT);
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4908      	ldr	r1, [pc, #32]	@ (800072c <SingleReadMultiChannelADC+0x1d0>)
 800070a:	4618      	mov	r0, r3
 800070c:	f000 f8e1 	bl	80008d2 <SerialOutputString>
		// Channel 3: LEDs 4-5 (controlled by *led_register bits 4 and 5 via `1 << (display_scale_3 + 4)`)
		// This lights one of the two designated LEDs for each channel based on its scaled value (0 or 1).
		*led_register = (1 << display_scale_1) | (1 << (display_scale_2 + 2)) | (1 << (display_scale_3 + 4));
*/
		// Optional: Add a small delay here if needed for visibility or timing
		delay(50);
 8000710:	2032      	movs	r0, #50	@ 0x32
 8000712:	f7ff ff11 	bl	8000538 <delay>
	for(;;) {
 8000716:	e7b3      	b.n	8000680 <SingleReadMultiChannelADC+0x124>
 8000718:	48001015 	.word	0x48001015
 800071c:	08001350 	.word	0x08001350
 8000720:	40021000 	.word	0x40021000
 8000724:	50000300 	.word	0x50000300
 8000728:	08001334 	.word	0x08001334
 800072c:	20000000 	.word	0x20000000

08000730 <main>:
    }
}


int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	enable_clocks();
 8000734:	f7ff fda4 	bl	8000280 <enable_clocks>
	initialise_board();
 8000738:	f7ff fdb2 	bl	80002a0 <initialise_board>
	SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission);
 800073c:	4a09      	ldr	r2, [pc, #36]	@ (8000764 <main+0x34>)
 800073e:	490a      	ldr	r1, [pc, #40]	@ (8000768 <main+0x38>)
 8000740:	2004      	movs	r0, #4
 8000742:	f000 f813 	bl	800076c <SerialInitialise>


	}*/
	// check if the button is pressed, determine which mode
	//  to enter.
	if ((GPIOA->IDR & 0x01) == 0)
 8000746:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800074a:	691b      	ldr	r3, [r3, #16]
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	2b00      	cmp	r3, #0
 8000752:	d102      	bne.n	800075a <main+0x2a>
		SingleReadMultiChannelADC();
 8000754:	f7ff ff02 	bl	800055c <SingleReadMultiChannelADC>
 8000758:	e001      	b.n	800075e <main+0x2e>
	else
		ContinuousReadThreeChannelADC();
 800075a:	f7ff fdbb 	bl	80002d4 <ContinuousReadThreeChannelADC>
 800075e:	2300      	movs	r3, #0
}
 8000760:	4618      	mov	r0, r3
 8000762:	bd80      	pop	{r7, pc}
 8000764:	0800086d 	.word	0x0800086d
 8000768:	20000000 	.word	0x20000000

0800076c <SerialInitialise>:
	};


// InitialiseSerial - function to initialise serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t, char *)) {
 800076c:	b480      	push	{r7}
 800076e:	b087      	sub	sp, #28
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800077e:	4b3a      	ldr	r3, [pc, #232]	@ (8000868 <SerialInitialise+0xfc>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a39      	ldr	r2, [pc, #228]	@ (8000868 <SerialInitialise+0xfc>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000788:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800078a:	4b37      	ldr	r3, [pc, #220]	@ (8000868 <SerialInitialise+0xfc>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	4a36      	ldr	r2, [pc, #216]	@ (8000868 <SerialInitialise+0xfc>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	691a      	ldr	r2, [r3, #16]
 800079a:	4b33      	ldr	r3, [pc, #204]	@ (8000868 <SerialInitialise+0xfc>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4932      	ldr	r1, [pc, #200]	@ (8000868 <SerialInitialise+0xfc>)
 80007a0:	4313      	orrs	r3, r2
 80007a2:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	6952      	ldr	r2, [r2, #20]
 80007ac:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	6992      	ldr	r2, [r2, #24]
 80007b6:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	69d9      	ldr	r1, [r3, #28]
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	6a1a      	ldr	r2, [r3, #32]
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	430a      	orrs	r2, r1
 80007c8:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	6a19      	ldr	r1, [r3, #32]
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	430a      	orrs	r2, r1
 80007da:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	68da      	ldr	r2, [r3, #12]
 80007e0:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <SerialInitialise+0xfc>)
 80007e2:	69db      	ldr	r3, [r3, #28]
 80007e4:	4920      	ldr	r1, [pc, #128]	@ (8000868 <SerialInitialise+0xfc>)
 80007e6:	4313      	orrs	r3, r2
 80007e8:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	689a      	ldr	r2, [r3, #8]
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <SerialInitialise+0xfc>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	491d      	ldr	r1, [pc, #116]	@ (8000868 <SerialInitialise+0xfc>)
 80007f4:	4313      	orrs	r3, r2
 80007f6:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	330c      	adds	r3, #12
 80007fe:	617b      	str	r3, [r7, #20]

	// Baud rates to select
	switch(baudRate){
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b04      	cmp	r3, #4
 8000804:	d822      	bhi.n	800084c <SerialInitialise+0xe0>
 8000806:	a201      	add	r2, pc, #4	@ (adr r2, 800080c <SerialInitialise+0xa0>)
 8000808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080c:	08000821 	.word	0x08000821
 8000810:	0800082b 	.word	0x0800082b
 8000814:	08000835 	.word	0x08000835
 8000818:	0800083d 	.word	0x0800083d
 800081c:	08000845 	.word	0x08000845
	case BAUD_9600:
		*baud_rate_config = 0x341;  // 9600 at 8MHz
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	f240 3241 	movw	r2, #833	@ 0x341
 8000826:	801a      	strh	r2, [r3, #0]
		break;
 8000828:	e010      	b.n	800084c <SerialInitialise+0xe0>
	case BAUD_19200:
		*baud_rate_config = 0x1A1;  // 19200 at 8MHz
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000830:	801a      	strh	r2, [r3, #0]
		break;
 8000832:	e00b      	b.n	800084c <SerialInitialise+0xe0>
	case BAUD_38400:
		*baud_rate_config = 0xD0;  // 38400 at 8MHz
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	22d0      	movs	r2, #208	@ 0xd0
 8000838:	801a      	strh	r2, [r3, #0]
		break;
 800083a:	e007      	b.n	800084c <SerialInitialise+0xe0>
	case BAUD_57600:
		*baud_rate_config = 0x8B;  // 57600 at 8MHz
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	228b      	movs	r2, #139	@ 0x8b
 8000840:	801a      	strh	r2, [r3, #0]
		break;
 8000842:	e003      	b.n	800084c <SerialInitialise+0xe0>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	2246      	movs	r2, #70	@ 0x46
 8000848:	801a      	strh	r2, [r3, #0]
		break;
 800084a:	bf00      	nop
	}
	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f042 020d 	orr.w	r2, r2, #13
 800085a:	601a      	str	r2, [r3, #0]
}
 800085c:	bf00      	nop
 800085e:	371c      	adds	r7, #28
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	40021000 	.word	0x40021000

0800086c <finished_transmission>:



//Transmission completion function. Short delay to prevent other operations happening too quickly afterwards
void finished_transmission(uint32_t bytes_sent, char *sent_string) {
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	
	volatile uint32_t test = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
	for (volatile uint32_t i = 0; i < 0x8ffff; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	e002      	b.n	8000886 <finished_transmission+0x1a>
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	3301      	adds	r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	4a04      	ldr	r2, [pc, #16]	@ (800089c <finished_transmission+0x30>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d9f8      	bls.n	8000880 <finished_transmission+0x14>
		//delay
	}
}
 800088e:	bf00      	nop
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	0008fffe 	.word	0x0008fffe

080008a0 <SerialOutputChar>:

//Function to transmit a byte via polling method, called in SerialOutputString
void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 80008ac:	bf00      	nop
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0f8      	beq.n	80008ae <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	79fa      	ldrb	r2, [r7, #7]
 80008c2:	b292      	uxth	r2, r2
 80008c4:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <SerialOutputString>:

//Function to transmit a string via polling method
void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b084      	sub	sp, #16
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
	char start_string = pt;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	72fb      	strb	r3, [r7, #11]
	while(*pt) {
 80008e4:	e00b      	b.n	80008fe <SerialOutputString+0x2c>
		SerialOutputChar(*pt, serial_port);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	6839      	ldr	r1, [r7, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ffd7 	bl	80008a0 <SerialOutputChar>
		counter++;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3301      	adds	r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
		pt++;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3301      	adds	r3, #1
 80008fc:	607b      	str	r3, [r7, #4]
	while(*pt) {
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1ef      	bne.n	80008e6 <SerialOutputString+0x14>
	}

	serial_port->completion_function(counter, (char *)start_string);
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800090a:	7afa      	ldrb	r2, [r7, #11]
 800090c:	4611      	mov	r1, r2
 800090e:	68f8      	ldr	r0, [r7, #12]
 8000910:	4798      	blx	r3
}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000924:	4a14      	ldr	r2, [pc, #80]	@ (8000978 <_sbrk+0x5c>)
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <_sbrk+0x60>)
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000930:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d102      	bne.n	800093e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <_sbrk+0x64>)
 800093a:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <_sbrk+0x68>)
 800093c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	429a      	cmp	r2, r3
 800094a:	d207      	bcs.n	800095c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800094c:	f000 f870 	bl	8000a30 <__errno>
 8000950:	4603      	mov	r3, r0
 8000952:	220c      	movs	r2, #12
 8000954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	e009      	b.n	8000970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000962:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	4a05      	ldr	r2, [pc, #20]	@ (8000980 <_sbrk+0x64>)
 800096c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096e:	68fb      	ldr	r3, [r7, #12]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000a000 	.word	0x2000a000
 800097c:	00000400 	.word	0x00000400
 8000980:	20000094 	.word	0x20000094
 8000984:	200001e0 	.word	0x200001e0

08000988 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000988:	480d      	ldr	r0, [pc, #52]	@ (80009c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800098a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800098c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000990:	480c      	ldr	r0, [pc, #48]	@ (80009c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000992:	490d      	ldr	r1, [pc, #52]	@ (80009c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000994:	4a0d      	ldr	r2, [pc, #52]	@ (80009cc <LoopForever+0xe>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000998:	e002      	b.n	80009a0 <LoopCopyDataInit>

0800099a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800099c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099e:	3304      	adds	r3, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a4:	d3f9      	bcc.n	800099a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a8:	4c0a      	ldr	r4, [pc, #40]	@ (80009d4 <LoopForever+0x16>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ac:	e001      	b.n	80009b2 <LoopFillZerobss>

080009ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b0:	3204      	adds	r2, #4

080009b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b4:	d3fb      	bcc.n	80009ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009b6:	f000 f841 	bl	8000a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ba:	f7ff feb9 	bl	8000730 <main>

080009be <LoopForever>:

LoopForever:
  b LoopForever
 80009be:	e7fe      	b.n	80009be <LoopForever>
  ldr   r0, =_estack
 80009c0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80009cc:	080013cc 	.word	0x080013cc
  ldr r2, =_sbss
 80009d0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80009d4:	200001e0 	.word	0x200001e0

080009d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC1_2_IRQHandler>
	...

080009dc <siprintf>:
 80009dc:	b40e      	push	{r1, r2, r3}
 80009de:	b510      	push	{r4, lr}
 80009e0:	b09d      	sub	sp, #116	@ 0x74
 80009e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80009e4:	9002      	str	r0, [sp, #8]
 80009e6:	9006      	str	r0, [sp, #24]
 80009e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80009ec:	480a      	ldr	r0, [pc, #40]	@ (8000a18 <siprintf+0x3c>)
 80009ee:	9107      	str	r1, [sp, #28]
 80009f0:	9104      	str	r1, [sp, #16]
 80009f2:	490a      	ldr	r1, [pc, #40]	@ (8000a1c <siprintf+0x40>)
 80009f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80009f8:	9105      	str	r1, [sp, #20]
 80009fa:	2400      	movs	r4, #0
 80009fc:	a902      	add	r1, sp, #8
 80009fe:	6800      	ldr	r0, [r0, #0]
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000a04:	f000 f9a2 	bl	8000d4c <_svfiprintf_r>
 8000a08:	9b02      	ldr	r3, [sp, #8]
 8000a0a:	701c      	strb	r4, [r3, #0]
 8000a0c:	b01d      	add	sp, #116	@ 0x74
 8000a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a12:	b003      	add	sp, #12
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000028 	.word	0x20000028
 8000a1c:	ffff0208 	.word	0xffff0208

08000a20 <memset>:
 8000a20:	4402      	add	r2, r0
 8000a22:	4603      	mov	r3, r0
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d100      	bne.n	8000a2a <memset+0xa>
 8000a28:	4770      	bx	lr
 8000a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8000a2e:	e7f9      	b.n	8000a24 <memset+0x4>

08000a30 <__errno>:
 8000a30:	4b01      	ldr	r3, [pc, #4]	@ (8000a38 <__errno+0x8>)
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000028 	.word	0x20000028

08000a3c <__libc_init_array>:
 8000a3c:	b570      	push	{r4, r5, r6, lr}
 8000a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8000a74 <__libc_init_array+0x38>)
 8000a40:	4c0d      	ldr	r4, [pc, #52]	@ (8000a78 <__libc_init_array+0x3c>)
 8000a42:	1b64      	subs	r4, r4, r5
 8000a44:	10a4      	asrs	r4, r4, #2
 8000a46:	2600      	movs	r6, #0
 8000a48:	42a6      	cmp	r6, r4
 8000a4a:	d109      	bne.n	8000a60 <__libc_init_array+0x24>
 8000a4c:	4d0b      	ldr	r5, [pc, #44]	@ (8000a7c <__libc_init_array+0x40>)
 8000a4e:	4c0c      	ldr	r4, [pc, #48]	@ (8000a80 <__libc_init_array+0x44>)
 8000a50:	f000 fc64 	bl	800131c <_init>
 8000a54:	1b64      	subs	r4, r4, r5
 8000a56:	10a4      	asrs	r4, r4, #2
 8000a58:	2600      	movs	r6, #0
 8000a5a:	42a6      	cmp	r6, r4
 8000a5c:	d105      	bne.n	8000a6a <__libc_init_array+0x2e>
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a64:	4798      	blx	r3
 8000a66:	3601      	adds	r6, #1
 8000a68:	e7ee      	b.n	8000a48 <__libc_init_array+0xc>
 8000a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a6e:	4798      	blx	r3
 8000a70:	3601      	adds	r6, #1
 8000a72:	e7f2      	b.n	8000a5a <__libc_init_array+0x1e>
 8000a74:	080013c4 	.word	0x080013c4
 8000a78:	080013c4 	.word	0x080013c4
 8000a7c:	080013c4 	.word	0x080013c4
 8000a80:	080013c8 	.word	0x080013c8

08000a84 <__retarget_lock_acquire_recursive>:
 8000a84:	4770      	bx	lr

08000a86 <__retarget_lock_release_recursive>:
 8000a86:	4770      	bx	lr

08000a88 <memcpy>:
 8000a88:	440a      	add	r2, r1
 8000a8a:	4291      	cmp	r1, r2
 8000a8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a90:	d100      	bne.n	8000a94 <memcpy+0xc>
 8000a92:	4770      	bx	lr
 8000a94:	b510      	push	{r4, lr}
 8000a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000a9e:	4291      	cmp	r1, r2
 8000aa0:	d1f9      	bne.n	8000a96 <memcpy+0xe>
 8000aa2:	bd10      	pop	{r4, pc}

08000aa4 <_free_r>:
 8000aa4:	b538      	push	{r3, r4, r5, lr}
 8000aa6:	4605      	mov	r5, r0
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	d041      	beq.n	8000b30 <_free_r+0x8c>
 8000aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ab0:	1f0c      	subs	r4, r1, #4
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	bfb8      	it	lt
 8000ab6:	18e4      	addlt	r4, r4, r3
 8000ab8:	f000 f8e0 	bl	8000c7c <__malloc_lock>
 8000abc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b34 <_free_r+0x90>)
 8000abe:	6813      	ldr	r3, [r2, #0]
 8000ac0:	b933      	cbnz	r3, 8000ad0 <_free_r+0x2c>
 8000ac2:	6063      	str	r3, [r4, #4]
 8000ac4:	6014      	str	r4, [r2, #0]
 8000ac6:	4628      	mov	r0, r5
 8000ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000acc:	f000 b8dc 	b.w	8000c88 <__malloc_unlock>
 8000ad0:	42a3      	cmp	r3, r4
 8000ad2:	d908      	bls.n	8000ae6 <_free_r+0x42>
 8000ad4:	6820      	ldr	r0, [r4, #0]
 8000ad6:	1821      	adds	r1, r4, r0
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	bf01      	itttt	eq
 8000adc:	6819      	ldreq	r1, [r3, #0]
 8000ade:	685b      	ldreq	r3, [r3, #4]
 8000ae0:	1809      	addeq	r1, r1, r0
 8000ae2:	6021      	streq	r1, [r4, #0]
 8000ae4:	e7ed      	b.n	8000ac2 <_free_r+0x1e>
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	b10b      	cbz	r3, 8000af0 <_free_r+0x4c>
 8000aec:	42a3      	cmp	r3, r4
 8000aee:	d9fa      	bls.n	8000ae6 <_free_r+0x42>
 8000af0:	6811      	ldr	r1, [r2, #0]
 8000af2:	1850      	adds	r0, r2, r1
 8000af4:	42a0      	cmp	r0, r4
 8000af6:	d10b      	bne.n	8000b10 <_free_r+0x6c>
 8000af8:	6820      	ldr	r0, [r4, #0]
 8000afa:	4401      	add	r1, r0
 8000afc:	1850      	adds	r0, r2, r1
 8000afe:	4283      	cmp	r3, r0
 8000b00:	6011      	str	r1, [r2, #0]
 8000b02:	d1e0      	bne.n	8000ac6 <_free_r+0x22>
 8000b04:	6818      	ldr	r0, [r3, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	6053      	str	r3, [r2, #4]
 8000b0a:	4408      	add	r0, r1
 8000b0c:	6010      	str	r0, [r2, #0]
 8000b0e:	e7da      	b.n	8000ac6 <_free_r+0x22>
 8000b10:	d902      	bls.n	8000b18 <_free_r+0x74>
 8000b12:	230c      	movs	r3, #12
 8000b14:	602b      	str	r3, [r5, #0]
 8000b16:	e7d6      	b.n	8000ac6 <_free_r+0x22>
 8000b18:	6820      	ldr	r0, [r4, #0]
 8000b1a:	1821      	adds	r1, r4, r0
 8000b1c:	428b      	cmp	r3, r1
 8000b1e:	bf04      	itt	eq
 8000b20:	6819      	ldreq	r1, [r3, #0]
 8000b22:	685b      	ldreq	r3, [r3, #4]
 8000b24:	6063      	str	r3, [r4, #4]
 8000b26:	bf04      	itt	eq
 8000b28:	1809      	addeq	r1, r1, r0
 8000b2a:	6021      	streq	r1, [r4, #0]
 8000b2c:	6054      	str	r4, [r2, #4]
 8000b2e:	e7ca      	b.n	8000ac6 <_free_r+0x22>
 8000b30:	bd38      	pop	{r3, r4, r5, pc}
 8000b32:	bf00      	nop
 8000b34:	200001dc 	.word	0x200001dc

08000b38 <sbrk_aligned>:
 8000b38:	b570      	push	{r4, r5, r6, lr}
 8000b3a:	4e0f      	ldr	r6, [pc, #60]	@ (8000b78 <sbrk_aligned+0x40>)
 8000b3c:	460c      	mov	r4, r1
 8000b3e:	6831      	ldr	r1, [r6, #0]
 8000b40:	4605      	mov	r5, r0
 8000b42:	b911      	cbnz	r1, 8000b4a <sbrk_aligned+0x12>
 8000b44:	f000 fba4 	bl	8001290 <_sbrk_r>
 8000b48:	6030      	str	r0, [r6, #0]
 8000b4a:	4621      	mov	r1, r4
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	f000 fb9f 	bl	8001290 <_sbrk_r>
 8000b52:	1c43      	adds	r3, r0, #1
 8000b54:	d103      	bne.n	8000b5e <sbrk_aligned+0x26>
 8000b56:	f04f 34ff 	mov.w	r4, #4294967295
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	bd70      	pop	{r4, r5, r6, pc}
 8000b5e:	1cc4      	adds	r4, r0, #3
 8000b60:	f024 0403 	bic.w	r4, r4, #3
 8000b64:	42a0      	cmp	r0, r4
 8000b66:	d0f8      	beq.n	8000b5a <sbrk_aligned+0x22>
 8000b68:	1a21      	subs	r1, r4, r0
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	f000 fb90 	bl	8001290 <_sbrk_r>
 8000b70:	3001      	adds	r0, #1
 8000b72:	d1f2      	bne.n	8000b5a <sbrk_aligned+0x22>
 8000b74:	e7ef      	b.n	8000b56 <sbrk_aligned+0x1e>
 8000b76:	bf00      	nop
 8000b78:	200001d8 	.word	0x200001d8

08000b7c <_malloc_r>:
 8000b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b80:	1ccd      	adds	r5, r1, #3
 8000b82:	f025 0503 	bic.w	r5, r5, #3
 8000b86:	3508      	adds	r5, #8
 8000b88:	2d0c      	cmp	r5, #12
 8000b8a:	bf38      	it	cc
 8000b8c:	250c      	movcc	r5, #12
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	4606      	mov	r6, r0
 8000b92:	db01      	blt.n	8000b98 <_malloc_r+0x1c>
 8000b94:	42a9      	cmp	r1, r5
 8000b96:	d904      	bls.n	8000ba2 <_malloc_r+0x26>
 8000b98:	230c      	movs	r3, #12
 8000b9a:	6033      	str	r3, [r6, #0]
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ba2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c78 <_malloc_r+0xfc>
 8000ba6:	f000 f869 	bl	8000c7c <__malloc_lock>
 8000baa:	f8d8 3000 	ldr.w	r3, [r8]
 8000bae:	461c      	mov	r4, r3
 8000bb0:	bb44      	cbnz	r4, 8000c04 <_malloc_r+0x88>
 8000bb2:	4629      	mov	r1, r5
 8000bb4:	4630      	mov	r0, r6
 8000bb6:	f7ff ffbf 	bl	8000b38 <sbrk_aligned>
 8000bba:	1c43      	adds	r3, r0, #1
 8000bbc:	4604      	mov	r4, r0
 8000bbe:	d158      	bne.n	8000c72 <_malloc_r+0xf6>
 8000bc0:	f8d8 4000 	ldr.w	r4, [r8]
 8000bc4:	4627      	mov	r7, r4
 8000bc6:	2f00      	cmp	r7, #0
 8000bc8:	d143      	bne.n	8000c52 <_malloc_r+0xd6>
 8000bca:	2c00      	cmp	r4, #0
 8000bcc:	d04b      	beq.n	8000c66 <_malloc_r+0xea>
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	eb04 0903 	add.w	r9, r4, r3
 8000bd8:	f000 fb5a 	bl	8001290 <_sbrk_r>
 8000bdc:	4581      	cmp	r9, r0
 8000bde:	d142      	bne.n	8000c66 <_malloc_r+0xea>
 8000be0:	6821      	ldr	r1, [r4, #0]
 8000be2:	1a6d      	subs	r5, r5, r1
 8000be4:	4629      	mov	r1, r5
 8000be6:	4630      	mov	r0, r6
 8000be8:	f7ff ffa6 	bl	8000b38 <sbrk_aligned>
 8000bec:	3001      	adds	r0, #1
 8000bee:	d03a      	beq.n	8000c66 <_malloc_r+0xea>
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	442b      	add	r3, r5
 8000bf4:	6023      	str	r3, [r4, #0]
 8000bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	bb62      	cbnz	r2, 8000c58 <_malloc_r+0xdc>
 8000bfe:	f8c8 7000 	str.w	r7, [r8]
 8000c02:	e00f      	b.n	8000c24 <_malloc_r+0xa8>
 8000c04:	6822      	ldr	r2, [r4, #0]
 8000c06:	1b52      	subs	r2, r2, r5
 8000c08:	d420      	bmi.n	8000c4c <_malloc_r+0xd0>
 8000c0a:	2a0b      	cmp	r2, #11
 8000c0c:	d917      	bls.n	8000c3e <_malloc_r+0xc2>
 8000c0e:	1961      	adds	r1, r4, r5
 8000c10:	42a3      	cmp	r3, r4
 8000c12:	6025      	str	r5, [r4, #0]
 8000c14:	bf18      	it	ne
 8000c16:	6059      	strne	r1, [r3, #4]
 8000c18:	6863      	ldr	r3, [r4, #4]
 8000c1a:	bf08      	it	eq
 8000c1c:	f8c8 1000 	streq.w	r1, [r8]
 8000c20:	5162      	str	r2, [r4, r5]
 8000c22:	604b      	str	r3, [r1, #4]
 8000c24:	4630      	mov	r0, r6
 8000c26:	f000 f82f 	bl	8000c88 <__malloc_unlock>
 8000c2a:	f104 000b 	add.w	r0, r4, #11
 8000c2e:	1d23      	adds	r3, r4, #4
 8000c30:	f020 0007 	bic.w	r0, r0, #7
 8000c34:	1ac2      	subs	r2, r0, r3
 8000c36:	bf1c      	itt	ne
 8000c38:	1a1b      	subne	r3, r3, r0
 8000c3a:	50a3      	strne	r3, [r4, r2]
 8000c3c:	e7af      	b.n	8000b9e <_malloc_r+0x22>
 8000c3e:	6862      	ldr	r2, [r4, #4]
 8000c40:	42a3      	cmp	r3, r4
 8000c42:	bf0c      	ite	eq
 8000c44:	f8c8 2000 	streq.w	r2, [r8]
 8000c48:	605a      	strne	r2, [r3, #4]
 8000c4a:	e7eb      	b.n	8000c24 <_malloc_r+0xa8>
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	6864      	ldr	r4, [r4, #4]
 8000c50:	e7ae      	b.n	8000bb0 <_malloc_r+0x34>
 8000c52:	463c      	mov	r4, r7
 8000c54:	687f      	ldr	r7, [r7, #4]
 8000c56:	e7b6      	b.n	8000bc6 <_malloc_r+0x4a>
 8000c58:	461a      	mov	r2, r3
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	42a3      	cmp	r3, r4
 8000c5e:	d1fb      	bne.n	8000c58 <_malloc_r+0xdc>
 8000c60:	2300      	movs	r3, #0
 8000c62:	6053      	str	r3, [r2, #4]
 8000c64:	e7de      	b.n	8000c24 <_malloc_r+0xa8>
 8000c66:	230c      	movs	r3, #12
 8000c68:	6033      	str	r3, [r6, #0]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	f000 f80c 	bl	8000c88 <__malloc_unlock>
 8000c70:	e794      	b.n	8000b9c <_malloc_r+0x20>
 8000c72:	6005      	str	r5, [r0, #0]
 8000c74:	e7d6      	b.n	8000c24 <_malloc_r+0xa8>
 8000c76:	bf00      	nop
 8000c78:	200001dc 	.word	0x200001dc

08000c7c <__malloc_lock>:
 8000c7c:	4801      	ldr	r0, [pc, #4]	@ (8000c84 <__malloc_lock+0x8>)
 8000c7e:	f7ff bf01 	b.w	8000a84 <__retarget_lock_acquire_recursive>
 8000c82:	bf00      	nop
 8000c84:	200001d4 	.word	0x200001d4

08000c88 <__malloc_unlock>:
 8000c88:	4801      	ldr	r0, [pc, #4]	@ (8000c90 <__malloc_unlock+0x8>)
 8000c8a:	f7ff befc 	b.w	8000a86 <__retarget_lock_release_recursive>
 8000c8e:	bf00      	nop
 8000c90:	200001d4 	.word	0x200001d4

08000c94 <__ssputs_r>:
 8000c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c98:	688e      	ldr	r6, [r1, #8]
 8000c9a:	461f      	mov	r7, r3
 8000c9c:	42be      	cmp	r6, r7
 8000c9e:	680b      	ldr	r3, [r1, #0]
 8000ca0:	4682      	mov	sl, r0
 8000ca2:	460c      	mov	r4, r1
 8000ca4:	4690      	mov	r8, r2
 8000ca6:	d82d      	bhi.n	8000d04 <__ssputs_r+0x70>
 8000ca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000cac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000cb0:	d026      	beq.n	8000d00 <__ssputs_r+0x6c>
 8000cb2:	6965      	ldr	r5, [r4, #20]
 8000cb4:	6909      	ldr	r1, [r1, #16]
 8000cb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000cba:	eba3 0901 	sub.w	r9, r3, r1
 8000cbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000cc2:	1c7b      	adds	r3, r7, #1
 8000cc4:	444b      	add	r3, r9
 8000cc6:	106d      	asrs	r5, r5, #1
 8000cc8:	429d      	cmp	r5, r3
 8000cca:	bf38      	it	cc
 8000ccc:	461d      	movcc	r5, r3
 8000cce:	0553      	lsls	r3, r2, #21
 8000cd0:	d527      	bpl.n	8000d22 <__ssputs_r+0x8e>
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	f7ff ff52 	bl	8000b7c <_malloc_r>
 8000cd8:	4606      	mov	r6, r0
 8000cda:	b360      	cbz	r0, 8000d36 <__ssputs_r+0xa2>
 8000cdc:	6921      	ldr	r1, [r4, #16]
 8000cde:	464a      	mov	r2, r9
 8000ce0:	f7ff fed2 	bl	8000a88 <memcpy>
 8000ce4:	89a3      	ldrh	r3, [r4, #12]
 8000ce6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cee:	81a3      	strh	r3, [r4, #12]
 8000cf0:	6126      	str	r6, [r4, #16]
 8000cf2:	6165      	str	r5, [r4, #20]
 8000cf4:	444e      	add	r6, r9
 8000cf6:	eba5 0509 	sub.w	r5, r5, r9
 8000cfa:	6026      	str	r6, [r4, #0]
 8000cfc:	60a5      	str	r5, [r4, #8]
 8000cfe:	463e      	mov	r6, r7
 8000d00:	42be      	cmp	r6, r7
 8000d02:	d900      	bls.n	8000d06 <__ssputs_r+0x72>
 8000d04:	463e      	mov	r6, r7
 8000d06:	6820      	ldr	r0, [r4, #0]
 8000d08:	4632      	mov	r2, r6
 8000d0a:	4641      	mov	r1, r8
 8000d0c:	f000 faa6 	bl	800125c <memmove>
 8000d10:	68a3      	ldr	r3, [r4, #8]
 8000d12:	1b9b      	subs	r3, r3, r6
 8000d14:	60a3      	str	r3, [r4, #8]
 8000d16:	6823      	ldr	r3, [r4, #0]
 8000d18:	4433      	add	r3, r6
 8000d1a:	6023      	str	r3, [r4, #0]
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	462a      	mov	r2, r5
 8000d24:	f000 fac4 	bl	80012b0 <_realloc_r>
 8000d28:	4606      	mov	r6, r0
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	d1e0      	bne.n	8000cf0 <__ssputs_r+0x5c>
 8000d2e:	6921      	ldr	r1, [r4, #16]
 8000d30:	4650      	mov	r0, sl
 8000d32:	f7ff feb7 	bl	8000aa4 <_free_r>
 8000d36:	230c      	movs	r3, #12
 8000d38:	f8ca 3000 	str.w	r3, [sl]
 8000d3c:	89a3      	ldrh	r3, [r4, #12]
 8000d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d42:	81a3      	strh	r3, [r4, #12]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	e7e9      	b.n	8000d1e <__ssputs_r+0x8a>
	...

08000d4c <_svfiprintf_r>:
 8000d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d50:	4698      	mov	r8, r3
 8000d52:	898b      	ldrh	r3, [r1, #12]
 8000d54:	061b      	lsls	r3, r3, #24
 8000d56:	b09d      	sub	sp, #116	@ 0x74
 8000d58:	4607      	mov	r7, r0
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4614      	mov	r4, r2
 8000d5e:	d510      	bpl.n	8000d82 <_svfiprintf_r+0x36>
 8000d60:	690b      	ldr	r3, [r1, #16]
 8000d62:	b973      	cbnz	r3, 8000d82 <_svfiprintf_r+0x36>
 8000d64:	2140      	movs	r1, #64	@ 0x40
 8000d66:	f7ff ff09 	bl	8000b7c <_malloc_r>
 8000d6a:	6028      	str	r0, [r5, #0]
 8000d6c:	6128      	str	r0, [r5, #16]
 8000d6e:	b930      	cbnz	r0, 8000d7e <_svfiprintf_r+0x32>
 8000d70:	230c      	movs	r3, #12
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	b01d      	add	sp, #116	@ 0x74
 8000d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d7e:	2340      	movs	r3, #64	@ 0x40
 8000d80:	616b      	str	r3, [r5, #20]
 8000d82:	2300      	movs	r3, #0
 8000d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d86:	2320      	movs	r3, #32
 8000d88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d90:	2330      	movs	r3, #48	@ 0x30
 8000d92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000f30 <_svfiprintf_r+0x1e4>
 8000d96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d9a:	f04f 0901 	mov.w	r9, #1
 8000d9e:	4623      	mov	r3, r4
 8000da0:	469a      	mov	sl, r3
 8000da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000da6:	b10a      	cbz	r2, 8000dac <_svfiprintf_r+0x60>
 8000da8:	2a25      	cmp	r2, #37	@ 0x25
 8000daa:	d1f9      	bne.n	8000da0 <_svfiprintf_r+0x54>
 8000dac:	ebba 0b04 	subs.w	fp, sl, r4
 8000db0:	d00b      	beq.n	8000dca <_svfiprintf_r+0x7e>
 8000db2:	465b      	mov	r3, fp
 8000db4:	4622      	mov	r2, r4
 8000db6:	4629      	mov	r1, r5
 8000db8:	4638      	mov	r0, r7
 8000dba:	f7ff ff6b 	bl	8000c94 <__ssputs_r>
 8000dbe:	3001      	adds	r0, #1
 8000dc0:	f000 80a7 	beq.w	8000f12 <_svfiprintf_r+0x1c6>
 8000dc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000dc6:	445a      	add	r2, fp
 8000dc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8000dca:	f89a 3000 	ldrb.w	r3, [sl]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 809f 	beq.w	8000f12 <_svfiprintf_r+0x1c6>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000dde:	f10a 0a01 	add.w	sl, sl, #1
 8000de2:	9304      	str	r3, [sp, #16]
 8000de4:	9307      	str	r3, [sp, #28]
 8000de6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000dea:	931a      	str	r3, [sp, #104]	@ 0x68
 8000dec:	4654      	mov	r4, sl
 8000dee:	2205      	movs	r2, #5
 8000df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000df4:	484e      	ldr	r0, [pc, #312]	@ (8000f30 <_svfiprintf_r+0x1e4>)
 8000df6:	f7ff f9f3 	bl	80001e0 <memchr>
 8000dfa:	9a04      	ldr	r2, [sp, #16]
 8000dfc:	b9d8      	cbnz	r0, 8000e36 <_svfiprintf_r+0xea>
 8000dfe:	06d0      	lsls	r0, r2, #27
 8000e00:	bf44      	itt	mi
 8000e02:	2320      	movmi	r3, #32
 8000e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e08:	0711      	lsls	r1, r2, #28
 8000e0a:	bf44      	itt	mi
 8000e0c:	232b      	movmi	r3, #43	@ 0x2b
 8000e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e12:	f89a 3000 	ldrb.w	r3, [sl]
 8000e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e18:	d015      	beq.n	8000e46 <_svfiprintf_r+0xfa>
 8000e1a:	9a07      	ldr	r2, [sp, #28]
 8000e1c:	4654      	mov	r4, sl
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f04f 0c0a 	mov.w	ip, #10
 8000e24:	4621      	mov	r1, r4
 8000e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e2a:	3b30      	subs	r3, #48	@ 0x30
 8000e2c:	2b09      	cmp	r3, #9
 8000e2e:	d94b      	bls.n	8000ec8 <_svfiprintf_r+0x17c>
 8000e30:	b1b0      	cbz	r0, 8000e60 <_svfiprintf_r+0x114>
 8000e32:	9207      	str	r2, [sp, #28]
 8000e34:	e014      	b.n	8000e60 <_svfiprintf_r+0x114>
 8000e36:	eba0 0308 	sub.w	r3, r0, r8
 8000e3a:	fa09 f303 	lsl.w	r3, r9, r3
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	9304      	str	r3, [sp, #16]
 8000e42:	46a2      	mov	sl, r4
 8000e44:	e7d2      	b.n	8000dec <_svfiprintf_r+0xa0>
 8000e46:	9b03      	ldr	r3, [sp, #12]
 8000e48:	1d19      	adds	r1, r3, #4
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	9103      	str	r1, [sp, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	bfbb      	ittet	lt
 8000e52:	425b      	neglt	r3, r3
 8000e54:	f042 0202 	orrlt.w	r2, r2, #2
 8000e58:	9307      	strge	r3, [sp, #28]
 8000e5a:	9307      	strlt	r3, [sp, #28]
 8000e5c:	bfb8      	it	lt
 8000e5e:	9204      	strlt	r2, [sp, #16]
 8000e60:	7823      	ldrb	r3, [r4, #0]
 8000e62:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e64:	d10a      	bne.n	8000e7c <_svfiprintf_r+0x130>
 8000e66:	7863      	ldrb	r3, [r4, #1]
 8000e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e6a:	d132      	bne.n	8000ed2 <_svfiprintf_r+0x186>
 8000e6c:	9b03      	ldr	r3, [sp, #12]
 8000e6e:	1d1a      	adds	r2, r3, #4
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	9203      	str	r2, [sp, #12]
 8000e74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e78:	3402      	adds	r4, #2
 8000e7a:	9305      	str	r3, [sp, #20]
 8000e7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000f40 <_svfiprintf_r+0x1f4>
 8000e80:	7821      	ldrb	r1, [r4, #0]
 8000e82:	2203      	movs	r2, #3
 8000e84:	4650      	mov	r0, sl
 8000e86:	f7ff f9ab 	bl	80001e0 <memchr>
 8000e8a:	b138      	cbz	r0, 8000e9c <_svfiprintf_r+0x150>
 8000e8c:	9b04      	ldr	r3, [sp, #16]
 8000e8e:	eba0 000a 	sub.w	r0, r0, sl
 8000e92:	2240      	movs	r2, #64	@ 0x40
 8000e94:	4082      	lsls	r2, r0
 8000e96:	4313      	orrs	r3, r2
 8000e98:	3401      	adds	r4, #1
 8000e9a:	9304      	str	r3, [sp, #16]
 8000e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ea0:	4824      	ldr	r0, [pc, #144]	@ (8000f34 <_svfiprintf_r+0x1e8>)
 8000ea2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000ea6:	2206      	movs	r2, #6
 8000ea8:	f7ff f99a 	bl	80001e0 <memchr>
 8000eac:	2800      	cmp	r0, #0
 8000eae:	d036      	beq.n	8000f1e <_svfiprintf_r+0x1d2>
 8000eb0:	4b21      	ldr	r3, [pc, #132]	@ (8000f38 <_svfiprintf_r+0x1ec>)
 8000eb2:	bb1b      	cbnz	r3, 8000efc <_svfiprintf_r+0x1b0>
 8000eb4:	9b03      	ldr	r3, [sp, #12]
 8000eb6:	3307      	adds	r3, #7
 8000eb8:	f023 0307 	bic.w	r3, r3, #7
 8000ebc:	3308      	adds	r3, #8
 8000ebe:	9303      	str	r3, [sp, #12]
 8000ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ec2:	4433      	add	r3, r6
 8000ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ec6:	e76a      	b.n	8000d9e <_svfiprintf_r+0x52>
 8000ec8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ecc:	460c      	mov	r4, r1
 8000ece:	2001      	movs	r0, #1
 8000ed0:	e7a8      	b.n	8000e24 <_svfiprintf_r+0xd8>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	3401      	adds	r4, #1
 8000ed6:	9305      	str	r3, [sp, #20]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f04f 0c0a 	mov.w	ip, #10
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ee4:	3a30      	subs	r2, #48	@ 0x30
 8000ee6:	2a09      	cmp	r2, #9
 8000ee8:	d903      	bls.n	8000ef2 <_svfiprintf_r+0x1a6>
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0c6      	beq.n	8000e7c <_svfiprintf_r+0x130>
 8000eee:	9105      	str	r1, [sp, #20]
 8000ef0:	e7c4      	b.n	8000e7c <_svfiprintf_r+0x130>
 8000ef2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e7f0      	b.n	8000ede <_svfiprintf_r+0x192>
 8000efc:	ab03      	add	r3, sp, #12
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	462a      	mov	r2, r5
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <_svfiprintf_r+0x1f0>)
 8000f04:	a904      	add	r1, sp, #16
 8000f06:	4638      	mov	r0, r7
 8000f08:	f3af 8000 	nop.w
 8000f0c:	1c42      	adds	r2, r0, #1
 8000f0e:	4606      	mov	r6, r0
 8000f10:	d1d6      	bne.n	8000ec0 <_svfiprintf_r+0x174>
 8000f12:	89ab      	ldrh	r3, [r5, #12]
 8000f14:	065b      	lsls	r3, r3, #25
 8000f16:	f53f af2d 	bmi.w	8000d74 <_svfiprintf_r+0x28>
 8000f1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f1c:	e72c      	b.n	8000d78 <_svfiprintf_r+0x2c>
 8000f1e:	ab03      	add	r3, sp, #12
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	462a      	mov	r2, r5
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <_svfiprintf_r+0x1f0>)
 8000f26:	a904      	add	r1, sp, #16
 8000f28:	4638      	mov	r0, r7
 8000f2a:	f000 f879 	bl	8001020 <_printf_i>
 8000f2e:	e7ed      	b.n	8000f0c <_svfiprintf_r+0x1c0>
 8000f30:	08001387 	.word	0x08001387
 8000f34:	08001391 	.word	0x08001391
 8000f38:	00000000 	.word	0x00000000
 8000f3c:	08000c95 	.word	0x08000c95
 8000f40:	0800138d 	.word	0x0800138d

08000f44 <_printf_common>:
 8000f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f48:	4616      	mov	r6, r2
 8000f4a:	4698      	mov	r8, r3
 8000f4c:	688a      	ldr	r2, [r1, #8]
 8000f4e:	690b      	ldr	r3, [r1, #16]
 8000f50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f54:	4293      	cmp	r3, r2
 8000f56:	bfb8      	it	lt
 8000f58:	4613      	movlt	r3, r2
 8000f5a:	6033      	str	r3, [r6, #0]
 8000f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f60:	4607      	mov	r7, r0
 8000f62:	460c      	mov	r4, r1
 8000f64:	b10a      	cbz	r2, 8000f6a <_printf_common+0x26>
 8000f66:	3301      	adds	r3, #1
 8000f68:	6033      	str	r3, [r6, #0]
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	0699      	lsls	r1, r3, #26
 8000f6e:	bf42      	ittt	mi
 8000f70:	6833      	ldrmi	r3, [r6, #0]
 8000f72:	3302      	addmi	r3, #2
 8000f74:	6033      	strmi	r3, [r6, #0]
 8000f76:	6825      	ldr	r5, [r4, #0]
 8000f78:	f015 0506 	ands.w	r5, r5, #6
 8000f7c:	d106      	bne.n	8000f8c <_printf_common+0x48>
 8000f7e:	f104 0a19 	add.w	sl, r4, #25
 8000f82:	68e3      	ldr	r3, [r4, #12]
 8000f84:	6832      	ldr	r2, [r6, #0]
 8000f86:	1a9b      	subs	r3, r3, r2
 8000f88:	42ab      	cmp	r3, r5
 8000f8a:	dc26      	bgt.n	8000fda <_printf_common+0x96>
 8000f8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f90:	6822      	ldr	r2, [r4, #0]
 8000f92:	3b00      	subs	r3, #0
 8000f94:	bf18      	it	ne
 8000f96:	2301      	movne	r3, #1
 8000f98:	0692      	lsls	r2, r2, #26
 8000f9a:	d42b      	bmi.n	8000ff4 <_printf_common+0xb0>
 8000f9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000fa0:	4641      	mov	r1, r8
 8000fa2:	4638      	mov	r0, r7
 8000fa4:	47c8      	blx	r9
 8000fa6:	3001      	adds	r0, #1
 8000fa8:	d01e      	beq.n	8000fe8 <_printf_common+0xa4>
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	6922      	ldr	r2, [r4, #16]
 8000fae:	f003 0306 	and.w	r3, r3, #6
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf02      	ittt	eq
 8000fb6:	68e5      	ldreq	r5, [r4, #12]
 8000fb8:	6833      	ldreq	r3, [r6, #0]
 8000fba:	1aed      	subeq	r5, r5, r3
 8000fbc:	68a3      	ldr	r3, [r4, #8]
 8000fbe:	bf0c      	ite	eq
 8000fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fc4:	2500      	movne	r5, #0
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	bfc4      	itt	gt
 8000fca:	1a9b      	subgt	r3, r3, r2
 8000fcc:	18ed      	addgt	r5, r5, r3
 8000fce:	2600      	movs	r6, #0
 8000fd0:	341a      	adds	r4, #26
 8000fd2:	42b5      	cmp	r5, r6
 8000fd4:	d11a      	bne.n	800100c <_printf_common+0xc8>
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	e008      	b.n	8000fec <_printf_common+0xa8>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	4652      	mov	r2, sl
 8000fde:	4641      	mov	r1, r8
 8000fe0:	4638      	mov	r0, r7
 8000fe2:	47c8      	blx	r9
 8000fe4:	3001      	adds	r0, #1
 8000fe6:	d103      	bne.n	8000ff0 <_printf_common+0xac>
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff0:	3501      	adds	r5, #1
 8000ff2:	e7c6      	b.n	8000f82 <_printf_common+0x3e>
 8000ff4:	18e1      	adds	r1, r4, r3
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	2030      	movs	r0, #48	@ 0x30
 8000ffa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000ffe:	4422      	add	r2, r4
 8001000:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001004:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001008:	3302      	adds	r3, #2
 800100a:	e7c7      	b.n	8000f9c <_printf_common+0x58>
 800100c:	2301      	movs	r3, #1
 800100e:	4622      	mov	r2, r4
 8001010:	4641      	mov	r1, r8
 8001012:	4638      	mov	r0, r7
 8001014:	47c8      	blx	r9
 8001016:	3001      	adds	r0, #1
 8001018:	d0e6      	beq.n	8000fe8 <_printf_common+0xa4>
 800101a:	3601      	adds	r6, #1
 800101c:	e7d9      	b.n	8000fd2 <_printf_common+0x8e>
	...

08001020 <_printf_i>:
 8001020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	7e0f      	ldrb	r7, [r1, #24]
 8001026:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001028:	2f78      	cmp	r7, #120	@ 0x78
 800102a:	4691      	mov	r9, r2
 800102c:	4680      	mov	r8, r0
 800102e:	460c      	mov	r4, r1
 8001030:	469a      	mov	sl, r3
 8001032:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001036:	d807      	bhi.n	8001048 <_printf_i+0x28>
 8001038:	2f62      	cmp	r7, #98	@ 0x62
 800103a:	d80a      	bhi.n	8001052 <_printf_i+0x32>
 800103c:	2f00      	cmp	r7, #0
 800103e:	f000 80d1 	beq.w	80011e4 <_printf_i+0x1c4>
 8001042:	2f58      	cmp	r7, #88	@ 0x58
 8001044:	f000 80b8 	beq.w	80011b8 <_printf_i+0x198>
 8001048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800104c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001050:	e03a      	b.n	80010c8 <_printf_i+0xa8>
 8001052:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001056:	2b15      	cmp	r3, #21
 8001058:	d8f6      	bhi.n	8001048 <_printf_i+0x28>
 800105a:	a101      	add	r1, pc, #4	@ (adr r1, 8001060 <_printf_i+0x40>)
 800105c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001060:	080010b9 	.word	0x080010b9
 8001064:	080010cd 	.word	0x080010cd
 8001068:	08001049 	.word	0x08001049
 800106c:	08001049 	.word	0x08001049
 8001070:	08001049 	.word	0x08001049
 8001074:	08001049 	.word	0x08001049
 8001078:	080010cd 	.word	0x080010cd
 800107c:	08001049 	.word	0x08001049
 8001080:	08001049 	.word	0x08001049
 8001084:	08001049 	.word	0x08001049
 8001088:	08001049 	.word	0x08001049
 800108c:	080011cb 	.word	0x080011cb
 8001090:	080010f7 	.word	0x080010f7
 8001094:	08001185 	.word	0x08001185
 8001098:	08001049 	.word	0x08001049
 800109c:	08001049 	.word	0x08001049
 80010a0:	080011ed 	.word	0x080011ed
 80010a4:	08001049 	.word	0x08001049
 80010a8:	080010f7 	.word	0x080010f7
 80010ac:	08001049 	.word	0x08001049
 80010b0:	08001049 	.word	0x08001049
 80010b4:	0800118d 	.word	0x0800118d
 80010b8:	6833      	ldr	r3, [r6, #0]
 80010ba:	1d1a      	adds	r2, r3, #4
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6032      	str	r2, [r6, #0]
 80010c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80010c8:	2301      	movs	r3, #1
 80010ca:	e09c      	b.n	8001206 <_printf_i+0x1e6>
 80010cc:	6833      	ldr	r3, [r6, #0]
 80010ce:	6820      	ldr	r0, [r4, #0]
 80010d0:	1d19      	adds	r1, r3, #4
 80010d2:	6031      	str	r1, [r6, #0]
 80010d4:	0606      	lsls	r6, r0, #24
 80010d6:	d501      	bpl.n	80010dc <_printf_i+0xbc>
 80010d8:	681d      	ldr	r5, [r3, #0]
 80010da:	e003      	b.n	80010e4 <_printf_i+0xc4>
 80010dc:	0645      	lsls	r5, r0, #25
 80010de:	d5fb      	bpl.n	80010d8 <_printf_i+0xb8>
 80010e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80010e4:	2d00      	cmp	r5, #0
 80010e6:	da03      	bge.n	80010f0 <_printf_i+0xd0>
 80010e8:	232d      	movs	r3, #45	@ 0x2d
 80010ea:	426d      	negs	r5, r5
 80010ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010f0:	4858      	ldr	r0, [pc, #352]	@ (8001254 <_printf_i+0x234>)
 80010f2:	230a      	movs	r3, #10
 80010f4:	e011      	b.n	800111a <_printf_i+0xfa>
 80010f6:	6821      	ldr	r1, [r4, #0]
 80010f8:	6833      	ldr	r3, [r6, #0]
 80010fa:	0608      	lsls	r0, r1, #24
 80010fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8001100:	d402      	bmi.n	8001108 <_printf_i+0xe8>
 8001102:	0649      	lsls	r1, r1, #25
 8001104:	bf48      	it	mi
 8001106:	b2ad      	uxthmi	r5, r5
 8001108:	2f6f      	cmp	r7, #111	@ 0x6f
 800110a:	4852      	ldr	r0, [pc, #328]	@ (8001254 <_printf_i+0x234>)
 800110c:	6033      	str	r3, [r6, #0]
 800110e:	bf14      	ite	ne
 8001110:	230a      	movne	r3, #10
 8001112:	2308      	moveq	r3, #8
 8001114:	2100      	movs	r1, #0
 8001116:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800111a:	6866      	ldr	r6, [r4, #4]
 800111c:	60a6      	str	r6, [r4, #8]
 800111e:	2e00      	cmp	r6, #0
 8001120:	db05      	blt.n	800112e <_printf_i+0x10e>
 8001122:	6821      	ldr	r1, [r4, #0]
 8001124:	432e      	orrs	r6, r5
 8001126:	f021 0104 	bic.w	r1, r1, #4
 800112a:	6021      	str	r1, [r4, #0]
 800112c:	d04b      	beq.n	80011c6 <_printf_i+0x1a6>
 800112e:	4616      	mov	r6, r2
 8001130:	fbb5 f1f3 	udiv	r1, r5, r3
 8001134:	fb03 5711 	mls	r7, r3, r1, r5
 8001138:	5dc7      	ldrb	r7, [r0, r7]
 800113a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800113e:	462f      	mov	r7, r5
 8001140:	42bb      	cmp	r3, r7
 8001142:	460d      	mov	r5, r1
 8001144:	d9f4      	bls.n	8001130 <_printf_i+0x110>
 8001146:	2b08      	cmp	r3, #8
 8001148:	d10b      	bne.n	8001162 <_printf_i+0x142>
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	07df      	lsls	r7, r3, #31
 800114e:	d508      	bpl.n	8001162 <_printf_i+0x142>
 8001150:	6923      	ldr	r3, [r4, #16]
 8001152:	6861      	ldr	r1, [r4, #4]
 8001154:	4299      	cmp	r1, r3
 8001156:	bfde      	ittt	le
 8001158:	2330      	movle	r3, #48	@ 0x30
 800115a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800115e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001162:	1b92      	subs	r2, r2, r6
 8001164:	6122      	str	r2, [r4, #16]
 8001166:	f8cd a000 	str.w	sl, [sp]
 800116a:	464b      	mov	r3, r9
 800116c:	aa03      	add	r2, sp, #12
 800116e:	4621      	mov	r1, r4
 8001170:	4640      	mov	r0, r8
 8001172:	f7ff fee7 	bl	8000f44 <_printf_common>
 8001176:	3001      	adds	r0, #1
 8001178:	d14a      	bne.n	8001210 <_printf_i+0x1f0>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	b004      	add	sp, #16
 8001180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	f043 0320 	orr.w	r3, r3, #32
 800118a:	6023      	str	r3, [r4, #0]
 800118c:	4832      	ldr	r0, [pc, #200]	@ (8001258 <_printf_i+0x238>)
 800118e:	2778      	movs	r7, #120	@ 0x78
 8001190:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001194:	6823      	ldr	r3, [r4, #0]
 8001196:	6831      	ldr	r1, [r6, #0]
 8001198:	061f      	lsls	r7, r3, #24
 800119a:	f851 5b04 	ldr.w	r5, [r1], #4
 800119e:	d402      	bmi.n	80011a6 <_printf_i+0x186>
 80011a0:	065f      	lsls	r7, r3, #25
 80011a2:	bf48      	it	mi
 80011a4:	b2ad      	uxthmi	r5, r5
 80011a6:	6031      	str	r1, [r6, #0]
 80011a8:	07d9      	lsls	r1, r3, #31
 80011aa:	bf44      	itt	mi
 80011ac:	f043 0320 	orrmi.w	r3, r3, #32
 80011b0:	6023      	strmi	r3, [r4, #0]
 80011b2:	b11d      	cbz	r5, 80011bc <_printf_i+0x19c>
 80011b4:	2310      	movs	r3, #16
 80011b6:	e7ad      	b.n	8001114 <_printf_i+0xf4>
 80011b8:	4826      	ldr	r0, [pc, #152]	@ (8001254 <_printf_i+0x234>)
 80011ba:	e7e9      	b.n	8001190 <_printf_i+0x170>
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	f023 0320 	bic.w	r3, r3, #32
 80011c2:	6023      	str	r3, [r4, #0]
 80011c4:	e7f6      	b.n	80011b4 <_printf_i+0x194>
 80011c6:	4616      	mov	r6, r2
 80011c8:	e7bd      	b.n	8001146 <_printf_i+0x126>
 80011ca:	6833      	ldr	r3, [r6, #0]
 80011cc:	6825      	ldr	r5, [r4, #0]
 80011ce:	6961      	ldr	r1, [r4, #20]
 80011d0:	1d18      	adds	r0, r3, #4
 80011d2:	6030      	str	r0, [r6, #0]
 80011d4:	062e      	lsls	r6, r5, #24
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	d501      	bpl.n	80011de <_printf_i+0x1be>
 80011da:	6019      	str	r1, [r3, #0]
 80011dc:	e002      	b.n	80011e4 <_printf_i+0x1c4>
 80011de:	0668      	lsls	r0, r5, #25
 80011e0:	d5fb      	bpl.n	80011da <_printf_i+0x1ba>
 80011e2:	8019      	strh	r1, [r3, #0]
 80011e4:	2300      	movs	r3, #0
 80011e6:	6123      	str	r3, [r4, #16]
 80011e8:	4616      	mov	r6, r2
 80011ea:	e7bc      	b.n	8001166 <_printf_i+0x146>
 80011ec:	6833      	ldr	r3, [r6, #0]
 80011ee:	1d1a      	adds	r2, r3, #4
 80011f0:	6032      	str	r2, [r6, #0]
 80011f2:	681e      	ldr	r6, [r3, #0]
 80011f4:	6862      	ldr	r2, [r4, #4]
 80011f6:	2100      	movs	r1, #0
 80011f8:	4630      	mov	r0, r6
 80011fa:	f7fe fff1 	bl	80001e0 <memchr>
 80011fe:	b108      	cbz	r0, 8001204 <_printf_i+0x1e4>
 8001200:	1b80      	subs	r0, r0, r6
 8001202:	6060      	str	r0, [r4, #4]
 8001204:	6863      	ldr	r3, [r4, #4]
 8001206:	6123      	str	r3, [r4, #16]
 8001208:	2300      	movs	r3, #0
 800120a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800120e:	e7aa      	b.n	8001166 <_printf_i+0x146>
 8001210:	6923      	ldr	r3, [r4, #16]
 8001212:	4632      	mov	r2, r6
 8001214:	4649      	mov	r1, r9
 8001216:	4640      	mov	r0, r8
 8001218:	47d0      	blx	sl
 800121a:	3001      	adds	r0, #1
 800121c:	d0ad      	beq.n	800117a <_printf_i+0x15a>
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	079b      	lsls	r3, r3, #30
 8001222:	d413      	bmi.n	800124c <_printf_i+0x22c>
 8001224:	68e0      	ldr	r0, [r4, #12]
 8001226:	9b03      	ldr	r3, [sp, #12]
 8001228:	4298      	cmp	r0, r3
 800122a:	bfb8      	it	lt
 800122c:	4618      	movlt	r0, r3
 800122e:	e7a6      	b.n	800117e <_printf_i+0x15e>
 8001230:	2301      	movs	r3, #1
 8001232:	4632      	mov	r2, r6
 8001234:	4649      	mov	r1, r9
 8001236:	4640      	mov	r0, r8
 8001238:	47d0      	blx	sl
 800123a:	3001      	adds	r0, #1
 800123c:	d09d      	beq.n	800117a <_printf_i+0x15a>
 800123e:	3501      	adds	r5, #1
 8001240:	68e3      	ldr	r3, [r4, #12]
 8001242:	9903      	ldr	r1, [sp, #12]
 8001244:	1a5b      	subs	r3, r3, r1
 8001246:	42ab      	cmp	r3, r5
 8001248:	dcf2      	bgt.n	8001230 <_printf_i+0x210>
 800124a:	e7eb      	b.n	8001224 <_printf_i+0x204>
 800124c:	2500      	movs	r5, #0
 800124e:	f104 0619 	add.w	r6, r4, #25
 8001252:	e7f5      	b.n	8001240 <_printf_i+0x220>
 8001254:	08001398 	.word	0x08001398
 8001258:	080013a9 	.word	0x080013a9

0800125c <memmove>:
 800125c:	4288      	cmp	r0, r1
 800125e:	b510      	push	{r4, lr}
 8001260:	eb01 0402 	add.w	r4, r1, r2
 8001264:	d902      	bls.n	800126c <memmove+0x10>
 8001266:	4284      	cmp	r4, r0
 8001268:	4623      	mov	r3, r4
 800126a:	d807      	bhi.n	800127c <memmove+0x20>
 800126c:	1e43      	subs	r3, r0, #1
 800126e:	42a1      	cmp	r1, r4
 8001270:	d008      	beq.n	8001284 <memmove+0x28>
 8001272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800127a:	e7f8      	b.n	800126e <memmove+0x12>
 800127c:	4402      	add	r2, r0
 800127e:	4601      	mov	r1, r0
 8001280:	428a      	cmp	r2, r1
 8001282:	d100      	bne.n	8001286 <memmove+0x2a>
 8001284:	bd10      	pop	{r4, pc}
 8001286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800128a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800128e:	e7f7      	b.n	8001280 <memmove+0x24>

08001290 <_sbrk_r>:
 8001290:	b538      	push	{r3, r4, r5, lr}
 8001292:	4d06      	ldr	r5, [pc, #24]	@ (80012ac <_sbrk_r+0x1c>)
 8001294:	2300      	movs	r3, #0
 8001296:	4604      	mov	r4, r0
 8001298:	4608      	mov	r0, r1
 800129a:	602b      	str	r3, [r5, #0]
 800129c:	f7ff fb3e 	bl	800091c <_sbrk>
 80012a0:	1c43      	adds	r3, r0, #1
 80012a2:	d102      	bne.n	80012aa <_sbrk_r+0x1a>
 80012a4:	682b      	ldr	r3, [r5, #0]
 80012a6:	b103      	cbz	r3, 80012aa <_sbrk_r+0x1a>
 80012a8:	6023      	str	r3, [r4, #0]
 80012aa:	bd38      	pop	{r3, r4, r5, pc}
 80012ac:	200001d0 	.word	0x200001d0

080012b0 <_realloc_r>:
 80012b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b4:	4607      	mov	r7, r0
 80012b6:	4614      	mov	r4, r2
 80012b8:	460d      	mov	r5, r1
 80012ba:	b921      	cbnz	r1, 80012c6 <_realloc_r+0x16>
 80012bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012c0:	4611      	mov	r1, r2
 80012c2:	f7ff bc5b 	b.w	8000b7c <_malloc_r>
 80012c6:	b92a      	cbnz	r2, 80012d4 <_realloc_r+0x24>
 80012c8:	f7ff fbec 	bl	8000aa4 <_free_r>
 80012cc:	4625      	mov	r5, r4
 80012ce:	4628      	mov	r0, r5
 80012d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012d4:	f000 f81a 	bl	800130c <_malloc_usable_size_r>
 80012d8:	4284      	cmp	r4, r0
 80012da:	4606      	mov	r6, r0
 80012dc:	d802      	bhi.n	80012e4 <_realloc_r+0x34>
 80012de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80012e2:	d8f4      	bhi.n	80012ce <_realloc_r+0x1e>
 80012e4:	4621      	mov	r1, r4
 80012e6:	4638      	mov	r0, r7
 80012e8:	f7ff fc48 	bl	8000b7c <_malloc_r>
 80012ec:	4680      	mov	r8, r0
 80012ee:	b908      	cbnz	r0, 80012f4 <_realloc_r+0x44>
 80012f0:	4645      	mov	r5, r8
 80012f2:	e7ec      	b.n	80012ce <_realloc_r+0x1e>
 80012f4:	42b4      	cmp	r4, r6
 80012f6:	4622      	mov	r2, r4
 80012f8:	4629      	mov	r1, r5
 80012fa:	bf28      	it	cs
 80012fc:	4632      	movcs	r2, r6
 80012fe:	f7ff fbc3 	bl	8000a88 <memcpy>
 8001302:	4629      	mov	r1, r5
 8001304:	4638      	mov	r0, r7
 8001306:	f7ff fbcd 	bl	8000aa4 <_free_r>
 800130a:	e7f1      	b.n	80012f0 <_realloc_r+0x40>

0800130c <_malloc_usable_size_r>:
 800130c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001310:	1f18      	subs	r0, r3, #4
 8001312:	2b00      	cmp	r3, #0
 8001314:	bfbc      	itt	lt
 8001316:	580b      	ldrlt	r3, [r1, r0]
 8001318:	18c0      	addlt	r0, r0, r3
 800131a:	4770      	bx	lr

0800131c <_init>:
 800131c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800131e:	bf00      	nop
 8001320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001322:	bc08      	pop	{r3}
 8001324:	469e      	mov	lr, r3
 8001326:	4770      	bx	lr

08001328 <_fini>:
 8001328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132a:	bf00      	nop
 800132c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800132e:	bc08      	pop	{r3}
 8001330:	469e      	mov	lr, r3
 8001332:	4770      	bx	lr
