
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f20  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080010c0  080010c0  000020c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001148  08001148  00003078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001148  08001148  00002148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001150  08001150  00003078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001150  08001150  00002150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001154  08001154  00002154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08001158  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003078  2**0
                  CONTENTS
 10 .bss          00000168  20000078  20000078  00003078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e0  200001e0  00003078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e7f  00000000  00000000  000030a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004de  00000000  00000000  00003f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  00004408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000009e  00000000  00000000  000044f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000150d6  00000000  00000000  0000458e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000145e  00000000  00000000  00019664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075f73  00000000  00000000  0001aac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00090a35  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007d0  00000000  00000000  00090a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00091248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080010a8 	.word	0x080010a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080010a8 	.word	0x080010a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <delay>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(volatile uint32_t ms) {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    // This assumes the CPU is running at around 72 MHz
    // Adjust 8000 for more/less precise timing
    for (volatile uint32_t i = 0; i < ms * 8000; i++) {
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	e003      	b.n	8000296 <delay+0x16>
        __NOP(); // Assembly NOP (No Operation) instruction
 800028e:	bf00      	nop
    for (volatile uint32_t i = 0; i < ms * 8000; i++) {
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	3301      	adds	r3, #1
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800029c:	fb03 f202 	mul.w	r2, r3, r2
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d8f3      	bhi.n	800028e <delay+0xe>
    }
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr

080002b4 <enable_clocks>:


// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80002b8:	4b05      	ldr	r3, [pc, #20]	@ (80002d0 <enable_clocks+0x1c>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	4a04      	ldr	r2, [pc, #16]	@ (80002d0 <enable_clocks+0x1c>)
 80002be:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80002c2:	6153      	str	r3, [r2, #20]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40021000 	.word	0x40021000

080002d4 <initialise_board>:

// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80002da:	4b0a      	ldr	r3, [pc, #40]	@ (8000304 <initialise_board+0x30>)
 80002dc:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f245 5255 	movw	r2, #21845	@ 0x5555
 80002e4:	801a      	strh	r2, [r3, #0]
	GPIOA->MODER |= (3 << (1 * 2)) | (3 << (2 * 2)) | (3 << (3 * 2));
 80002e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002f0:	f043 03fc 	orr.w	r3, r3, #252	@ 0xfc
 80002f4:	6013      	str	r3, [r2, #0]
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	48001002 	.word	0x48001002

08000308 <ADC_Init>:


void ADC_Init(void) {
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
    // Enable ADC1 clock
    RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 800030e:	4b3f      	ldr	r3, [pc, #252]	@ (800040c <ADC_Init+0x104>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a3e      	ldr	r2, [pc, #248]	@ (800040c <ADC_Init+0x104>)
 8000314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000318:	6153      	str	r3, [r2, #20]

    // Sync ADC clock with AHB
    ADC12_COMMON->CCR |= ADC12_CCR_CKMODE_0;
 800031a:	4b3d      	ldr	r3, [pc, #244]	@ (8000410 <ADC_Init+0x108>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	4a3c      	ldr	r2, [pc, #240]	@ (8000410 <ADC_Init+0x108>)
 8000320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000324:	6093      	str	r3, [r2, #8]

    // Enable ADC voltage regulator
    ADC1->CR &= ~ADC_CR_ADVREGEN;
 8000326:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000330:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000334:	6093      	str	r3, [r2, #8]
    ADC1->CR |= ADC_CR_ADVREGEN_0;
 8000336:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000344:	6093      	str	r3, [r2, #8]
    for (volatile int i = 0; i < 1000; i++); // Small delay for regulator startup
 8000346:	2300      	movs	r3, #0
 8000348:	607b      	str	r3, [r7, #4]
 800034a:	e002      	b.n	8000352 <ADC_Init+0x4a>
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	3301      	adds	r3, #1
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000358:	dbf8      	blt.n	800034c <ADC_Init+0x44>

    // Set single-ended input
    ADC1->CR &= ~ADC_CR_ADCALDIF;
 800035a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000364:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000368:	6093      	str	r3, [r2, #8]

    // Calibrate
    ADC1->CR |= ADC_CR_ADCAL;
 800036a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000374:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000378:	6093      	str	r3, [r2, #8]
    while (ADC1->CR & ADC_CR_ADCAL);
 800037a:	bf00      	nop
 800037c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	2b00      	cmp	r3, #0
 8000384:	dbfa      	blt.n	800037c <ADC_Init+0x74>
    // ADC1->SMPR1 |= (7U << ADC_SMPR1_SMP2_Pos); // CH2
    // ADC1->SMPR1 |= (7U << ADC_SMPR1_SMP3_Pos); // CH3
    // ADC1->SMPR1 |= (7U << ADC_SMPR1_SMP4_Pos); // CH4

    // Set conversion sequence: CH2 → CH3 → CH4
    ADC1->SQR1 = 0;
 8000386:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800038a:	2200      	movs	r2, #0
 800038c:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC1->SQR1 |= (0x02 << ADC_SQR1_SQ1_Pos); // CH2
 800038e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000394:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800039c:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC1->SQR1 |= (0x03 << ADC_SQR1_SQ2_Pos); // CH3
 800039e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003a8:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80003ac:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC1->SQR1 |= (0x04 << ADC_SQR1_SQ3_Pos); // CH4
 80003ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003bc:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC1->SQR1 |= (2 << ADC_SQR1_L_Pos);      // L = 2 → 3 conversions
 80003be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003c8:	f043 0302 	orr.w	r3, r3, #2
 80003cc:	6313      	str	r3, [r2, #48]	@ 0x30

    // Single-shot mode
    ADC1->CFGR &= ~ADC_CFGR_CONT;
 80003ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80003dc:	60d3      	str	r3, [r2, #12]

    // Enable ADC
    ADC1->CR |= ADC_CR_ADEN;
 80003de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6093      	str	r3, [r2, #8]
    while (!(ADC1->ISR & ADC_ISR_ADRDY));
 80003ee:	bf00      	nop
 80003f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d0f8      	beq.n	80003f0 <ADC_Init+0xe8>
}
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000
 8000410:	50000300 	.word	0x50000300

08000414 <ADC_Read>:

ADCValues_t ADC_Read(void) {
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
    ADCValues_t result;

    // Start conversion
    ADC1->CR |= ADC_CR_ADSTART;
 800041c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000426:	f043 0304 	orr.w	r3, r3, #4
 800042a:	6093      	str	r3, [r2, #8]

    // Wait and read channel 1
    while (!(ADC1->ISR & ADC_ISR_EOC));
 800042c:	bf00      	nop
 800042e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f003 0304 	and.w	r3, r3, #4
 8000438:	2b00      	cmp	r3, #0
 800043a:	d0f8      	beq.n	800042e <ADC_Read+0x1a>
    result.value_1 = ADC1->DR;
 800043c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000442:	b29b      	uxth	r3, r3
 8000444:	813b      	strh	r3, [r7, #8]

    // Wait and read channel 2
    while (!(ADC1->ISR & ADC_ISR_EOC));
 8000446:	bf00      	nop
 8000448:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f003 0304 	and.w	r3, r3, #4
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f8      	beq.n	8000448 <ADC_Read+0x34>
    result.value_2 = ADC1->DR;
 8000456:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800045a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800045c:	b29b      	uxth	r3, r3
 800045e:	817b      	strh	r3, [r7, #10]

    // Wait and read channel 3
    while (!(ADC1->ISR & ADC_ISR_EOC));
 8000460:	bf00      	nop
 8000462:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	2b00      	cmp	r3, #0
 800046e:	d0f8      	beq.n	8000462 <ADC_Read+0x4e>
    result.value_3 = ADC1->DR;
 8000470:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000476:	b29b      	uxth	r3, r3
 8000478:	81bb      	strh	r3, [r7, #12]

    // Clear End of Sequence
    ADC1->ISR |= ADC_ISR_EOS;
 800047a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000484:	f043 0308 	orr.w	r3, r3, #8
 8000488:	6013      	str	r3, [r2, #0]

    return result;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	461a      	mov	r2, r3
 800048e:	f107 0308 	add.w	r3, r7, #8
 8000492:	6818      	ldr	r0, [r3, #0]
 8000494:	6010      	str	r0, [r2, #0]
 8000496:	889b      	ldrh	r3, [r3, #4]
 8000498:	8093      	strh	r3, [r2, #4]
}
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
	...

080004a8 <main>:
	}
}


int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b094      	sub	sp, #80	@ 0x50
 80004ac:	af02      	add	r7, sp, #8
	enable_clocks();
 80004ae:	f7ff ff01 	bl	80002b4 <enable_clocks>
	initialise_board();
 80004b2:	f7ff ff0f 	bl	80002d4 <initialise_board>
	SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission);
 80004b6:	4a11      	ldr	r2, [pc, #68]	@ (80004fc <main+0x54>)
 80004b8:	4911      	ldr	r1, [pc, #68]	@ (8000500 <main+0x58>)
 80004ba:	2004      	movs	r0, #4
 80004bc:	f000 f824 	bl	8000508 <SerialInitialise>
	//  to enter.

	char buffer[64];
	    ADCValues_t adc_values;

	    ADC_Init(); // Set up the ADC once
 80004c0:	f7ff ff22 	bl	8000308 <ADC_Init>

	    while (1) {
	        adc_values = ADC_Read(); // Get values
 80004c4:	463b      	mov	r3, r7
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff ffa4 	bl	8000414 <ADC_Read>

	        sprintf(buffer, "CH2: %d, CH3: %d, CH4: %d\r\n",
	                adc_values.value_1,
 80004cc:	883b      	ldrh	r3, [r7, #0]
	        sprintf(buffer, "CH2: %d, CH3: %d, CH4: %d\r\n",
 80004ce:	461a      	mov	r2, r3
	                adc_values.value_2,
 80004d0:	887b      	ldrh	r3, [r7, #2]
	        sprintf(buffer, "CH2: %d, CH3: %d, CH4: %d\r\n",
 80004d2:	4619      	mov	r1, r3
	                adc_values.value_3);
 80004d4:	88bb      	ldrh	r3, [r7, #4]
	        sprintf(buffer, "CH2: %d, CH3: %d, CH4: %d\r\n",
 80004d6:	f107 0008 	add.w	r0, r7, #8
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	460b      	mov	r3, r1
 80004de:	4909      	ldr	r1, [pc, #36]	@ (8000504 <main+0x5c>)
 80004e0:	f000 f94a 	bl	8000778 <siprintf>
	        SerialOutputString(buffer, &USART1_PORT);
 80004e4:	f107 0308 	add.w	r3, r7, #8
 80004e8:	4905      	ldr	r1, [pc, #20]	@ (8000500 <main+0x58>)
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 f8bf 	bl	800066e <SerialOutputString>

	        delay(10);
 80004f0:	200a      	movs	r0, #10
 80004f2:	f7ff fec5 	bl	8000280 <delay>
	    while (1) {
 80004f6:	bf00      	nop
 80004f8:	e7e4      	b.n	80004c4 <main+0x1c>
 80004fa:	bf00      	nop
 80004fc:	08000609 	.word	0x08000609
 8000500:	20000000 	.word	0x20000000
 8000504:	080010f8 	.word	0x080010f8

08000508 <SerialInitialise>:
	};


// InitialiseSerial - function to initialise serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t, char *)) {
 8000508:	b480      	push	{r7}
 800050a:	b087      	sub	sp, #28
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800051a:	4b3a      	ldr	r3, [pc, #232]	@ (8000604 <SerialInitialise+0xfc>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a39      	ldr	r2, [pc, #228]	@ (8000604 <SerialInitialise+0xfc>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000524:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000526:	4b37      	ldr	r3, [pc, #220]	@ (8000604 <SerialInitialise+0xfc>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a36      	ldr	r2, [pc, #216]	@ (8000604 <SerialInitialise+0xfc>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	691a      	ldr	r2, [r3, #16]
 8000536:	4b33      	ldr	r3, [pc, #204]	@ (8000604 <SerialInitialise+0xfc>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4932      	ldr	r1, [pc, #200]	@ (8000604 <SerialInitialise+0xfc>)
 800053c:	4313      	orrs	r3, r2
 800053e:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	68ba      	ldr	r2, [r7, #8]
 8000546:	6952      	ldr	r2, [r2, #20]
 8000548:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	6992      	ldr	r2, [r2, #24]
 8000552:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	69d9      	ldr	r1, [r3, #28]
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	6a1a      	ldr	r2, [r3, #32]
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	430a      	orrs	r2, r1
 8000564:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	6a19      	ldr	r1, [r3, #32]
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	430a      	orrs	r2, r1
 8000576:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	68da      	ldr	r2, [r3, #12]
 800057c:	4b21      	ldr	r3, [pc, #132]	@ (8000604 <SerialInitialise+0xfc>)
 800057e:	69db      	ldr	r3, [r3, #28]
 8000580:	4920      	ldr	r1, [pc, #128]	@ (8000604 <SerialInitialise+0xfc>)
 8000582:	4313      	orrs	r3, r2
 8000584:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	689a      	ldr	r2, [r3, #8]
 800058a:	4b1e      	ldr	r3, [pc, #120]	@ (8000604 <SerialInitialise+0xfc>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	491d      	ldr	r1, [pc, #116]	@ (8000604 <SerialInitialise+0xfc>)
 8000590:	4313      	orrs	r3, r2
 8000592:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	330c      	adds	r3, #12
 800059a:	617b      	str	r3, [r7, #20]

	// Baud rates to select
	switch(baudRate){
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2b04      	cmp	r3, #4
 80005a0:	d822      	bhi.n	80005e8 <SerialInitialise+0xe0>
 80005a2:	a201      	add	r2, pc, #4	@ (adr r2, 80005a8 <SerialInitialise+0xa0>)
 80005a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a8:	080005bd 	.word	0x080005bd
 80005ac:	080005c7 	.word	0x080005c7
 80005b0:	080005d1 	.word	0x080005d1
 80005b4:	080005d9 	.word	0x080005d9
 80005b8:	080005e1 	.word	0x080005e1
	case BAUD_9600:
		*baud_rate_config = 0x341;  // 9600 at 8MHz
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	f240 3241 	movw	r2, #833	@ 0x341
 80005c2:	801a      	strh	r2, [r3, #0]
		break;
 80005c4:	e010      	b.n	80005e8 <SerialInitialise+0xe0>
	case BAUD_19200:
		*baud_rate_config = 0x1A1;  // 19200 at 8MHz
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80005cc:	801a      	strh	r2, [r3, #0]
		break;
 80005ce:	e00b      	b.n	80005e8 <SerialInitialise+0xe0>
	case BAUD_38400:
		*baud_rate_config = 0xD0;  // 38400 at 8MHz
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	22d0      	movs	r2, #208	@ 0xd0
 80005d4:	801a      	strh	r2, [r3, #0]
		break;
 80005d6:	e007      	b.n	80005e8 <SerialInitialise+0xe0>
	case BAUD_57600:
		*baud_rate_config = 0x8B;  // 57600 at 8MHz
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	228b      	movs	r2, #139	@ 0x8b
 80005dc:	801a      	strh	r2, [r3, #0]
		break;
 80005de:	e003      	b.n	80005e8 <SerialInitialise+0xe0>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	2246      	movs	r2, #70	@ 0x46
 80005e4:	801a      	strh	r2, [r3, #0]
		break;
 80005e6:	bf00      	nop
	}
	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f042 020d 	orr.w	r2, r2, #13
 80005f6:	601a      	str	r2, [r3, #0]
}
 80005f8:	bf00      	nop
 80005fa:	371c      	adds	r7, #28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	40021000 	.word	0x40021000

08000608 <finished_transmission>:



//Transmission completion function. Short delay to prevent other operations happening too quickly afterwards
void finished_transmission(uint32_t bytes_sent, char *sent_string) {
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	
	volatile uint32_t test = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
	for (volatile uint32_t i = 0; i < 0x8ffff; i++) {
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	e002      	b.n	8000622 <finished_transmission+0x1a>
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	3301      	adds	r3, #1
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	4a04      	ldr	r2, [pc, #16]	@ (8000638 <finished_transmission+0x30>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d9f8      	bls.n	800061c <finished_transmission+0x14>
		//delay
	}
}
 800062a:	bf00      	nop
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	0008fffe 	.word	0x0008fffe

0800063c <SerialOutputChar>:

//Function to transmit a byte via polling method, called in SerialOutputString
void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	6039      	str	r1, [r7, #0]
 8000646:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 8000648:	bf00      	nop
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0f8      	beq.n	800064a <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data;
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	79fa      	ldrb	r2, [r7, #7]
 800065e:	b292      	uxth	r2, r2
 8000660:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <SerialOutputString>:

//Function to transmit a string via polling method
void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 800066e:	b580      	push	{r7, lr}
 8000670:	b084      	sub	sp, #16
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
	char start_string = pt;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	72fb      	strb	r3, [r7, #11]
	while(*pt) {
 8000680:	e00b      	b.n	800069a <SerialOutputString+0x2c>
		SerialOutputChar(*pt, serial_port);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	6839      	ldr	r1, [r7, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ffd7 	bl	800063c <SerialOutputChar>
		counter++;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3301      	adds	r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
		pt++;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3301      	adds	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
	while(*pt) {
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1ef      	bne.n	8000682 <SerialOutputString+0x14>
	}

	serial_port->completion_function(counter, (char *)start_string);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006a6:	7afa      	ldrb	r2, [r7, #11]
 80006a8:	4611      	mov	r1, r2
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	4798      	blx	r3
}
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006c0:	4a14      	ldr	r2, [pc, #80]	@ (8000714 <_sbrk+0x5c>)
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <_sbrk+0x60>)
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006cc:	4b13      	ldr	r3, [pc, #76]	@ (800071c <_sbrk+0x64>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d102      	bne.n	80006da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <_sbrk+0x64>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <_sbrk+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <_sbrk+0x64>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d207      	bcs.n	80006f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e8:	f000 f868 	bl	80007bc <__errno>
 80006ec:	4603      	mov	r3, r0
 80006ee:	220c      	movs	r2, #12
 80006f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295
 80006f6:	e009      	b.n	800070c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f8:	4b08      	ldr	r3, [pc, #32]	@ (800071c <_sbrk+0x64>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006fe:	4b07      	ldr	r3, [pc, #28]	@ (800071c <_sbrk+0x64>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	4a05      	ldr	r2, [pc, #20]	@ (800071c <_sbrk+0x64>)
 8000708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800070a:	68fb      	ldr	r3, [r7, #12]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2000a000 	.word	0x2000a000
 8000718:	00000400 	.word	0x00000400
 800071c:	20000094 	.word	0x20000094
 8000720:	200001e0 	.word	0x200001e0

08000724 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000724:	480d      	ldr	r0, [pc, #52]	@ (800075c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000726:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000728:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800072c:	480c      	ldr	r0, [pc, #48]	@ (8000760 <LoopForever+0x6>)
  ldr r1, =_edata
 800072e:	490d      	ldr	r1, [pc, #52]	@ (8000764 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000730:	4a0d      	ldr	r2, [pc, #52]	@ (8000768 <LoopForever+0xe>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000734:	e002      	b.n	800073c <LoopCopyDataInit>

08000736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073a:	3304      	adds	r3, #4

0800073c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800073c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000740:	d3f9      	bcc.n	8000736 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000742:	4a0a      	ldr	r2, [pc, #40]	@ (800076c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000744:	4c0a      	ldr	r4, [pc, #40]	@ (8000770 <LoopForever+0x16>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000748:	e001      	b.n	800074e <LoopFillZerobss>

0800074a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800074c:	3204      	adds	r2, #4

0800074e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000750:	d3fb      	bcc.n	800074a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000752:	f000 f839 	bl	80007c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000756:	f7ff fea7 	bl	80004a8 <main>

0800075a <LoopForever>:

LoopForever:
  b LoopForever
 800075a:	e7fe      	b.n	800075a <LoopForever>
  ldr   r0, =_estack
 800075c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000768:	08001158 	.word	0x08001158
  ldr r2, =_sbss
 800076c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000770:	200001e0 	.word	0x200001e0

08000774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC1_2_IRQHandler>
	...

08000778 <siprintf>:
 8000778:	b40e      	push	{r1, r2, r3}
 800077a:	b510      	push	{r4, lr}
 800077c:	b09d      	sub	sp, #116	@ 0x74
 800077e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000780:	9002      	str	r0, [sp, #8]
 8000782:	9006      	str	r0, [sp, #24]
 8000784:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000788:	480a      	ldr	r0, [pc, #40]	@ (80007b4 <siprintf+0x3c>)
 800078a:	9107      	str	r1, [sp, #28]
 800078c:	9104      	str	r1, [sp, #16]
 800078e:	490a      	ldr	r1, [pc, #40]	@ (80007b8 <siprintf+0x40>)
 8000790:	f853 2b04 	ldr.w	r2, [r3], #4
 8000794:	9105      	str	r1, [sp, #20]
 8000796:	2400      	movs	r4, #0
 8000798:	a902      	add	r1, sp, #8
 800079a:	6800      	ldr	r0, [r0, #0]
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	941b      	str	r4, [sp, #108]	@ 0x6c
 80007a0:	f000 f99a 	bl	8000ad8 <_svfiprintf_r>
 80007a4:	9b02      	ldr	r3, [sp, #8]
 80007a6:	701c      	strb	r4, [r3, #0]
 80007a8:	b01d      	add	sp, #116	@ 0x74
 80007aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ae:	b003      	add	sp, #12
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	20000028 	.word	0x20000028
 80007b8:	ffff0208 	.word	0xffff0208

080007bc <__errno>:
 80007bc:	4b01      	ldr	r3, [pc, #4]	@ (80007c4 <__errno+0x8>)
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000028 	.word	0x20000028

080007c8 <__libc_init_array>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	4d0d      	ldr	r5, [pc, #52]	@ (8000800 <__libc_init_array+0x38>)
 80007cc:	4c0d      	ldr	r4, [pc, #52]	@ (8000804 <__libc_init_array+0x3c>)
 80007ce:	1b64      	subs	r4, r4, r5
 80007d0:	10a4      	asrs	r4, r4, #2
 80007d2:	2600      	movs	r6, #0
 80007d4:	42a6      	cmp	r6, r4
 80007d6:	d109      	bne.n	80007ec <__libc_init_array+0x24>
 80007d8:	4d0b      	ldr	r5, [pc, #44]	@ (8000808 <__libc_init_array+0x40>)
 80007da:	4c0c      	ldr	r4, [pc, #48]	@ (800080c <__libc_init_array+0x44>)
 80007dc:	f000 fc64 	bl	80010a8 <_init>
 80007e0:	1b64      	subs	r4, r4, r5
 80007e2:	10a4      	asrs	r4, r4, #2
 80007e4:	2600      	movs	r6, #0
 80007e6:	42a6      	cmp	r6, r4
 80007e8:	d105      	bne.n	80007f6 <__libc_init_array+0x2e>
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80007f0:	4798      	blx	r3
 80007f2:	3601      	adds	r6, #1
 80007f4:	e7ee      	b.n	80007d4 <__libc_init_array+0xc>
 80007f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007fa:	4798      	blx	r3
 80007fc:	3601      	adds	r6, #1
 80007fe:	e7f2      	b.n	80007e6 <__libc_init_array+0x1e>
 8000800:	08001150 	.word	0x08001150
 8000804:	08001150 	.word	0x08001150
 8000808:	08001150 	.word	0x08001150
 800080c:	08001154 	.word	0x08001154

08000810 <__retarget_lock_acquire_recursive>:
 8000810:	4770      	bx	lr

08000812 <__retarget_lock_release_recursive>:
 8000812:	4770      	bx	lr

08000814 <memcpy>:
 8000814:	440a      	add	r2, r1
 8000816:	4291      	cmp	r1, r2
 8000818:	f100 33ff 	add.w	r3, r0, #4294967295
 800081c:	d100      	bne.n	8000820 <memcpy+0xc>
 800081e:	4770      	bx	lr
 8000820:	b510      	push	{r4, lr}
 8000822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800082a:	4291      	cmp	r1, r2
 800082c:	d1f9      	bne.n	8000822 <memcpy+0xe>
 800082e:	bd10      	pop	{r4, pc}

08000830 <_free_r>:
 8000830:	b538      	push	{r3, r4, r5, lr}
 8000832:	4605      	mov	r5, r0
 8000834:	2900      	cmp	r1, #0
 8000836:	d041      	beq.n	80008bc <_free_r+0x8c>
 8000838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800083c:	1f0c      	subs	r4, r1, #4
 800083e:	2b00      	cmp	r3, #0
 8000840:	bfb8      	it	lt
 8000842:	18e4      	addlt	r4, r4, r3
 8000844:	f000 f8e0 	bl	8000a08 <__malloc_lock>
 8000848:	4a1d      	ldr	r2, [pc, #116]	@ (80008c0 <_free_r+0x90>)
 800084a:	6813      	ldr	r3, [r2, #0]
 800084c:	b933      	cbnz	r3, 800085c <_free_r+0x2c>
 800084e:	6063      	str	r3, [r4, #4]
 8000850:	6014      	str	r4, [r2, #0]
 8000852:	4628      	mov	r0, r5
 8000854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000858:	f000 b8dc 	b.w	8000a14 <__malloc_unlock>
 800085c:	42a3      	cmp	r3, r4
 800085e:	d908      	bls.n	8000872 <_free_r+0x42>
 8000860:	6820      	ldr	r0, [r4, #0]
 8000862:	1821      	adds	r1, r4, r0
 8000864:	428b      	cmp	r3, r1
 8000866:	bf01      	itttt	eq
 8000868:	6819      	ldreq	r1, [r3, #0]
 800086a:	685b      	ldreq	r3, [r3, #4]
 800086c:	1809      	addeq	r1, r1, r0
 800086e:	6021      	streq	r1, [r4, #0]
 8000870:	e7ed      	b.n	800084e <_free_r+0x1e>
 8000872:	461a      	mov	r2, r3
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	b10b      	cbz	r3, 800087c <_free_r+0x4c>
 8000878:	42a3      	cmp	r3, r4
 800087a:	d9fa      	bls.n	8000872 <_free_r+0x42>
 800087c:	6811      	ldr	r1, [r2, #0]
 800087e:	1850      	adds	r0, r2, r1
 8000880:	42a0      	cmp	r0, r4
 8000882:	d10b      	bne.n	800089c <_free_r+0x6c>
 8000884:	6820      	ldr	r0, [r4, #0]
 8000886:	4401      	add	r1, r0
 8000888:	1850      	adds	r0, r2, r1
 800088a:	4283      	cmp	r3, r0
 800088c:	6011      	str	r1, [r2, #0]
 800088e:	d1e0      	bne.n	8000852 <_free_r+0x22>
 8000890:	6818      	ldr	r0, [r3, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	6053      	str	r3, [r2, #4]
 8000896:	4408      	add	r0, r1
 8000898:	6010      	str	r0, [r2, #0]
 800089a:	e7da      	b.n	8000852 <_free_r+0x22>
 800089c:	d902      	bls.n	80008a4 <_free_r+0x74>
 800089e:	230c      	movs	r3, #12
 80008a0:	602b      	str	r3, [r5, #0]
 80008a2:	e7d6      	b.n	8000852 <_free_r+0x22>
 80008a4:	6820      	ldr	r0, [r4, #0]
 80008a6:	1821      	adds	r1, r4, r0
 80008a8:	428b      	cmp	r3, r1
 80008aa:	bf04      	itt	eq
 80008ac:	6819      	ldreq	r1, [r3, #0]
 80008ae:	685b      	ldreq	r3, [r3, #4]
 80008b0:	6063      	str	r3, [r4, #4]
 80008b2:	bf04      	itt	eq
 80008b4:	1809      	addeq	r1, r1, r0
 80008b6:	6021      	streq	r1, [r4, #0]
 80008b8:	6054      	str	r4, [r2, #4]
 80008ba:	e7ca      	b.n	8000852 <_free_r+0x22>
 80008bc:	bd38      	pop	{r3, r4, r5, pc}
 80008be:	bf00      	nop
 80008c0:	200001dc 	.word	0x200001dc

080008c4 <sbrk_aligned>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	4e0f      	ldr	r6, [pc, #60]	@ (8000904 <sbrk_aligned+0x40>)
 80008c8:	460c      	mov	r4, r1
 80008ca:	6831      	ldr	r1, [r6, #0]
 80008cc:	4605      	mov	r5, r0
 80008ce:	b911      	cbnz	r1, 80008d6 <sbrk_aligned+0x12>
 80008d0:	f000 fba4 	bl	800101c <_sbrk_r>
 80008d4:	6030      	str	r0, [r6, #0]
 80008d6:	4621      	mov	r1, r4
 80008d8:	4628      	mov	r0, r5
 80008da:	f000 fb9f 	bl	800101c <_sbrk_r>
 80008de:	1c43      	adds	r3, r0, #1
 80008e0:	d103      	bne.n	80008ea <sbrk_aligned+0x26>
 80008e2:	f04f 34ff 	mov.w	r4, #4294967295
 80008e6:	4620      	mov	r0, r4
 80008e8:	bd70      	pop	{r4, r5, r6, pc}
 80008ea:	1cc4      	adds	r4, r0, #3
 80008ec:	f024 0403 	bic.w	r4, r4, #3
 80008f0:	42a0      	cmp	r0, r4
 80008f2:	d0f8      	beq.n	80008e6 <sbrk_aligned+0x22>
 80008f4:	1a21      	subs	r1, r4, r0
 80008f6:	4628      	mov	r0, r5
 80008f8:	f000 fb90 	bl	800101c <_sbrk_r>
 80008fc:	3001      	adds	r0, #1
 80008fe:	d1f2      	bne.n	80008e6 <sbrk_aligned+0x22>
 8000900:	e7ef      	b.n	80008e2 <sbrk_aligned+0x1e>
 8000902:	bf00      	nop
 8000904:	200001d8 	.word	0x200001d8

08000908 <_malloc_r>:
 8000908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800090c:	1ccd      	adds	r5, r1, #3
 800090e:	f025 0503 	bic.w	r5, r5, #3
 8000912:	3508      	adds	r5, #8
 8000914:	2d0c      	cmp	r5, #12
 8000916:	bf38      	it	cc
 8000918:	250c      	movcc	r5, #12
 800091a:	2d00      	cmp	r5, #0
 800091c:	4606      	mov	r6, r0
 800091e:	db01      	blt.n	8000924 <_malloc_r+0x1c>
 8000920:	42a9      	cmp	r1, r5
 8000922:	d904      	bls.n	800092e <_malloc_r+0x26>
 8000924:	230c      	movs	r3, #12
 8000926:	6033      	str	r3, [r6, #0]
 8000928:	2000      	movs	r0, #0
 800092a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800092e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a04 <_malloc_r+0xfc>
 8000932:	f000 f869 	bl	8000a08 <__malloc_lock>
 8000936:	f8d8 3000 	ldr.w	r3, [r8]
 800093a:	461c      	mov	r4, r3
 800093c:	bb44      	cbnz	r4, 8000990 <_malloc_r+0x88>
 800093e:	4629      	mov	r1, r5
 8000940:	4630      	mov	r0, r6
 8000942:	f7ff ffbf 	bl	80008c4 <sbrk_aligned>
 8000946:	1c43      	adds	r3, r0, #1
 8000948:	4604      	mov	r4, r0
 800094a:	d158      	bne.n	80009fe <_malloc_r+0xf6>
 800094c:	f8d8 4000 	ldr.w	r4, [r8]
 8000950:	4627      	mov	r7, r4
 8000952:	2f00      	cmp	r7, #0
 8000954:	d143      	bne.n	80009de <_malloc_r+0xd6>
 8000956:	2c00      	cmp	r4, #0
 8000958:	d04b      	beq.n	80009f2 <_malloc_r+0xea>
 800095a:	6823      	ldr	r3, [r4, #0]
 800095c:	4639      	mov	r1, r7
 800095e:	4630      	mov	r0, r6
 8000960:	eb04 0903 	add.w	r9, r4, r3
 8000964:	f000 fb5a 	bl	800101c <_sbrk_r>
 8000968:	4581      	cmp	r9, r0
 800096a:	d142      	bne.n	80009f2 <_malloc_r+0xea>
 800096c:	6821      	ldr	r1, [r4, #0]
 800096e:	1a6d      	subs	r5, r5, r1
 8000970:	4629      	mov	r1, r5
 8000972:	4630      	mov	r0, r6
 8000974:	f7ff ffa6 	bl	80008c4 <sbrk_aligned>
 8000978:	3001      	adds	r0, #1
 800097a:	d03a      	beq.n	80009f2 <_malloc_r+0xea>
 800097c:	6823      	ldr	r3, [r4, #0]
 800097e:	442b      	add	r3, r5
 8000980:	6023      	str	r3, [r4, #0]
 8000982:	f8d8 3000 	ldr.w	r3, [r8]
 8000986:	685a      	ldr	r2, [r3, #4]
 8000988:	bb62      	cbnz	r2, 80009e4 <_malloc_r+0xdc>
 800098a:	f8c8 7000 	str.w	r7, [r8]
 800098e:	e00f      	b.n	80009b0 <_malloc_r+0xa8>
 8000990:	6822      	ldr	r2, [r4, #0]
 8000992:	1b52      	subs	r2, r2, r5
 8000994:	d420      	bmi.n	80009d8 <_malloc_r+0xd0>
 8000996:	2a0b      	cmp	r2, #11
 8000998:	d917      	bls.n	80009ca <_malloc_r+0xc2>
 800099a:	1961      	adds	r1, r4, r5
 800099c:	42a3      	cmp	r3, r4
 800099e:	6025      	str	r5, [r4, #0]
 80009a0:	bf18      	it	ne
 80009a2:	6059      	strne	r1, [r3, #4]
 80009a4:	6863      	ldr	r3, [r4, #4]
 80009a6:	bf08      	it	eq
 80009a8:	f8c8 1000 	streq.w	r1, [r8]
 80009ac:	5162      	str	r2, [r4, r5]
 80009ae:	604b      	str	r3, [r1, #4]
 80009b0:	4630      	mov	r0, r6
 80009b2:	f000 f82f 	bl	8000a14 <__malloc_unlock>
 80009b6:	f104 000b 	add.w	r0, r4, #11
 80009ba:	1d23      	adds	r3, r4, #4
 80009bc:	f020 0007 	bic.w	r0, r0, #7
 80009c0:	1ac2      	subs	r2, r0, r3
 80009c2:	bf1c      	itt	ne
 80009c4:	1a1b      	subne	r3, r3, r0
 80009c6:	50a3      	strne	r3, [r4, r2]
 80009c8:	e7af      	b.n	800092a <_malloc_r+0x22>
 80009ca:	6862      	ldr	r2, [r4, #4]
 80009cc:	42a3      	cmp	r3, r4
 80009ce:	bf0c      	ite	eq
 80009d0:	f8c8 2000 	streq.w	r2, [r8]
 80009d4:	605a      	strne	r2, [r3, #4]
 80009d6:	e7eb      	b.n	80009b0 <_malloc_r+0xa8>
 80009d8:	4623      	mov	r3, r4
 80009da:	6864      	ldr	r4, [r4, #4]
 80009dc:	e7ae      	b.n	800093c <_malloc_r+0x34>
 80009de:	463c      	mov	r4, r7
 80009e0:	687f      	ldr	r7, [r7, #4]
 80009e2:	e7b6      	b.n	8000952 <_malloc_r+0x4a>
 80009e4:	461a      	mov	r2, r3
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	42a3      	cmp	r3, r4
 80009ea:	d1fb      	bne.n	80009e4 <_malloc_r+0xdc>
 80009ec:	2300      	movs	r3, #0
 80009ee:	6053      	str	r3, [r2, #4]
 80009f0:	e7de      	b.n	80009b0 <_malloc_r+0xa8>
 80009f2:	230c      	movs	r3, #12
 80009f4:	6033      	str	r3, [r6, #0]
 80009f6:	4630      	mov	r0, r6
 80009f8:	f000 f80c 	bl	8000a14 <__malloc_unlock>
 80009fc:	e794      	b.n	8000928 <_malloc_r+0x20>
 80009fe:	6005      	str	r5, [r0, #0]
 8000a00:	e7d6      	b.n	80009b0 <_malloc_r+0xa8>
 8000a02:	bf00      	nop
 8000a04:	200001dc 	.word	0x200001dc

08000a08 <__malloc_lock>:
 8000a08:	4801      	ldr	r0, [pc, #4]	@ (8000a10 <__malloc_lock+0x8>)
 8000a0a:	f7ff bf01 	b.w	8000810 <__retarget_lock_acquire_recursive>
 8000a0e:	bf00      	nop
 8000a10:	200001d4 	.word	0x200001d4

08000a14 <__malloc_unlock>:
 8000a14:	4801      	ldr	r0, [pc, #4]	@ (8000a1c <__malloc_unlock+0x8>)
 8000a16:	f7ff befc 	b.w	8000812 <__retarget_lock_release_recursive>
 8000a1a:	bf00      	nop
 8000a1c:	200001d4 	.word	0x200001d4

08000a20 <__ssputs_r>:
 8000a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a24:	688e      	ldr	r6, [r1, #8]
 8000a26:	461f      	mov	r7, r3
 8000a28:	42be      	cmp	r6, r7
 8000a2a:	680b      	ldr	r3, [r1, #0]
 8000a2c:	4682      	mov	sl, r0
 8000a2e:	460c      	mov	r4, r1
 8000a30:	4690      	mov	r8, r2
 8000a32:	d82d      	bhi.n	8000a90 <__ssputs_r+0x70>
 8000a34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000a38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000a3c:	d026      	beq.n	8000a8c <__ssputs_r+0x6c>
 8000a3e:	6965      	ldr	r5, [r4, #20]
 8000a40:	6909      	ldr	r1, [r1, #16]
 8000a42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a46:	eba3 0901 	sub.w	r9, r3, r1
 8000a4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a4e:	1c7b      	adds	r3, r7, #1
 8000a50:	444b      	add	r3, r9
 8000a52:	106d      	asrs	r5, r5, #1
 8000a54:	429d      	cmp	r5, r3
 8000a56:	bf38      	it	cc
 8000a58:	461d      	movcc	r5, r3
 8000a5a:	0553      	lsls	r3, r2, #21
 8000a5c:	d527      	bpl.n	8000aae <__ssputs_r+0x8e>
 8000a5e:	4629      	mov	r1, r5
 8000a60:	f7ff ff52 	bl	8000908 <_malloc_r>
 8000a64:	4606      	mov	r6, r0
 8000a66:	b360      	cbz	r0, 8000ac2 <__ssputs_r+0xa2>
 8000a68:	6921      	ldr	r1, [r4, #16]
 8000a6a:	464a      	mov	r2, r9
 8000a6c:	f7ff fed2 	bl	8000814 <memcpy>
 8000a70:	89a3      	ldrh	r3, [r4, #12]
 8000a72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a7a:	81a3      	strh	r3, [r4, #12]
 8000a7c:	6126      	str	r6, [r4, #16]
 8000a7e:	6165      	str	r5, [r4, #20]
 8000a80:	444e      	add	r6, r9
 8000a82:	eba5 0509 	sub.w	r5, r5, r9
 8000a86:	6026      	str	r6, [r4, #0]
 8000a88:	60a5      	str	r5, [r4, #8]
 8000a8a:	463e      	mov	r6, r7
 8000a8c:	42be      	cmp	r6, r7
 8000a8e:	d900      	bls.n	8000a92 <__ssputs_r+0x72>
 8000a90:	463e      	mov	r6, r7
 8000a92:	6820      	ldr	r0, [r4, #0]
 8000a94:	4632      	mov	r2, r6
 8000a96:	4641      	mov	r1, r8
 8000a98:	f000 faa6 	bl	8000fe8 <memmove>
 8000a9c:	68a3      	ldr	r3, [r4, #8]
 8000a9e:	1b9b      	subs	r3, r3, r6
 8000aa0:	60a3      	str	r3, [r4, #8]
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	4433      	add	r3, r6
 8000aa6:	6023      	str	r3, [r4, #0]
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	462a      	mov	r2, r5
 8000ab0:	f000 fac4 	bl	800103c <_realloc_r>
 8000ab4:	4606      	mov	r6, r0
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	d1e0      	bne.n	8000a7c <__ssputs_r+0x5c>
 8000aba:	6921      	ldr	r1, [r4, #16]
 8000abc:	4650      	mov	r0, sl
 8000abe:	f7ff feb7 	bl	8000830 <_free_r>
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	f8ca 3000 	str.w	r3, [sl]
 8000ac8:	89a3      	ldrh	r3, [r4, #12]
 8000aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ace:	81a3      	strh	r3, [r4, #12]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	e7e9      	b.n	8000aaa <__ssputs_r+0x8a>
	...

08000ad8 <_svfiprintf_r>:
 8000ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000adc:	4698      	mov	r8, r3
 8000ade:	898b      	ldrh	r3, [r1, #12]
 8000ae0:	061b      	lsls	r3, r3, #24
 8000ae2:	b09d      	sub	sp, #116	@ 0x74
 8000ae4:	4607      	mov	r7, r0
 8000ae6:	460d      	mov	r5, r1
 8000ae8:	4614      	mov	r4, r2
 8000aea:	d510      	bpl.n	8000b0e <_svfiprintf_r+0x36>
 8000aec:	690b      	ldr	r3, [r1, #16]
 8000aee:	b973      	cbnz	r3, 8000b0e <_svfiprintf_r+0x36>
 8000af0:	2140      	movs	r1, #64	@ 0x40
 8000af2:	f7ff ff09 	bl	8000908 <_malloc_r>
 8000af6:	6028      	str	r0, [r5, #0]
 8000af8:	6128      	str	r0, [r5, #16]
 8000afa:	b930      	cbnz	r0, 8000b0a <_svfiprintf_r+0x32>
 8000afc:	230c      	movs	r3, #12
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	b01d      	add	sp, #116	@ 0x74
 8000b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b0a:	2340      	movs	r3, #64	@ 0x40
 8000b0c:	616b      	str	r3, [r5, #20]
 8000b0e:	2300      	movs	r3, #0
 8000b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b12:	2320      	movs	r3, #32
 8000b14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b1c:	2330      	movs	r3, #48	@ 0x30
 8000b1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000cbc <_svfiprintf_r+0x1e4>
 8000b22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b26:	f04f 0901 	mov.w	r9, #1
 8000b2a:	4623      	mov	r3, r4
 8000b2c:	469a      	mov	sl, r3
 8000b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b32:	b10a      	cbz	r2, 8000b38 <_svfiprintf_r+0x60>
 8000b34:	2a25      	cmp	r2, #37	@ 0x25
 8000b36:	d1f9      	bne.n	8000b2c <_svfiprintf_r+0x54>
 8000b38:	ebba 0b04 	subs.w	fp, sl, r4
 8000b3c:	d00b      	beq.n	8000b56 <_svfiprintf_r+0x7e>
 8000b3e:	465b      	mov	r3, fp
 8000b40:	4622      	mov	r2, r4
 8000b42:	4629      	mov	r1, r5
 8000b44:	4638      	mov	r0, r7
 8000b46:	f7ff ff6b 	bl	8000a20 <__ssputs_r>
 8000b4a:	3001      	adds	r0, #1
 8000b4c:	f000 80a7 	beq.w	8000c9e <_svfiprintf_r+0x1c6>
 8000b50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b52:	445a      	add	r2, fp
 8000b54:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b56:	f89a 3000 	ldrb.w	r3, [sl]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 809f 	beq.w	8000c9e <_svfiprintf_r+0x1c6>
 8000b60:	2300      	movs	r3, #0
 8000b62:	f04f 32ff 	mov.w	r2, #4294967295
 8000b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b6a:	f10a 0a01 	add.w	sl, sl, #1
 8000b6e:	9304      	str	r3, [sp, #16]
 8000b70:	9307      	str	r3, [sp, #28]
 8000b72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b76:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b78:	4654      	mov	r4, sl
 8000b7a:	2205      	movs	r2, #5
 8000b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b80:	484e      	ldr	r0, [pc, #312]	@ (8000cbc <_svfiprintf_r+0x1e4>)
 8000b82:	f7ff fb2d 	bl	80001e0 <memchr>
 8000b86:	9a04      	ldr	r2, [sp, #16]
 8000b88:	b9d8      	cbnz	r0, 8000bc2 <_svfiprintf_r+0xea>
 8000b8a:	06d0      	lsls	r0, r2, #27
 8000b8c:	bf44      	itt	mi
 8000b8e:	2320      	movmi	r3, #32
 8000b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b94:	0711      	lsls	r1, r2, #28
 8000b96:	bf44      	itt	mi
 8000b98:	232b      	movmi	r3, #43	@ 0x2b
 8000b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8000ba2:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ba4:	d015      	beq.n	8000bd2 <_svfiprintf_r+0xfa>
 8000ba6:	9a07      	ldr	r2, [sp, #28]
 8000ba8:	4654      	mov	r4, sl
 8000baa:	2000      	movs	r0, #0
 8000bac:	f04f 0c0a 	mov.w	ip, #10
 8000bb0:	4621      	mov	r1, r4
 8000bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bb6:	3b30      	subs	r3, #48	@ 0x30
 8000bb8:	2b09      	cmp	r3, #9
 8000bba:	d94b      	bls.n	8000c54 <_svfiprintf_r+0x17c>
 8000bbc:	b1b0      	cbz	r0, 8000bec <_svfiprintf_r+0x114>
 8000bbe:	9207      	str	r2, [sp, #28]
 8000bc0:	e014      	b.n	8000bec <_svfiprintf_r+0x114>
 8000bc2:	eba0 0308 	sub.w	r3, r0, r8
 8000bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	9304      	str	r3, [sp, #16]
 8000bce:	46a2      	mov	sl, r4
 8000bd0:	e7d2      	b.n	8000b78 <_svfiprintf_r+0xa0>
 8000bd2:	9b03      	ldr	r3, [sp, #12]
 8000bd4:	1d19      	adds	r1, r3, #4
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	9103      	str	r1, [sp, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bfbb      	ittet	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	f042 0202 	orrlt.w	r2, r2, #2
 8000be4:	9307      	strge	r3, [sp, #28]
 8000be6:	9307      	strlt	r3, [sp, #28]
 8000be8:	bfb8      	it	lt
 8000bea:	9204      	strlt	r2, [sp, #16]
 8000bec:	7823      	ldrb	r3, [r4, #0]
 8000bee:	2b2e      	cmp	r3, #46	@ 0x2e
 8000bf0:	d10a      	bne.n	8000c08 <_svfiprintf_r+0x130>
 8000bf2:	7863      	ldrb	r3, [r4, #1]
 8000bf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bf6:	d132      	bne.n	8000c5e <_svfiprintf_r+0x186>
 8000bf8:	9b03      	ldr	r3, [sp, #12]
 8000bfa:	1d1a      	adds	r2, r3, #4
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	9203      	str	r2, [sp, #12]
 8000c00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c04:	3402      	adds	r4, #2
 8000c06:	9305      	str	r3, [sp, #20]
 8000c08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000ccc <_svfiprintf_r+0x1f4>
 8000c0c:	7821      	ldrb	r1, [r4, #0]
 8000c0e:	2203      	movs	r2, #3
 8000c10:	4650      	mov	r0, sl
 8000c12:	f7ff fae5 	bl	80001e0 <memchr>
 8000c16:	b138      	cbz	r0, 8000c28 <_svfiprintf_r+0x150>
 8000c18:	9b04      	ldr	r3, [sp, #16]
 8000c1a:	eba0 000a 	sub.w	r0, r0, sl
 8000c1e:	2240      	movs	r2, #64	@ 0x40
 8000c20:	4082      	lsls	r2, r0
 8000c22:	4313      	orrs	r3, r2
 8000c24:	3401      	adds	r4, #1
 8000c26:	9304      	str	r3, [sp, #16]
 8000c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c2c:	4824      	ldr	r0, [pc, #144]	@ (8000cc0 <_svfiprintf_r+0x1e8>)
 8000c2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c32:	2206      	movs	r2, #6
 8000c34:	f7ff fad4 	bl	80001e0 <memchr>
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	d036      	beq.n	8000caa <_svfiprintf_r+0x1d2>
 8000c3c:	4b21      	ldr	r3, [pc, #132]	@ (8000cc4 <_svfiprintf_r+0x1ec>)
 8000c3e:	bb1b      	cbnz	r3, 8000c88 <_svfiprintf_r+0x1b0>
 8000c40:	9b03      	ldr	r3, [sp, #12]
 8000c42:	3307      	adds	r3, #7
 8000c44:	f023 0307 	bic.w	r3, r3, #7
 8000c48:	3308      	adds	r3, #8
 8000c4a:	9303      	str	r3, [sp, #12]
 8000c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c4e:	4433      	add	r3, r6
 8000c50:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c52:	e76a      	b.n	8000b2a <_svfiprintf_r+0x52>
 8000c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c58:	460c      	mov	r4, r1
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	e7a8      	b.n	8000bb0 <_svfiprintf_r+0xd8>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	3401      	adds	r4, #1
 8000c62:	9305      	str	r3, [sp, #20]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f04f 0c0a 	mov.w	ip, #10
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c70:	3a30      	subs	r2, #48	@ 0x30
 8000c72:	2a09      	cmp	r2, #9
 8000c74:	d903      	bls.n	8000c7e <_svfiprintf_r+0x1a6>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0c6      	beq.n	8000c08 <_svfiprintf_r+0x130>
 8000c7a:	9105      	str	r1, [sp, #20]
 8000c7c:	e7c4      	b.n	8000c08 <_svfiprintf_r+0x130>
 8000c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c82:	4604      	mov	r4, r0
 8000c84:	2301      	movs	r3, #1
 8000c86:	e7f0      	b.n	8000c6a <_svfiprintf_r+0x192>
 8000c88:	ab03      	add	r3, sp, #12
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	462a      	mov	r2, r5
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <_svfiprintf_r+0x1f0>)
 8000c90:	a904      	add	r1, sp, #16
 8000c92:	4638      	mov	r0, r7
 8000c94:	f3af 8000 	nop.w
 8000c98:	1c42      	adds	r2, r0, #1
 8000c9a:	4606      	mov	r6, r0
 8000c9c:	d1d6      	bne.n	8000c4c <_svfiprintf_r+0x174>
 8000c9e:	89ab      	ldrh	r3, [r5, #12]
 8000ca0:	065b      	lsls	r3, r3, #25
 8000ca2:	f53f af2d 	bmi.w	8000b00 <_svfiprintf_r+0x28>
 8000ca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ca8:	e72c      	b.n	8000b04 <_svfiprintf_r+0x2c>
 8000caa:	ab03      	add	r3, sp, #12
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	462a      	mov	r2, r5
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <_svfiprintf_r+0x1f0>)
 8000cb2:	a904      	add	r1, sp, #16
 8000cb4:	4638      	mov	r0, r7
 8000cb6:	f000 f879 	bl	8000dac <_printf_i>
 8000cba:	e7ed      	b.n	8000c98 <_svfiprintf_r+0x1c0>
 8000cbc:	08001114 	.word	0x08001114
 8000cc0:	0800111e 	.word	0x0800111e
 8000cc4:	00000000 	.word	0x00000000
 8000cc8:	08000a21 	.word	0x08000a21
 8000ccc:	0800111a 	.word	0x0800111a

08000cd0 <_printf_common>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	4616      	mov	r6, r2
 8000cd6:	4698      	mov	r8, r3
 8000cd8:	688a      	ldr	r2, [r1, #8]
 8000cda:	690b      	ldr	r3, [r1, #16]
 8000cdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	bfb8      	it	lt
 8000ce4:	4613      	movlt	r3, r2
 8000ce6:	6033      	str	r3, [r6, #0]
 8000ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000cec:	4607      	mov	r7, r0
 8000cee:	460c      	mov	r4, r1
 8000cf0:	b10a      	cbz	r2, 8000cf6 <_printf_common+0x26>
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	6033      	str	r3, [r6, #0]
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	0699      	lsls	r1, r3, #26
 8000cfa:	bf42      	ittt	mi
 8000cfc:	6833      	ldrmi	r3, [r6, #0]
 8000cfe:	3302      	addmi	r3, #2
 8000d00:	6033      	strmi	r3, [r6, #0]
 8000d02:	6825      	ldr	r5, [r4, #0]
 8000d04:	f015 0506 	ands.w	r5, r5, #6
 8000d08:	d106      	bne.n	8000d18 <_printf_common+0x48>
 8000d0a:	f104 0a19 	add.w	sl, r4, #25
 8000d0e:	68e3      	ldr	r3, [r4, #12]
 8000d10:	6832      	ldr	r2, [r6, #0]
 8000d12:	1a9b      	subs	r3, r3, r2
 8000d14:	42ab      	cmp	r3, r5
 8000d16:	dc26      	bgt.n	8000d66 <_printf_common+0x96>
 8000d18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d1c:	6822      	ldr	r2, [r4, #0]
 8000d1e:	3b00      	subs	r3, #0
 8000d20:	bf18      	it	ne
 8000d22:	2301      	movne	r3, #1
 8000d24:	0692      	lsls	r2, r2, #26
 8000d26:	d42b      	bmi.n	8000d80 <_printf_common+0xb0>
 8000d28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d2c:	4641      	mov	r1, r8
 8000d2e:	4638      	mov	r0, r7
 8000d30:	47c8      	blx	r9
 8000d32:	3001      	adds	r0, #1
 8000d34:	d01e      	beq.n	8000d74 <_printf_common+0xa4>
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	6922      	ldr	r2, [r4, #16]
 8000d3a:	f003 0306 	and.w	r3, r3, #6
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf02      	ittt	eq
 8000d42:	68e5      	ldreq	r5, [r4, #12]
 8000d44:	6833      	ldreq	r3, [r6, #0]
 8000d46:	1aed      	subeq	r5, r5, r3
 8000d48:	68a3      	ldr	r3, [r4, #8]
 8000d4a:	bf0c      	ite	eq
 8000d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d50:	2500      	movne	r5, #0
 8000d52:	4293      	cmp	r3, r2
 8000d54:	bfc4      	itt	gt
 8000d56:	1a9b      	subgt	r3, r3, r2
 8000d58:	18ed      	addgt	r5, r5, r3
 8000d5a:	2600      	movs	r6, #0
 8000d5c:	341a      	adds	r4, #26
 8000d5e:	42b5      	cmp	r5, r6
 8000d60:	d11a      	bne.n	8000d98 <_printf_common+0xc8>
 8000d62:	2000      	movs	r0, #0
 8000d64:	e008      	b.n	8000d78 <_printf_common+0xa8>
 8000d66:	2301      	movs	r3, #1
 8000d68:	4652      	mov	r2, sl
 8000d6a:	4641      	mov	r1, r8
 8000d6c:	4638      	mov	r0, r7
 8000d6e:	47c8      	blx	r9
 8000d70:	3001      	adds	r0, #1
 8000d72:	d103      	bne.n	8000d7c <_printf_common+0xac>
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7c:	3501      	adds	r5, #1
 8000d7e:	e7c6      	b.n	8000d0e <_printf_common+0x3e>
 8000d80:	18e1      	adds	r1, r4, r3
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	2030      	movs	r0, #48	@ 0x30
 8000d86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d8a:	4422      	add	r2, r4
 8000d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d94:	3302      	adds	r3, #2
 8000d96:	e7c7      	b.n	8000d28 <_printf_common+0x58>
 8000d98:	2301      	movs	r3, #1
 8000d9a:	4622      	mov	r2, r4
 8000d9c:	4641      	mov	r1, r8
 8000d9e:	4638      	mov	r0, r7
 8000da0:	47c8      	blx	r9
 8000da2:	3001      	adds	r0, #1
 8000da4:	d0e6      	beq.n	8000d74 <_printf_common+0xa4>
 8000da6:	3601      	adds	r6, #1
 8000da8:	e7d9      	b.n	8000d5e <_printf_common+0x8e>
	...

08000dac <_printf_i>:
 8000dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000db0:	7e0f      	ldrb	r7, [r1, #24]
 8000db2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000db4:	2f78      	cmp	r7, #120	@ 0x78
 8000db6:	4691      	mov	r9, r2
 8000db8:	4680      	mov	r8, r0
 8000dba:	460c      	mov	r4, r1
 8000dbc:	469a      	mov	sl, r3
 8000dbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000dc2:	d807      	bhi.n	8000dd4 <_printf_i+0x28>
 8000dc4:	2f62      	cmp	r7, #98	@ 0x62
 8000dc6:	d80a      	bhi.n	8000dde <_printf_i+0x32>
 8000dc8:	2f00      	cmp	r7, #0
 8000dca:	f000 80d1 	beq.w	8000f70 <_printf_i+0x1c4>
 8000dce:	2f58      	cmp	r7, #88	@ 0x58
 8000dd0:	f000 80b8 	beq.w	8000f44 <_printf_i+0x198>
 8000dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000dd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000ddc:	e03a      	b.n	8000e54 <_printf_i+0xa8>
 8000dde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000de2:	2b15      	cmp	r3, #21
 8000de4:	d8f6      	bhi.n	8000dd4 <_printf_i+0x28>
 8000de6:	a101      	add	r1, pc, #4	@ (adr r1, 8000dec <_printf_i+0x40>)
 8000de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000dec:	08000e45 	.word	0x08000e45
 8000df0:	08000e59 	.word	0x08000e59
 8000df4:	08000dd5 	.word	0x08000dd5
 8000df8:	08000dd5 	.word	0x08000dd5
 8000dfc:	08000dd5 	.word	0x08000dd5
 8000e00:	08000dd5 	.word	0x08000dd5
 8000e04:	08000e59 	.word	0x08000e59
 8000e08:	08000dd5 	.word	0x08000dd5
 8000e0c:	08000dd5 	.word	0x08000dd5
 8000e10:	08000dd5 	.word	0x08000dd5
 8000e14:	08000dd5 	.word	0x08000dd5
 8000e18:	08000f57 	.word	0x08000f57
 8000e1c:	08000e83 	.word	0x08000e83
 8000e20:	08000f11 	.word	0x08000f11
 8000e24:	08000dd5 	.word	0x08000dd5
 8000e28:	08000dd5 	.word	0x08000dd5
 8000e2c:	08000f79 	.word	0x08000f79
 8000e30:	08000dd5 	.word	0x08000dd5
 8000e34:	08000e83 	.word	0x08000e83
 8000e38:	08000dd5 	.word	0x08000dd5
 8000e3c:	08000dd5 	.word	0x08000dd5
 8000e40:	08000f19 	.word	0x08000f19
 8000e44:	6833      	ldr	r3, [r6, #0]
 8000e46:	1d1a      	adds	r2, r3, #4
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6032      	str	r2, [r6, #0]
 8000e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e54:	2301      	movs	r3, #1
 8000e56:	e09c      	b.n	8000f92 <_printf_i+0x1e6>
 8000e58:	6833      	ldr	r3, [r6, #0]
 8000e5a:	6820      	ldr	r0, [r4, #0]
 8000e5c:	1d19      	adds	r1, r3, #4
 8000e5e:	6031      	str	r1, [r6, #0]
 8000e60:	0606      	lsls	r6, r0, #24
 8000e62:	d501      	bpl.n	8000e68 <_printf_i+0xbc>
 8000e64:	681d      	ldr	r5, [r3, #0]
 8000e66:	e003      	b.n	8000e70 <_printf_i+0xc4>
 8000e68:	0645      	lsls	r5, r0, #25
 8000e6a:	d5fb      	bpl.n	8000e64 <_printf_i+0xb8>
 8000e6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e70:	2d00      	cmp	r5, #0
 8000e72:	da03      	bge.n	8000e7c <_printf_i+0xd0>
 8000e74:	232d      	movs	r3, #45	@ 0x2d
 8000e76:	426d      	negs	r5, r5
 8000e78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e7c:	4858      	ldr	r0, [pc, #352]	@ (8000fe0 <_printf_i+0x234>)
 8000e7e:	230a      	movs	r3, #10
 8000e80:	e011      	b.n	8000ea6 <_printf_i+0xfa>
 8000e82:	6821      	ldr	r1, [r4, #0]
 8000e84:	6833      	ldr	r3, [r6, #0]
 8000e86:	0608      	lsls	r0, r1, #24
 8000e88:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e8c:	d402      	bmi.n	8000e94 <_printf_i+0xe8>
 8000e8e:	0649      	lsls	r1, r1, #25
 8000e90:	bf48      	it	mi
 8000e92:	b2ad      	uxthmi	r5, r5
 8000e94:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e96:	4852      	ldr	r0, [pc, #328]	@ (8000fe0 <_printf_i+0x234>)
 8000e98:	6033      	str	r3, [r6, #0]
 8000e9a:	bf14      	ite	ne
 8000e9c:	230a      	movne	r3, #10
 8000e9e:	2308      	moveq	r3, #8
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000ea6:	6866      	ldr	r6, [r4, #4]
 8000ea8:	60a6      	str	r6, [r4, #8]
 8000eaa:	2e00      	cmp	r6, #0
 8000eac:	db05      	blt.n	8000eba <_printf_i+0x10e>
 8000eae:	6821      	ldr	r1, [r4, #0]
 8000eb0:	432e      	orrs	r6, r5
 8000eb2:	f021 0104 	bic.w	r1, r1, #4
 8000eb6:	6021      	str	r1, [r4, #0]
 8000eb8:	d04b      	beq.n	8000f52 <_printf_i+0x1a6>
 8000eba:	4616      	mov	r6, r2
 8000ebc:	fbb5 f1f3 	udiv	r1, r5, r3
 8000ec0:	fb03 5711 	mls	r7, r3, r1, r5
 8000ec4:	5dc7      	ldrb	r7, [r0, r7]
 8000ec6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000eca:	462f      	mov	r7, r5
 8000ecc:	42bb      	cmp	r3, r7
 8000ece:	460d      	mov	r5, r1
 8000ed0:	d9f4      	bls.n	8000ebc <_printf_i+0x110>
 8000ed2:	2b08      	cmp	r3, #8
 8000ed4:	d10b      	bne.n	8000eee <_printf_i+0x142>
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	07df      	lsls	r7, r3, #31
 8000eda:	d508      	bpl.n	8000eee <_printf_i+0x142>
 8000edc:	6923      	ldr	r3, [r4, #16]
 8000ede:	6861      	ldr	r1, [r4, #4]
 8000ee0:	4299      	cmp	r1, r3
 8000ee2:	bfde      	ittt	le
 8000ee4:	2330      	movle	r3, #48	@ 0x30
 8000ee6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000eea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000eee:	1b92      	subs	r2, r2, r6
 8000ef0:	6122      	str	r2, [r4, #16]
 8000ef2:	f8cd a000 	str.w	sl, [sp]
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	aa03      	add	r2, sp, #12
 8000efa:	4621      	mov	r1, r4
 8000efc:	4640      	mov	r0, r8
 8000efe:	f7ff fee7 	bl	8000cd0 <_printf_common>
 8000f02:	3001      	adds	r0, #1
 8000f04:	d14a      	bne.n	8000f9c <_printf_i+0x1f0>
 8000f06:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0a:	b004      	add	sp, #16
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	f043 0320 	orr.w	r3, r3, #32
 8000f16:	6023      	str	r3, [r4, #0]
 8000f18:	4832      	ldr	r0, [pc, #200]	@ (8000fe4 <_printf_i+0x238>)
 8000f1a:	2778      	movs	r7, #120	@ 0x78
 8000f1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	6831      	ldr	r1, [r6, #0]
 8000f24:	061f      	lsls	r7, r3, #24
 8000f26:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f2a:	d402      	bmi.n	8000f32 <_printf_i+0x186>
 8000f2c:	065f      	lsls	r7, r3, #25
 8000f2e:	bf48      	it	mi
 8000f30:	b2ad      	uxthmi	r5, r5
 8000f32:	6031      	str	r1, [r6, #0]
 8000f34:	07d9      	lsls	r1, r3, #31
 8000f36:	bf44      	itt	mi
 8000f38:	f043 0320 	orrmi.w	r3, r3, #32
 8000f3c:	6023      	strmi	r3, [r4, #0]
 8000f3e:	b11d      	cbz	r5, 8000f48 <_printf_i+0x19c>
 8000f40:	2310      	movs	r3, #16
 8000f42:	e7ad      	b.n	8000ea0 <_printf_i+0xf4>
 8000f44:	4826      	ldr	r0, [pc, #152]	@ (8000fe0 <_printf_i+0x234>)
 8000f46:	e7e9      	b.n	8000f1c <_printf_i+0x170>
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	f023 0320 	bic.w	r3, r3, #32
 8000f4e:	6023      	str	r3, [r4, #0]
 8000f50:	e7f6      	b.n	8000f40 <_printf_i+0x194>
 8000f52:	4616      	mov	r6, r2
 8000f54:	e7bd      	b.n	8000ed2 <_printf_i+0x126>
 8000f56:	6833      	ldr	r3, [r6, #0]
 8000f58:	6825      	ldr	r5, [r4, #0]
 8000f5a:	6961      	ldr	r1, [r4, #20]
 8000f5c:	1d18      	adds	r0, r3, #4
 8000f5e:	6030      	str	r0, [r6, #0]
 8000f60:	062e      	lsls	r6, r5, #24
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	d501      	bpl.n	8000f6a <_printf_i+0x1be>
 8000f66:	6019      	str	r1, [r3, #0]
 8000f68:	e002      	b.n	8000f70 <_printf_i+0x1c4>
 8000f6a:	0668      	lsls	r0, r5, #25
 8000f6c:	d5fb      	bpl.n	8000f66 <_printf_i+0x1ba>
 8000f6e:	8019      	strh	r1, [r3, #0]
 8000f70:	2300      	movs	r3, #0
 8000f72:	6123      	str	r3, [r4, #16]
 8000f74:	4616      	mov	r6, r2
 8000f76:	e7bc      	b.n	8000ef2 <_printf_i+0x146>
 8000f78:	6833      	ldr	r3, [r6, #0]
 8000f7a:	1d1a      	adds	r2, r3, #4
 8000f7c:	6032      	str	r2, [r6, #0]
 8000f7e:	681e      	ldr	r6, [r3, #0]
 8000f80:	6862      	ldr	r2, [r4, #4]
 8000f82:	2100      	movs	r1, #0
 8000f84:	4630      	mov	r0, r6
 8000f86:	f7ff f92b 	bl	80001e0 <memchr>
 8000f8a:	b108      	cbz	r0, 8000f90 <_printf_i+0x1e4>
 8000f8c:	1b80      	subs	r0, r0, r6
 8000f8e:	6060      	str	r0, [r4, #4]
 8000f90:	6863      	ldr	r3, [r4, #4]
 8000f92:	6123      	str	r3, [r4, #16]
 8000f94:	2300      	movs	r3, #0
 8000f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f9a:	e7aa      	b.n	8000ef2 <_printf_i+0x146>
 8000f9c:	6923      	ldr	r3, [r4, #16]
 8000f9e:	4632      	mov	r2, r6
 8000fa0:	4649      	mov	r1, r9
 8000fa2:	4640      	mov	r0, r8
 8000fa4:	47d0      	blx	sl
 8000fa6:	3001      	adds	r0, #1
 8000fa8:	d0ad      	beq.n	8000f06 <_printf_i+0x15a>
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	079b      	lsls	r3, r3, #30
 8000fae:	d413      	bmi.n	8000fd8 <_printf_i+0x22c>
 8000fb0:	68e0      	ldr	r0, [r4, #12]
 8000fb2:	9b03      	ldr	r3, [sp, #12]
 8000fb4:	4298      	cmp	r0, r3
 8000fb6:	bfb8      	it	lt
 8000fb8:	4618      	movlt	r0, r3
 8000fba:	e7a6      	b.n	8000f0a <_printf_i+0x15e>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	4632      	mov	r2, r6
 8000fc0:	4649      	mov	r1, r9
 8000fc2:	4640      	mov	r0, r8
 8000fc4:	47d0      	blx	sl
 8000fc6:	3001      	adds	r0, #1
 8000fc8:	d09d      	beq.n	8000f06 <_printf_i+0x15a>
 8000fca:	3501      	adds	r5, #1
 8000fcc:	68e3      	ldr	r3, [r4, #12]
 8000fce:	9903      	ldr	r1, [sp, #12]
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	42ab      	cmp	r3, r5
 8000fd4:	dcf2      	bgt.n	8000fbc <_printf_i+0x210>
 8000fd6:	e7eb      	b.n	8000fb0 <_printf_i+0x204>
 8000fd8:	2500      	movs	r5, #0
 8000fda:	f104 0619 	add.w	r6, r4, #25
 8000fde:	e7f5      	b.n	8000fcc <_printf_i+0x220>
 8000fe0:	08001125 	.word	0x08001125
 8000fe4:	08001136 	.word	0x08001136

08000fe8 <memmove>:
 8000fe8:	4288      	cmp	r0, r1
 8000fea:	b510      	push	{r4, lr}
 8000fec:	eb01 0402 	add.w	r4, r1, r2
 8000ff0:	d902      	bls.n	8000ff8 <memmove+0x10>
 8000ff2:	4284      	cmp	r4, r0
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	d807      	bhi.n	8001008 <memmove+0x20>
 8000ff8:	1e43      	subs	r3, r0, #1
 8000ffa:	42a1      	cmp	r1, r4
 8000ffc:	d008      	beq.n	8001010 <memmove+0x28>
 8000ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001002:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001006:	e7f8      	b.n	8000ffa <memmove+0x12>
 8001008:	4402      	add	r2, r0
 800100a:	4601      	mov	r1, r0
 800100c:	428a      	cmp	r2, r1
 800100e:	d100      	bne.n	8001012 <memmove+0x2a>
 8001010:	bd10      	pop	{r4, pc}
 8001012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800101a:	e7f7      	b.n	800100c <memmove+0x24>

0800101c <_sbrk_r>:
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	4d06      	ldr	r5, [pc, #24]	@ (8001038 <_sbrk_r+0x1c>)
 8001020:	2300      	movs	r3, #0
 8001022:	4604      	mov	r4, r0
 8001024:	4608      	mov	r0, r1
 8001026:	602b      	str	r3, [r5, #0]
 8001028:	f7ff fb46 	bl	80006b8 <_sbrk>
 800102c:	1c43      	adds	r3, r0, #1
 800102e:	d102      	bne.n	8001036 <_sbrk_r+0x1a>
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	b103      	cbz	r3, 8001036 <_sbrk_r+0x1a>
 8001034:	6023      	str	r3, [r4, #0]
 8001036:	bd38      	pop	{r3, r4, r5, pc}
 8001038:	200001d0 	.word	0x200001d0

0800103c <_realloc_r>:
 800103c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001040:	4607      	mov	r7, r0
 8001042:	4614      	mov	r4, r2
 8001044:	460d      	mov	r5, r1
 8001046:	b921      	cbnz	r1, 8001052 <_realloc_r+0x16>
 8001048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800104c:	4611      	mov	r1, r2
 800104e:	f7ff bc5b 	b.w	8000908 <_malloc_r>
 8001052:	b92a      	cbnz	r2, 8001060 <_realloc_r+0x24>
 8001054:	f7ff fbec 	bl	8000830 <_free_r>
 8001058:	4625      	mov	r5, r4
 800105a:	4628      	mov	r0, r5
 800105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001060:	f000 f81a 	bl	8001098 <_malloc_usable_size_r>
 8001064:	4284      	cmp	r4, r0
 8001066:	4606      	mov	r6, r0
 8001068:	d802      	bhi.n	8001070 <_realloc_r+0x34>
 800106a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800106e:	d8f4      	bhi.n	800105a <_realloc_r+0x1e>
 8001070:	4621      	mov	r1, r4
 8001072:	4638      	mov	r0, r7
 8001074:	f7ff fc48 	bl	8000908 <_malloc_r>
 8001078:	4680      	mov	r8, r0
 800107a:	b908      	cbnz	r0, 8001080 <_realloc_r+0x44>
 800107c:	4645      	mov	r5, r8
 800107e:	e7ec      	b.n	800105a <_realloc_r+0x1e>
 8001080:	42b4      	cmp	r4, r6
 8001082:	4622      	mov	r2, r4
 8001084:	4629      	mov	r1, r5
 8001086:	bf28      	it	cs
 8001088:	4632      	movcs	r2, r6
 800108a:	f7ff fbc3 	bl	8000814 <memcpy>
 800108e:	4629      	mov	r1, r5
 8001090:	4638      	mov	r0, r7
 8001092:	f7ff fbcd 	bl	8000830 <_free_r>
 8001096:	e7f1      	b.n	800107c <_realloc_r+0x40>

08001098 <_malloc_usable_size_r>:
 8001098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800109c:	1f18      	subs	r0, r3, #4
 800109e:	2b00      	cmp	r3, #0
 80010a0:	bfbc      	itt	lt
 80010a2:	580b      	ldrlt	r3, [r1, r0]
 80010a4:	18c0      	addlt	r0, r0, r3
 80010a6:	4770      	bx	lr

080010a8 <_init>:
 80010a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010aa:	bf00      	nop
 80010ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ae:	bc08      	pop	{r3}
 80010b0:	469e      	mov	lr, r3
 80010b2:	4770      	bx	lr

080010b4 <_fini>:
 80010b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b6:	bf00      	nop
 80010b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ba:	bc08      	pop	{r3}
 80010bc:	469e      	mov	lr, r3
 80010be:	4770      	bx	lr
