
serial test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000065c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007f0  080007f0  000021a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007f0  080007f0  000021a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080007f0  080007f0  000021a0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080007f0  080007f0  000021a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007f0  080007f0  000017f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007f4  080007f4  000017f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a0  20000000  080007f8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000021a0  2**0
                  CONTENTS
 10 .bss          0000001c  200001a0  200001a0  000021a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  000021a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000021a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d49  00000000  00000000  000021d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000384  00000000  00000000  00002f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  000032a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006d  00000000  00000000  00003340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d32  00000000  00000000  000033ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000cbf  00000000  00000000  000180df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007299e  00000000  00000000  00018d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008b73c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000018c  00000000  00000000  0008b780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0008b90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001a0 	.word	0x200001a0
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080007d8 	.word	0x080007d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001a4 	.word	0x200001a4
 80001d0:	080007d8 	.word	0x080007d8

080001d4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	for (volatile int i = 0; i < 800000; i++); // 100ms-ish delay
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <main+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a09      	ldr	r2, [pc, #36]	@ (8000210 <main+0x3c>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	ddf8      	ble.n	80001e0 <main+0xc>


	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 80001ee:	2200      	movs	r2, #0
 80001f0:	4908      	ldr	r1, [pc, #32]	@ (8000214 <main+0x40>)
 80001f2:	2004      	movs	r0, #4
 80001f4:	f000 f85a 	bl	80002ac <SerialInitialise>
	SerialInitialise(BAUD_115200, &USART2_PORT, 0x00);
 80001f8:	2200      	movs	r2, #0
 80001fa:	4907      	ldr	r1, [pc, #28]	@ (8000218 <main+0x44>)
 80001fc:	2004      	movs	r0, #4
 80001fe:	f000 f855 	bl	80002ac <SerialInitialise>

	enable_interrupt_USART1_PC11();
 8000202:	f000 f8fd 	bl	8000400 <enable_interrupt_USART1_PC11>
	enable_interrupt_USART2_PA3();
 8000206:	f000 f913 	bl	8000430 <enable_interrupt_USART2_PA3>
//		if (SerialReceiveChar(&USART1_PORT, &data)) {
//			SerialOutputChar(data, &USART1_PORT);
//		}
//	}
    /* Loop forever */
	for(;;);
 800020a:	bf00      	nop
 800020c:	e7fd      	b.n	800020a <main+0x36>
 800020e:	bf00      	nop
 8000210:	000c34ff 	.word	0x000c34ff
 8000214:	20000000 	.word	0x20000000
 8000218:	200000d0 	.word	0x200000d0

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022a:	2b00      	cmp	r3, #0
 800022c:	db0b      	blt.n	8000246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	f003 021f 	and.w	r2, r3, #31
 8000234:	4907      	ldr	r1, [pc, #28]	@ (8000254 <__NVIC_EnableIRQ+0x38>)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	095b      	lsrs	r3, r3, #5
 800023c:	2001      	movs	r0, #1
 800023e:	fa00 f202 	lsl.w	r2, r0, r2
 8000242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000e100 	.word	0xe000e100

08000258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	6039      	str	r1, [r7, #0]
 8000262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000268:	2b00      	cmp	r3, #0
 800026a:	db0a      	blt.n	8000282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	b2da      	uxtb	r2, r3
 8000270:	490c      	ldr	r1, [pc, #48]	@ (80002a4 <__NVIC_SetPriority+0x4c>)
 8000272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000276:	0112      	lsls	r2, r2, #4
 8000278:	b2d2      	uxtb	r2, r2
 800027a:	440b      	add	r3, r1
 800027c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000280:	e00a      	b.n	8000298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	b2da      	uxtb	r2, r3
 8000286:	4908      	ldr	r1, [pc, #32]	@ (80002a8 <__NVIC_SetPriority+0x50>)
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	f003 030f 	and.w	r3, r3, #15
 800028e:	3b04      	subs	r3, #4
 8000290:	0112      	lsls	r2, r2, #4
 8000292:	b2d2      	uxtb	r2, r2
 8000294:	440b      	add	r3, r1
 8000296:	761a      	strb	r2, [r3, #24]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	e000e100 	.word	0xe000e100
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <SerialInitialise>:
};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 80002ac:	b480      	push	{r7}
 80002ae:	b089      	sub	sp, #36	@ 0x24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
	serial_port->completion_function = completion_function;
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	649a      	str	r2, [r3, #72]	@ 0x48

	// Enable clocks
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002be:	4b4f      	ldr	r3, [pc, #316]	@ (80003fc <SerialInitialise+0x150>)
 80002c0:	69db      	ldr	r3, [r3, #28]
 80002c2:	4a4e      	ldr	r2, [pc, #312]	@ (80003fc <SerialInitialise+0x150>)
 80002c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002c8:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002ca:	4b4c      	ldr	r3, [pc, #304]	@ (80003fc <SerialInitialise+0x150>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	4a4b      	ldr	r2, [pc, #300]	@ (80003fc <SerialInitialise+0x150>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6193      	str	r3, [r2, #24]

	switch (serial_port->SerialPortGPIO) {
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	6a1b      	ldr	r3, [r3, #32]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d002      	beq.n	80002e4 <SerialInitialise+0x38>
 80002de:	2b02      	cmp	r3, #2
 80002e0:	d007      	beq.n	80002f2 <SerialInitialise+0x46>
 80002e2:	e00d      	b.n	8000300 <SerialInitialise+0x54>
		case SERIAL_GPIO_A:
			RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80002e4:	4b45      	ldr	r3, [pc, #276]	@ (80003fc <SerialInitialise+0x150>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	4a44      	ldr	r2, [pc, #272]	@ (80003fc <SerialInitialise+0x150>)
 80002ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002ee:	6153      	str	r3, [r2, #20]
			break;
 80002f0:	e006      	b.n	8000300 <SerialInitialise+0x54>
		case SERIAL_GPIO_C:
			RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80002f2:	4b42      	ldr	r3, [pc, #264]	@ (80003fc <SerialInitialise+0x150>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a41      	ldr	r2, [pc, #260]	@ (80003fc <SerialInitialise+0x150>)
 80002f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002fc:	6153      	str	r3, [r2, #20]
			break;
 80002fe:	bf00      	nop
	}

	// Set MODER (alternate function)
	uint32_t moder = *(serial_port->SerialPinModeRegister);
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	61fb      	str	r3, [r7, #28]
	moder &= ~serial_port->SerialPinModeMask;
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800030c:	43db      	mvns	r3, r3
 800030e:	69fa      	ldr	r2, [r7, #28]
 8000310:	4013      	ands	r3, r2
 8000312:	61fb      	str	r3, [r7, #28]
	moder |= serial_port->SerialPinModeValue;
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000318:	69fa      	ldr	r2, [r7, #28]
 800031a:	4313      	orrs	r3, r2
 800031c:	61fb      	str	r3, [r7, #28]
	*(serial_port->SerialPinModeRegister) = moder;
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000322:	69fa      	ldr	r2, [r7, #28]
 8000324:	601a      	str	r2, [r3, #0]

	// Set OSPEEDR (high speed)
	uint32_t ospeed = *(serial_port->SerialPinSpeedRegister);
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	61bb      	str	r3, [r7, #24]
	ospeed &= ~serial_port->SerialPinSpeedMask;
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000332:	43db      	mvns	r3, r3
 8000334:	69ba      	ldr	r2, [r7, #24]
 8000336:	4013      	ands	r3, r2
 8000338:	61bb      	str	r3, [r7, #24]
	ospeed |= serial_port->SerialPinSpeedValue;
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800033e:	69ba      	ldr	r2, [r7, #24]
 8000340:	4313      	orrs	r3, r2
 8000342:	61bb      	str	r3, [r7, #24]
	*(serial_port->SerialPinSpeedRegister) = ospeed;
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000348:	69ba      	ldr	r2, [r7, #24]
 800034a:	601a      	str	r2, [r3, #0]

	// Set AFR (alternate function 7 for USART)
	uint32_t afr = *(serial_port->SerialPinAlternateRegister);
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	617b      	str	r3, [r7, #20]
	afr &= ~serial_port->SerialPinAlternateMask;
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000358:	43db      	mvns	r3, r3
 800035a:	697a      	ldr	r2, [r7, #20]
 800035c:	4013      	ands	r3, r2
 800035e:	617b      	str	r3, [r7, #20]
	afr |= serial_port->SerialPinAlternateValue;
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000364:	697a      	ldr	r2, [r7, #20]
 8000366:	4313      	orrs	r3, r2
 8000368:	617b      	str	r3, [r7, #20]
	*(serial_port->SerialPinAlternateRegister) = afr;
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800036e:	697a      	ldr	r2, [r7, #20]
 8000370:	601a      	str	r2, [r3, #0]

	// Enable USART peripheral
	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	69d9      	ldr	r1, [r3, #28]
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	430a      	orrs	r2, r1
 8000382:	601a      	str	r2, [r3, #0]

	// Set baud rate (assuming 8 MHz clock)
	uint16_t *baud_rate_config = (uint16_t *)serial_port->BaudRate;
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	613b      	str	r3, [r7, #16]

	switch (baudRate) {
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	2b04      	cmp	r3, #4
 800038e:	d823      	bhi.n	80003d8 <SerialInitialise+0x12c>
 8000390:	a201      	add	r2, pc, #4	@ (adr r2, 8000398 <SerialInitialise+0xec>)
 8000392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000396:	bf00      	nop
 8000398:	080003ad 	.word	0x080003ad
 800039c:	080003b7 	.word	0x080003b7
 80003a0:	080003c1 	.word	0x080003c1
 80003a4:	080003c9 	.word	0x080003c9
 80003a8:	080003d1 	.word	0x080003d1
		case BAUD_9600:   *baud_rate_config = 0x341; break;
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	f240 3241 	movw	r2, #833	@ 0x341
 80003b2:	801a      	strh	r2, [r3, #0]
 80003b4:	e010      	b.n	80003d8 <SerialInitialise+0x12c>
		case BAUD_19200:  *baud_rate_config = 0x1A1; break;
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80003bc:	801a      	strh	r2, [r3, #0]
 80003be:	e00b      	b.n	80003d8 <SerialInitialise+0x12c>
		case BAUD_38400:  *baud_rate_config = 0xD1;  break;
 80003c0:	693b      	ldr	r3, [r7, #16]
 80003c2:	22d1      	movs	r2, #209	@ 0xd1
 80003c4:	801a      	strh	r2, [r3, #0]
 80003c6:	e007      	b.n	80003d8 <SerialInitialise+0x12c>
		case BAUD_57600:  *baud_rate_config = 0x8B;  break;
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	228b      	movs	r2, #139	@ 0x8b
 80003cc:	801a      	strh	r2, [r3, #0]
 80003ce:	e003      	b.n	80003d8 <SerialInitialise+0x12c>
		case BAUD_115200: *baud_rate_config = 0x46;  break;
 80003d0:	693b      	ldr	r3, [r7, #16]
 80003d2:	2246      	movs	r2, #70	@ 0x46
 80003d4:	801a      	strh	r2, [r3, #0]
 80003d6:	bf00      	nop
	}

	// Enable TX, RX and USART
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	f042 020d 	orr.w	r2, r2, #13
 80003e6:	601a      	str	r2, [r3, #0]

	//make sure start not busy
	serial_port->TXbusy=0;
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	2200      	movs	r2, #0
 80003ec:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf
}
 80003f0:	bf00      	nop
 80003f2:	3724      	adds	r7, #36	@ 0x24
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000

08000400 <enable_interrupt_USART1_PC11>:


void enable_interrupt_USART1_PC11() {
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
}
 8000406:	bf00      	nop
    __disable_irq();

    // Enable NVIC interrupt for USART1
    NVIC_SetPriority(USART1_IRQn, 5);
 8000408:	2105      	movs	r1, #5
 800040a:	2025      	movs	r0, #37	@ 0x25
 800040c:	f7ff ff24 	bl	8000258 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART1_IRQn);
 8000410:	2025      	movs	r0, #37	@ 0x25
 8000412:	f7ff ff03 	bl	800021c <__NVIC_EnableIRQ>

    // Enable RXNE (receive register not empty) interrupt
    USART1->CR1 |= USART_CR1_RXNEIE;
 8000416:	4b05      	ldr	r3, [pc, #20]	@ (800042c <enable_interrupt_USART1_PC11+0x2c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a04      	ldr	r2, [pc, #16]	@ (800042c <enable_interrupt_USART1_PC11+0x2c>)
 800041c:	f043 0320 	orr.w	r3, r3, #32
 8000420:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000422:	b662      	cpsie	i
}
 8000424:	bf00      	nop

    __enable_irq();
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40013800 	.word	0x40013800

08000430 <enable_interrupt_USART2_PA3>:


void enable_interrupt_USART2_PA3() {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
}
 8000436:	bf00      	nop
    __disable_irq();

    NVIC_SetPriority(USART2_IRQn, 4);
 8000438:	2104      	movs	r1, #4
 800043a:	2026      	movs	r0, #38	@ 0x26
 800043c:	f7ff ff0c 	bl	8000258 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART2_IRQn);
 8000440:	2026      	movs	r0, #38	@ 0x26
 8000442:	f7ff feeb 	bl	800021c <__NVIC_EnableIRQ>

    USART2->CR1 |= USART_CR1_RXNEIE;
 8000446:	4b05      	ldr	r3, [pc, #20]	@ (800045c <enable_interrupt_USART2_PA3+0x2c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a04      	ldr	r2, [pc, #16]	@ (800045c <enable_interrupt_USART2_PA3+0x2c>)
 800044c:	f043 0320 	orr.w	r3, r3, #32
 8000450:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000452:	b662      	cpsie	i
}
 8000454:	bf00      	nop

    __enable_irq();
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40004400 	.word	0x40004400

08000460 <USART1_EXTI25_IRQHandler>:


void USART1_EXTI25_IRQHandler(void) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0

    if (USART1->ISR & USART_ISR_RXNE) {
 8000466:	4b47      	ldr	r3, [pc, #284]	@ (8000584 <USART1_EXTI25_IRQHandler+0x124>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	f003 0320 	and.w	r3, r3, #32
 800046e:	2b00      	cmp	r3, #0
 8000470:	d04f      	beq.n	8000512 <USART1_EXTI25_IRQHandler+0xb2>
        char c = USART1->RDR;
 8000472:	4b44      	ldr	r3, [pc, #272]	@ (8000584 <USART1_EXTI25_IRQHandler+0x124>)
 8000474:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000476:	b29b      	uxth	r3, r3
 8000478:	71fb      	strb	r3, [r7, #7]

        if (USART1_PORT.RXIndex < BUFFER_SIZE - 2) {  // -2 to fit \n and \0
 800047a:	4b43      	ldr	r3, [pc, #268]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 800047c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8000480:	b2db      	uxtb	r3, r3
 8000482:	2b3d      	cmp	r3, #61	@ 0x3d
 8000484:	d841      	bhi.n	800050a <USART1_EXTI25_IRQHandler+0xaa>
            if (c == '\r') {
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b0d      	cmp	r3, #13
 800048a:	d12e      	bne.n	80004ea <USART1_EXTI25_IRQHandler+0x8a>
                USART1_PORT.RXBuffer[USART1_PORT.RXIndex++] = '\0';
 800048c:	4b3e      	ldr	r3, [pc, #248]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 800048e:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8000492:	b2db      	uxtb	r3, r3
 8000494:	1c5a      	adds	r2, r3, #1
 8000496:	b2d1      	uxtb	r1, r2
 8000498:	4a3b      	ldr	r2, [pc, #236]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 800049a:	f882 108c 	strb.w	r1, [r2, #140]	@ 0x8c
 800049e:	461a      	mov	r2, r3
 80004a0:	4b39      	ldr	r3, [pc, #228]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 80004a2:	4413      	add	r3, r2
 80004a4:	2200      	movs	r2, #0
 80004a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

                if (USART1_PORT.completion_function) {
 80004aa:	4b37      	ldr	r3, [pc, #220]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 80004ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d007      	beq.n	80004c2 <USART1_EXTI25_IRQHandler+0x62>
					USART1_PORT.completion_function(USART1_PORT.RXIndex);
 80004b2:	4b35      	ldr	r3, [pc, #212]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 80004b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004b6:	4a34      	ldr	r2, [pc, #208]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 80004b8:	f892 208c 	ldrb.w	r2, [r2, #140]	@ 0x8c
 80004bc:	b2d2      	uxtb	r2, r2
 80004be:	4610      	mov	r0, r2
 80004c0:	4798      	blx	r3
                }

                SerialOutputStringInterrupt(USART1_PORT.RXBuffer, &USART2_PORT);
 80004c2:	4932      	ldr	r1, [pc, #200]	@ (800058c <USART1_EXTI25_IRQHandler+0x12c>)
 80004c4:	4832      	ldr	r0, [pc, #200]	@ (8000590 <USART1_EXTI25_IRQHandler+0x130>)
 80004c6:	f000 f8f3 	bl	80006b0 <SerialOutputStringInterrupt>
//                SerialOutputString(USART1_PORT.RXBuffer, &USART1_PORT);

                //not ideal but makeser sure it waits before sending to usart port 1
                while (USART2_PORT.TXbusy);
 80004ca:	bf00      	nop
 80004cc:	4b2f      	ldr	r3, [pc, #188]	@ (800058c <USART1_EXTI25_IRQHandler+0x12c>)
 80004ce:	f893 30cf 	ldrb.w	r3, [r3, #207]	@ 0xcf
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d1f9      	bne.n	80004cc <USART1_EXTI25_IRQHandler+0x6c>
                SerialOutputStringInterrupt(USART1_PORT.RXBuffer, &USART1_PORT);
 80004d8:	492b      	ldr	r1, [pc, #172]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 80004da:	482d      	ldr	r0, [pc, #180]	@ (8000590 <USART1_EXTI25_IRQHandler+0x130>)
 80004dc:	f000 f8e8 	bl	80006b0 <SerialOutputStringInterrupt>
                //  Start TX
                // Enable TX interrupt
//                USART1_PORT.string_ready = 1;

                // Reset RX buffer
                USART1_PORT.RXIndex = 0;
 80004e0:	4b29      	ldr	r3, [pc, #164]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 80004e8:	e013      	b.n	8000512 <USART1_EXTI25_IRQHandler+0xb2>


            }else{
                USART1_PORT.RXBuffer[USART1_PORT.RXIndex++] = c;
 80004ea:	4b27      	ldr	r3, [pc, #156]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 80004ec:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	1c5a      	adds	r2, r3, #1
 80004f4:	b2d1      	uxtb	r1, r2
 80004f6:	4a24      	ldr	r2, [pc, #144]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 80004f8:	f882 108c 	strb.w	r1, [r2, #140]	@ 0x8c
 80004fc:	461a      	mov	r2, r3
 80004fe:	4b22      	ldr	r3, [pc, #136]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 8000500:	4413      	add	r3, r2
 8000502:	79fa      	ldrb	r2, [r7, #7]
 8000504:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8000508:	e003      	b.n	8000512 <USART1_EXTI25_IRQHandler+0xb2>
            }
        } else {
            USART1_PORT.RXIndex = 0; // Overflow safety
 800050a:	4b1f      	ldr	r3, [pc, #124]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 800050c:	2200      	movs	r2, #0
 800050e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
        }
    }


	if (USART1->ISR & USART_ISR_TXE) {
 8000512:	4b1c      	ldr	r3, [pc, #112]	@ (8000584 <USART1_EXTI25_IRQHandler+0x124>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800051a:	2b00      	cmp	r3, #0
 800051c:	d02d      	beq.n	800057a <USART1_EXTI25_IRQHandler+0x11a>
		if (USART1_PORT.TXIndex < USART1_PORT.TXLength) {
 800051e:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 8000520:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b18      	ldr	r3, [pc, #96]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 8000528:	f893 30ce 	ldrb.w	r3, [r3, #206]	@ 0xce
 800052c:	b2db      	uxtb	r3, r3
 800052e:	429a      	cmp	r2, r3
 8000530:	d211      	bcs.n	8000556 <USART1_EXTI25_IRQHandler+0xf6>
			USART1->TDR = USART1_PORT.TXBuffer[USART1_PORT.TXIndex++];
 8000532:	4b15      	ldr	r3, [pc, #84]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 8000534:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000538:	b2db      	uxtb	r3, r3
 800053a:	1c5a      	adds	r2, r3, #1
 800053c:	b2d1      	uxtb	r1, r2
 800053e:	4a12      	ldr	r2, [pc, #72]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 8000540:	f882 10cd 	strb.w	r1, [r2, #205]	@ 0xcd
 8000544:	461a      	mov	r2, r3
 8000546:	4b10      	ldr	r3, [pc, #64]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 8000548:	4413      	add	r3, r2
 800054a:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <USART1_EXTI25_IRQHandler+0x124>)
 8000552:	851a      	strh	r2, [r3, #40]	@ 0x28
			USART1_PORT.TXIndex = 0;
			USART1_PORT.TXLength = 0;
			USART1_PORT.TXbusy = 0;
		}
	}
}
 8000554:	e011      	b.n	800057a <USART1_EXTI25_IRQHandler+0x11a>
			USART1->CR1 &= ~USART_CR1_TXEIE; // Disable TXE interrupt
 8000556:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <USART1_EXTI25_IRQHandler+0x124>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a0a      	ldr	r2, [pc, #40]	@ (8000584 <USART1_EXTI25_IRQHandler+0x124>)
 800055c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000560:	6013      	str	r3, [r2, #0]
			USART1_PORT.TXIndex = 0;
 8000562:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
			USART1_PORT.TXLength = 0;
 800056a:	4b07      	ldr	r3, [pc, #28]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 800056c:	2200      	movs	r2, #0
 800056e:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
			USART1_PORT.TXbusy = 0;
 8000572:	4b05      	ldr	r3, [pc, #20]	@ (8000588 <USART1_EXTI25_IRQHandler+0x128>)
 8000574:	2200      	movs	r2, #0
 8000576:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40013800 	.word	0x40013800
 8000588:	20000000 	.word	0x20000000
 800058c:	200000d0 	.word	0x200000d0
 8000590:	2000004c 	.word	0x2000004c

08000594 <USART2_EXTI26_IRQHandler>:

void USART2_EXTI26_IRQHandler(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
    if (USART2->ISR & USART_ISR_RXNE) {
 800059a:	4b41      	ldr	r3, [pc, #260]	@ (80006a0 <USART2_EXTI26_IRQHandler+0x10c>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	f003 0320 	and.w	r3, r3, #32
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d044      	beq.n	8000630 <USART2_EXTI26_IRQHandler+0x9c>
        char c = USART2->RDR;
 80005a6:	4b3e      	ldr	r3, [pc, #248]	@ (80006a0 <USART2_EXTI26_IRQHandler+0x10c>)
 80005a8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	71fb      	strb	r3, [r7, #7]

        if (USART2_PORT.RXIndex < BUFFER_SIZE - 2) {
 80005ae:	4b3d      	ldr	r3, [pc, #244]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 80005b0:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b3d      	cmp	r3, #61	@ 0x3d
 80005b8:	d836      	bhi.n	8000628 <USART2_EXTI26_IRQHandler+0x94>
            if (c == '\r') {
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b0d      	cmp	r3, #13
 80005be:	d123      	bne.n	8000608 <USART2_EXTI26_IRQHandler+0x74>
                USART2_PORT.RXBuffer[USART2_PORT.RXIndex++] = '\0';
 80005c0:	4b38      	ldr	r3, [pc, #224]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 80005c2:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	1c5a      	adds	r2, r3, #1
 80005ca:	b2d1      	uxtb	r1, r2
 80005cc:	4a35      	ldr	r2, [pc, #212]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 80005ce:	f882 108c 	strb.w	r1, [r2, #140]	@ 0x8c
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b33      	ldr	r3, [pc, #204]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 80005d6:	4413      	add	r3, r2
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

                if (USART2_PORT.completion_function) {
 80005de:	4b31      	ldr	r3, [pc, #196]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 80005e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d007      	beq.n	80005f6 <USART2_EXTI26_IRQHandler+0x62>
                    USART2_PORT.completion_function(USART2_PORT.RXIndex);
 80005e6:	4b2f      	ldr	r3, [pc, #188]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 80005e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ea:	4a2e      	ldr	r2, [pc, #184]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 80005ec:	f892 208c 	ldrb.w	r2, [r2, #140]	@ 0x8c
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	4610      	mov	r0, r2
 80005f4:	4798      	blx	r3
                }

                //relay message
                SerialOutputStringInterrupt(USART2_PORT.RXBuffer, &USART1_PORT);
 80005f6:	492c      	ldr	r1, [pc, #176]	@ (80006a8 <USART2_EXTI26_IRQHandler+0x114>)
 80005f8:	482c      	ldr	r0, [pc, #176]	@ (80006ac <USART2_EXTI26_IRQHandler+0x118>)
 80005fa:	f000 f859 	bl	80006b0 <SerialOutputStringInterrupt>
                USART2_PORT.RXIndex = 0;
 80005fe:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 8000600:	2200      	movs	r2, #0
 8000602:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8000606:	e013      	b.n	8000630 <USART2_EXTI26_IRQHandler+0x9c>
            } else {
                USART2_PORT.RXBuffer[USART2_PORT.RXIndex++] = c;
 8000608:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 800060a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800060e:	b2db      	uxtb	r3, r3
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	b2d1      	uxtb	r1, r2
 8000614:	4a23      	ldr	r2, [pc, #140]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 8000616:	f882 108c 	strb.w	r1, [r2, #140]	@ 0x8c
 800061a:	461a      	mov	r2, r3
 800061c:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 800061e:	4413      	add	r3, r2
 8000620:	79fa      	ldrb	r2, [r7, #7]
 8000622:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8000626:	e003      	b.n	8000630 <USART2_EXTI26_IRQHandler+0x9c>
            }
        } else {
            USART2_PORT.RXIndex = 0; // overflow safety
 8000628:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 800062a:	2200      	movs	r2, #0
 800062c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
        }
    }

    if (USART2->ISR & USART_ISR_TXE) {
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <USART2_EXTI26_IRQHandler+0x10c>)
 8000632:	69db      	ldr	r3, [r3, #28]
 8000634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000638:	2b00      	cmp	r3, #0
 800063a:	d02d      	beq.n	8000698 <USART2_EXTI26_IRQHandler+0x104>
    		if (USART2_PORT.TXIndex < USART2_PORT.TXLength) {
 800063c:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 800063e:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000642:	b2da      	uxtb	r2, r3
 8000644:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 8000646:	f893 30ce 	ldrb.w	r3, [r3, #206]	@ 0xce
 800064a:	b2db      	uxtb	r3, r3
 800064c:	429a      	cmp	r2, r3
 800064e:	d211      	bcs.n	8000674 <USART2_EXTI26_IRQHandler+0xe0>
    			USART2->TDR = USART1_PORT.TXBuffer[USART2_PORT.TXIndex++];
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 8000652:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8000656:	b2db      	uxtb	r3, r3
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	b2d1      	uxtb	r1, r2
 800065c:	4a11      	ldr	r2, [pc, #68]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 800065e:	f882 10cd 	strb.w	r1, [r2, #205]	@ 0xcd
 8000662:	461a      	mov	r2, r3
 8000664:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <USART2_EXTI26_IRQHandler+0x114>)
 8000666:	4413      	add	r3, r2
 8000668:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <USART2_EXTI26_IRQHandler+0x10c>)
 8000670:	851a      	strh	r2, [r3, #40]	@ 0x28
    			USART2_PORT.TXIndex = 0;
    			USART2_PORT.TXLength = 0;
    			USART2_PORT.TXbusy = 0;
    		}
    	}
}
 8000672:	e011      	b.n	8000698 <USART2_EXTI26_IRQHandler+0x104>
    			USART2->CR1 &= ~USART_CR1_TXEIE; // Disable TXE interrupt
 8000674:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <USART2_EXTI26_IRQHandler+0x10c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a09      	ldr	r2, [pc, #36]	@ (80006a0 <USART2_EXTI26_IRQHandler+0x10c>)
 800067a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800067e:	6013      	str	r3, [r2, #0]
    			USART2_PORT.TXIndex = 0;
 8000680:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 8000682:	2200      	movs	r2, #0
 8000684:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
    			USART2_PORT.TXLength = 0;
 8000688:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
    			USART2_PORT.TXbusy = 0;
 8000690:	4b04      	ldr	r3, [pc, #16]	@ (80006a4 <USART2_EXTI26_IRQHandler+0x110>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40004400 	.word	0x40004400
 80006a4:	200000d0 	.word	0x200000d0
 80006a8:	20000000 	.word	0x20000000
 80006ac:	2000011c 	.word	0x2000011c

080006b0 <SerialOutputStringInterrupt>:





void SerialOutputStringInterrupt(uint8_t *pt, SerialPort *serial_port) {
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
	if (serial_port->TXbusy) {
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	f893 30cf 	ldrb.w	r3, [r3, #207]	@ 0xcf
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d133      	bne.n	800072e <SerialOutputStringInterrupt+0x7e>
			return;  // TX already in progress, drop this transmission
		}


	uint8_t i = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	73fb      	strb	r3, [r7, #15]
	while (pt[i] != '\0' && i < BUFFER_SIZE - 1) {
 80006ca:	e00c      	b.n	80006e6 <SerialOutputStringInterrupt+0x36>
		serial_port->TXBuffer[i] = pt[i];
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	441a      	add	r2, r3
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	7811      	ldrb	r1, [r2, #0]
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	4413      	add	r3, r2
 80006da:	460a      	mov	r2, r1
 80006dc:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
		i++;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	3301      	adds	r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
	while (pt[i] != '\0' && i < BUFFER_SIZE - 1) {
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	4413      	add	r3, r2
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d002      	beq.n	80006f8 <SerialOutputStringInterrupt+0x48>
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80006f6:	d9e9      	bls.n	80006cc <SerialOutputStringInterrupt+0x1c>
	}
	serial_port->TXBuffer[i] = '\0'; // null-terminate
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	683a      	ldr	r2, [r7, #0]
 80006fc:	4413      	add	r3, r2
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
	serial_port->TXLength = i;
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	7bfa      	ldrb	r2, [r7, #15]
 8000708:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
	serial_port->TXIndex = 0;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	2200      	movs	r2, #0
 8000710:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
	serial_port->TXbusy = 1;
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	2201      	movs	r2, #1
 8000718:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf
	// Enable TXE interrupt
	*(serial_port->ControlRegister1) |= USART_CR1_TXEIE;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	e000      	b.n	8000730 <SerialOutputStringInterrupt+0x80>
			return;  // TX already in progress, drop this transmission
 800072e:	bf00      	nop

}
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800073c:	480d      	ldr	r0, [pc, #52]	@ (8000774 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800073e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000740:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000744:	480c      	ldr	r0, [pc, #48]	@ (8000778 <LoopForever+0x6>)
  ldr r1, =_edata
 8000746:	490d      	ldr	r1, [pc, #52]	@ (800077c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000748:	4a0d      	ldr	r2, [pc, #52]	@ (8000780 <LoopForever+0xe>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800075c:	4c0a      	ldr	r4, [pc, #40]	@ (8000788 <LoopForever+0x16>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800076a:	f000 f811 	bl	8000790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076e:	f7ff fd31 	bl	80001d4 <main>

08000772 <LoopForever>:

LoopForever:
  b LoopForever
 8000772:	e7fe      	b.n	8000772 <LoopForever>
  ldr   r0, =_estack
 8000774:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800077c:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8000780:	080007f8 	.word	0x080007f8
  ldr r2, =_sbss
 8000784:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8000788:	200001bc 	.word	0x200001bc

0800078c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800078c:	e7fe      	b.n	800078c <ADC1_2_IRQHandler>
	...

08000790 <__libc_init_array>:
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	4d0d      	ldr	r5, [pc, #52]	@ (80007c8 <__libc_init_array+0x38>)
 8000794:	4c0d      	ldr	r4, [pc, #52]	@ (80007cc <__libc_init_array+0x3c>)
 8000796:	1b64      	subs	r4, r4, r5
 8000798:	10a4      	asrs	r4, r4, #2
 800079a:	2600      	movs	r6, #0
 800079c:	42a6      	cmp	r6, r4
 800079e:	d109      	bne.n	80007b4 <__libc_init_array+0x24>
 80007a0:	4d0b      	ldr	r5, [pc, #44]	@ (80007d0 <__libc_init_array+0x40>)
 80007a2:	4c0c      	ldr	r4, [pc, #48]	@ (80007d4 <__libc_init_array+0x44>)
 80007a4:	f000 f818 	bl	80007d8 <_init>
 80007a8:	1b64      	subs	r4, r4, r5
 80007aa:	10a4      	asrs	r4, r4, #2
 80007ac:	2600      	movs	r6, #0
 80007ae:	42a6      	cmp	r6, r4
 80007b0:	d105      	bne.n	80007be <__libc_init_array+0x2e>
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007b8:	4798      	blx	r3
 80007ba:	3601      	adds	r6, #1
 80007bc:	e7ee      	b.n	800079c <__libc_init_array+0xc>
 80007be:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c2:	4798      	blx	r3
 80007c4:	3601      	adds	r6, #1
 80007c6:	e7f2      	b.n	80007ae <__libc_init_array+0x1e>
 80007c8:	080007f0 	.word	0x080007f0
 80007cc:	080007f0 	.word	0x080007f0
 80007d0:	080007f0 	.word	0x080007f0
 80007d4:	080007f4 	.word	0x080007f4

080007d8 <_init>:
 80007d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007da:	bf00      	nop
 80007dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007de:	bc08      	pop	{r3}
 80007e0:	469e      	mov	lr, r3
 80007e2:	4770      	bx	lr

080007e4 <_fini>:
 80007e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007e6:	bf00      	nop
 80007e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ea:	bc08      	pop	{r3}
 80007ec:	469e      	mov	lr, r3
 80007ee:	4770      	bx	lr
