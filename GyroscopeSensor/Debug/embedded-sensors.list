
embedded-sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08008530  08008530  00009530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008950  08008950  0000a2ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008950  08008950  00009950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008958  08008958  0000a2ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008958  08008958  00009958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800895c  0800895c  0000995c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  08008960  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a2ec  2**0
                  CONTENTS
 10 .bss          000005cc  200002ec  200002ec  0000a2ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008b8  200008b8  0000a2ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a2ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f17d  00000000  00000000  0000a31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b73  00000000  00000000  00019499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  0001c010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6f  00000000  00000000  0001cf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003be9d  00000000  00000000  0001da9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012cde  00000000  00000000  0005993c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb31a  00000000  00000000  0006c61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00157934  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f98  00000000  00000000  00157978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0015c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002ec 	.word	0x200002ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008518 	.word	0x08008518

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f0 	.word	0x200002f0
 80001cc:	08008518 	.word	0x08008518

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <TIM6_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void TIM6_Init(void) {
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
    // Enable TIM6 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <TIM6_Init+0x4c>)
 8000c4e:	69db      	ldr	r3, [r3, #28]
 8000c50:	4a10      	ldr	r2, [pc, #64]	@ (8000c94 <TIM6_Init+0x4c>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	61d3      	str	r3, [r2, #28]

    // Set TIM6 prescaler and ARR for 1ms time base
    // 72 MHz / 7200 = 10 kHz -> 0.1ms tick
    TIM6->PSC = 7200 - 1;   // Prescaler
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <TIM6_Init+0x50>)
 8000c5a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000c5e:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM6->ARR = 10 - 1;     // Auto-reload for 1ms period
 8000c60:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <TIM6_Init+0x50>)
 8000c62:	2209      	movs	r2, #9
 8000c64:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM6->EGR |= TIM_EGR_UG;      // Force update event to load prescaler
 8000c66:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <TIM6_Init+0x50>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c98 <TIM6_Init+0x50>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6153      	str	r3, [r2, #20]
    TIM6->SR &= ~TIM_SR_UIF;      // Clear update interrupt flag
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <TIM6_Init+0x50>)
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <TIM6_Init+0x50>)
 8000c78:	f023 0301 	bic.w	r3, r3, #1
 8000c7c:	6113      	str	r3, [r2, #16]
    TIM6->CR1 |= TIM_CR1_CEN;     // Start the timer
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <TIM6_Init+0x50>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a05      	ldr	r2, [pc, #20]	@ (8000c98 <TIM6_Init+0x50>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6013      	str	r3, [r2, #0]
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40001000 	.word	0x40001000

08000c9c <delay_ms>:

void delay_ms(uint32_t ms) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms; i++) {
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	e012      	b.n	8000cd0 <delay_ms+0x34>
        TIM6->CNT = 0;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <delay_ms+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	625a      	str	r2, [r3, #36]	@ 0x24
        TIM6->SR &= ~TIM_SR_UIF;           // Clear update interrupt flag
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <delay_ms+0x4c>)
 8000cb2:	691b      	ldr	r3, [r3, #16]
 8000cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce8 <delay_ms+0x4c>)
 8000cb6:	f023 0301 	bic.w	r3, r3, #1
 8000cba:	6113      	str	r3, [r2, #16]
        while (!(TIM6->SR & TIM_SR_UIF));  // Wait for update event
 8000cbc:	bf00      	nop
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <delay_ms+0x4c>)
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0f9      	beq.n	8000cbe <delay_ms+0x22>
    for (uint32_t i = 0; i < ms; i++) {
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d3e8      	bcc.n	8000caa <delay_ms+0xe>
    }
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40001000 	.word	0x40001000
 8000cec:	00000000 	.word	0x00000000

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b5b0      	push	{r4, r5, r7, lr}
 8000cf2:	b0ae      	sub	sp, #184	@ 0xb8
 8000cf4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf6:	f000 fee3 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfa:	f000 f9f1 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfe:	f000 fb17 	bl	8001330 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d02:	f000 fa75 	bl	80011f0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d06:	f000 fab3 	bl	8001270 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000d0a:	f000 faef 	bl	80012ec <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8000d0e:	f002 fe7b 	bl	8003a08 <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 8000d12:	f002 ff51 	bl	8003bb8 <BSP_GYRO_Init>
  TIM6_Init();
 8000d16:	f7ff ff97 	bl	8000c48 <TIM6_Init>


  SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	49e6      	ldr	r1, [pc, #920]	@ (80010b8 <main+0x3c8>)
 8000d1e:	2004      	movs	r0, #4
 8000d20:	f000 fbbe 	bl	80014a0 <SerialInitialise>
  uint8_t string_to_send[64] = "This is a string !\r\n";
 8000d24:	4be5      	ldr	r3, [pc, #916]	@ (80010bc <main+0x3cc>)
 8000d26:	f107 0420 	add.w	r4, r7, #32
 8000d2a:	461d      	mov	r5, r3
 8000d2c:	6828      	ldr	r0, [r5, #0]
 8000d2e:	6869      	ldr	r1, [r5, #4]
 8000d30:	68aa      	ldr	r2, [r5, #8]
 8000d32:	68eb      	ldr	r3, [r5, #12]
 8000d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d36:	6928      	ldr	r0, [r5, #16]
 8000d38:	6020      	str	r0, [r4, #0]
 8000d3a:	7d2b      	ldrb	r3, [r5, #20]
 8000d3c:	7123      	strb	r3, [r4, #4]
 8000d3e:	f107 0335 	add.w	r3, r7, #53	@ 0x35
 8000d42:	222b      	movs	r2, #43	@ 0x2b
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f004 ffab 	bl	8005ca2 <memset>

  int16_t acc_values[3];
  float float_acc_values[3];
  float gyro_values[3];

  float sum_x = 0x0;
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  float sum_y = 0x0;
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  float sum_z = 0x0;
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  float i = 0;
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  float accel_x_bias = 0;
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  float accel_y_bias = 0;
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  float accel_z_bias = 0;
 8000d7c:	f04f 0300 	mov.w	r3, #0
 8000d80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  float pitch;
  float roll;
  float accel_x;
  float accel_y;
  float accel_z;
  float gyroAngleX = 0;
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  float gyroAngleY = 0;
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  float angleX = 0;
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  float angleY = 0;
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float alpha = 0.1;
 8000da4:	4bc6      	ldr	r3, [pc, #792]	@ (80010c0 <main+0x3d0>)
 8000da6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  float dt = 0.01;
 8000daa:	4bc6      	ldr	r3, [pc, #792]	@ (80010c4 <main+0x3d4>)
 8000dac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  while (1)
  {
	  BSP_ACCELERO_GetXYZ(&acc_values[0]);
 8000dae:	f107 0318 	add.w	r3, r7, #24
 8000db2:	4618      	mov	r0, r3
 8000db4:	f002 feec 	bl	8003b90 <BSP_ACCELERO_GetXYZ>
	  BSP_GYRO_GetXYZ(&gyro_values[0]);
 8000db8:	463b      	mov	r3, r7
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 ffb0 	bl	8003d20 <BSP_GYRO_GetXYZ>

	  accel_x = (float)acc_values[0] / 1500.;
 8000dc0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000dc4:	ee07 3a90 	vmov	s15, r3
 8000dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dcc:	eddf 6abe 	vldr	s13, [pc, #760]	@ 80010c8 <main+0x3d8>
 8000dd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dd4:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
	  accel_y = (float)acc_values[1] / 1500.;
 8000dd8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ddc:	ee07 3a90 	vmov	s15, r3
 8000de0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000de4:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 80010c8 <main+0x3d8>
 8000de8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dec:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	  accel_z = (float)acc_values[2] / 1500.;
 8000df0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000df4:	ee07 3a90 	vmov	s15, r3
 8000df8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dfc:	eddf 6ab2 	vldr	s13, [pc, #712]	@ 80010c8 <main+0x3d8>
 8000e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e04:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70


	  //sprintf(string_to_send, "%0.3f,%0.3f,%0.3f\r\n",accel_x,accel_y,accel_z);
	  //SerialOutputString(string_to_send, &USART1_PORT);

	  if (i<101){
 8000e08:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8000e0c:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 80010cc <main+0x3dc>
 8000e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e18:	d534      	bpl.n	8000e84 <main+0x194>
		  sum_x += accel_x;
 8000e1a:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8000e1e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8000e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e26:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
		  sum_y += accel_y;
 8000e2a:	ed97 7a2a 	vldr	s14, [r7, #168]	@ 0xa8
 8000e2e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8000e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e36:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
		  sum_z += accel_z - 10.0;
 8000e3a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8000e3e:	f7ff fb83 	bl	8000548 <__aeabi_f2d>
 8000e42:	4604      	mov	r4, r0
 8000e44:	460d      	mov	r5, r1
 8000e46:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000e48:	f7ff fb7e 	bl	8000548 <__aeabi_f2d>
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	4b9f      	ldr	r3, [pc, #636]	@ (80010d0 <main+0x3e0>)
 8000e52:	f7ff fa19 	bl	8000288 <__aeabi_dsub>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	4629      	mov	r1, r5
 8000e5e:	f7ff fa15 	bl	800028c <__adddf3>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4610      	mov	r0, r2
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f7ff fe9d 	bl	8000ba8 <__aeabi_d2f>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		  i++;
 8000e74:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8000e78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e80:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0

	  }

	  	  if (i == 101){
 8000e84:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8000e88:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 80010cc <main+0x3dc>
 8000e8c:	eef4 7a47 	vcmp.f32	s15, s14
 8000e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e94:	f040 8105 	bne.w	80010a2 <main+0x3b2>
		  accel_x_bias = 0;
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		  accel_y_bias = 0;
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		  accel_z_bias = 0;
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  //sprintf(string_to_send, "Bias Values: %0.3f,%0.3f,%0.3f", accel_x_bias,accel_y_bias,accel_z_bias);
		  //SerialOutputString(string_to_send, &USART1_PORT);
		  pitch = atan2(accel_x - accel_x_bias, sqrt((accel_y - accel_y_bias)*(accel_y - accel_y_bias) + (accel_z - accel_z_bias)*(accel_z - accel_z_bias))) * 180.0 / 3.14;
 8000eb0:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8000eb4:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8000eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ebc:	ee17 0a90 	vmov	r0, s15
 8000ec0:	f7ff fb42 	bl	8000548 <__aeabi_f2d>
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	460d      	mov	r5, r1
 8000ec8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000ecc:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8000ed0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ed4:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8000ed8:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8000edc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee4:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8000ee8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000eec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000ef0:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 8000ef4:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000ef8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f04:	ee17 0a90 	vmov	r0, s15
 8000f08:	f7ff fb1e 	bl	8000548 <__aeabi_f2d>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	ec43 2b10 	vmov	d0, r2, r3
 8000f14:	f006 ff94 	bl	8007e40 <sqrt>
 8000f18:	eeb0 7a40 	vmov.f32	s14, s0
 8000f1c:	eef0 7a60 	vmov.f32	s15, s1
 8000f20:	eeb0 1a47 	vmov.f32	s2, s14
 8000f24:	eef0 1a67 	vmov.f32	s3, s15
 8000f28:	ec45 4b10 	vmov	d0, r4, r5
 8000f2c:	f006 ff86 	bl	8007e3c <atan2>
 8000f30:	ec51 0b10 	vmov	r0, r1, d0
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	4b66      	ldr	r3, [pc, #408]	@ (80010d4 <main+0x3e4>)
 8000f3a:	f7ff fb5d 	bl	80005f8 <__aeabi_dmul>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4610      	mov	r0, r2
 8000f44:	4619      	mov	r1, r3
 8000f46:	a35a      	add	r3, pc, #360	@ (adr r3, 80010b0 <main+0x3c0>)
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	f7ff fc7e 	bl	800084c <__aeabi_ddiv>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	f7ff fe26 	bl	8000ba8 <__aeabi_d2f>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
		  roll = atan2(accel_y-accel_y_bias,accel_z - accel_z_bias) * 180.0 / 3.14;
 8000f60:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000f64:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8000f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f6c:	ee17 0a90 	vmov	r0, s15
 8000f70:	f7ff faea 	bl	8000548 <__aeabi_f2d>
 8000f74:	4604      	mov	r4, r0
 8000f76:	460d      	mov	r5, r1
 8000f78:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8000f7c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f84:	ee17 0a90 	vmov	r0, s15
 8000f88:	f7ff fade 	bl	8000548 <__aeabi_f2d>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	ec43 2b11 	vmov	d1, r2, r3
 8000f94:	ec45 4b10 	vmov	d0, r4, r5
 8000f98:	f006 ff50 	bl	8007e3c <atan2>
 8000f9c:	ec51 0b10 	vmov	r0, r1, d0
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	4b4b      	ldr	r3, [pc, #300]	@ (80010d4 <main+0x3e4>)
 8000fa6:	f7ff fb27 	bl	80005f8 <__aeabi_dmul>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4610      	mov	r0, r2
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	a33f      	add	r3, pc, #252	@ (adr r3, 80010b0 <main+0x3c0>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f7ff fc48 	bl	800084c <__aeabi_ddiv>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff fdf0 	bl	8000ba8 <__aeabi_d2f>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	66bb      	str	r3, [r7, #104]	@ 0x68
		  float gyroRateX = gyro_values[0]/ 131.0;
 8000fcc:	ed97 7a00 	vldr	s14, [r7]
 8000fd0:	eddf 6a41 	vldr	s13, [pc, #260]	@ 80010d8 <main+0x3e8>
 8000fd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd8:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		  float gyroRateY = gyro_values[1]/ 131.0;
 8000fdc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fe0:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80010d8 <main+0x3e8>
 8000fe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe8:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		  gyroAngleX += gyroRateX * dt;
 8000fec:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8000ff0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8000ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff8:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8000ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001000:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		  gyroAngleY += gyroRateY * dt;
 8001004:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001008:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800100c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001010:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8001014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001018:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98

		  angleX = alpha*gyroAngleX + (1-alpha)* pitch;
 800101c:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001020:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001028:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800102c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001030:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001034:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800103c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001040:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
		  angleY = alpha*gyroAngleY + (1-alpha)* roll;
 8001044:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001048:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800104c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001050:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001054:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001058:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800105c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001068:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
		  sprintf(string_to_send,"%0.3f,%0.3f\r\n",angleX,angleY);
 800106c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001070:	f7ff fa6a 	bl	8000548 <__aeabi_f2d>
 8001074:	4604      	mov	r4, r0
 8001076:	460d      	mov	r5, r1
 8001078:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800107c:	f7ff fa64 	bl	8000548 <__aeabi_f2d>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	f107 0020 	add.w	r0, r7, #32
 8001088:	e9cd 2300 	strd	r2, r3, [sp]
 800108c:	4622      	mov	r2, r4
 800108e:	462b      	mov	r3, r5
 8001090:	4912      	ldr	r1, [pc, #72]	@ (80010dc <main+0x3ec>)
 8001092:	f004 fda1 	bl	8005bd8 <siprintf>
		  SerialOutputString(string_to_send, &USART1_PORT);
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	4907      	ldr	r1, [pc, #28]	@ (80010b8 <main+0x3c8>)
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fa8c 	bl	80015ba <SerialOutputString>
	  }




	  delay_ms(75);
 80010a2:	204b      	movs	r0, #75	@ 0x4b
 80010a4:	f7ff fdfa 	bl	8000c9c <delay_ms>
	  BSP_ACCELERO_GetXYZ(&acc_values[0]);
 80010a8:	e681      	b.n	8000dae <main+0xbe>
 80010aa:	bf00      	nop
 80010ac:	f3af 8000 	nop.w
 80010b0:	51eb851f 	.word	0x51eb851f
 80010b4:	40091eb8 	.word	0x40091eb8
 80010b8:	20000000 	.word	0x20000000
 80010bc:	08008540 	.word	0x08008540
 80010c0:	3dcccccd 	.word	0x3dcccccd
 80010c4:	3c23d70a 	.word	0x3c23d70a
 80010c8:	44bb8000 	.word	0x44bb8000
 80010cc:	42ca0000 	.word	0x42ca0000
 80010d0:	40240000 	.word	0x40240000
 80010d4:	40668000 	.word	0x40668000
 80010d8:	43030000 	.word	0x43030000
 80010dc:	08008530 	.word	0x08008530

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
    // 1. Enable HSE with BYPASS
    RCC->CR |= RCC_CR_HSEBYP;      // External clock instead of crystal
 80010e4:	4b40      	ldr	r3, [pc, #256]	@ (80011e8 <SystemClock_Config+0x108>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a3f      	ldr	r2, [pc, #252]	@ (80011e8 <SystemClock_Config+0x108>)
 80010ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010ee:	6013      	str	r3, [r2, #0]
    RCC->CR |= RCC_CR_HSEON;
 80010f0:	4b3d      	ldr	r3, [pc, #244]	@ (80011e8 <SystemClock_Config+0x108>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a3c      	ldr	r2, [pc, #240]	@ (80011e8 <SystemClock_Config+0x108>)
 80010f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010fa:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY)); // Wait for HSE ready
 80010fc:	bf00      	nop
 80010fe:	4b3a      	ldr	r3, [pc, #232]	@ (80011e8 <SystemClock_Config+0x108>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f9      	beq.n	80010fe <SystemClock_Config+0x1e>

    // 2. Enable HSI
    RCC->CR |= RCC_CR_HSION;
 800110a:	4b37      	ldr	r3, [pc, #220]	@ (80011e8 <SystemClock_Config+0x108>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a36      	ldr	r2, [pc, #216]	@ (80011e8 <SystemClock_Config+0x108>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY));
 8001116:	bf00      	nop
 8001118:	4b33      	ldr	r3, [pc, #204]	@ (80011e8 <SystemClock_Config+0x108>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f9      	beq.n	8001118 <SystemClock_Config+0x38>

    // 3. Configure PLL: source = HSE, multiplier = x6
    RCC->CFGR &= ~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL);
 8001124:	4b30      	ldr	r3, [pc, #192]	@ (80011e8 <SystemClock_Config+0x108>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4a2f      	ldr	r2, [pc, #188]	@ (80011e8 <SystemClock_Config+0x108>)
 800112a:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 800112e:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLSRC_HSE_PREDIV;       // HSE selected as PLL source
 8001130:	4b2d      	ldr	r3, [pc, #180]	@ (80011e8 <SystemClock_Config+0x108>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a2c      	ldr	r2, [pc, #176]	@ (80011e8 <SystemClock_Config+0x108>)
 8001136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800113a:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PLLMUL6;                 // PLL multiplier = x6
 800113c:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <SystemClock_Config+0x108>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a29      	ldr	r2, [pc, #164]	@ (80011e8 <SystemClock_Config+0x108>)
 8001142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001146:	6053      	str	r3, [r2, #4]

    // 4. Enable PLL
    RCC->CR |= RCC_CR_PLLON;
 8001148:	4b27      	ldr	r3, [pc, #156]	@ (80011e8 <SystemClock_Config+0x108>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a26      	ldr	r2, [pc, #152]	@ (80011e8 <SystemClock_Config+0x108>)
 800114e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001152:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY)); // Wait for PLL ready
 8001154:	bf00      	nop
 8001156:	4b24      	ldr	r3, [pc, #144]	@ (80011e8 <SystemClock_Config+0x108>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0f9      	beq.n	8001156 <SystemClock_Config+0x76>

    // 5. Set FLASH latency = 1 wait state (for >24 MHz)
    FLASH->ACR |= FLASH_ACR_LATENCY_1;
 8001162:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <SystemClock_Config+0x10c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a21      	ldr	r2, [pc, #132]	@ (80011ec <SystemClock_Config+0x10c>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6013      	str	r3, [r2, #0]

    // 6. Select PLL as SYSCLK
    RCC->CFGR &= ~RCC_CFGR_SW;
 800116e:	4b1e      	ldr	r3, [pc, #120]	@ (80011e8 <SystemClock_Config+0x108>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a1d      	ldr	r2, [pc, #116]	@ (80011e8 <SystemClock_Config+0x108>)
 8001174:	f023 0303 	bic.w	r3, r3, #3
 8001178:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800117a:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <SystemClock_Config+0x108>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4a1a      	ldr	r2, [pc, #104]	@ (80011e8 <SystemClock_Config+0x108>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8001186:	bf00      	nop
 8001188:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <SystemClock_Config+0x108>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b08      	cmp	r3, #8
 8001192:	d1f9      	bne.n	8001188 <SystemClock_Config+0xa8>

    // 7. Set AHB, APB1, APB2 dividers
    RCC->CFGR &= ~(RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2);
 8001194:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <SystemClock_Config+0x108>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a13      	ldr	r2, [pc, #76]	@ (80011e8 <SystemClock_Config+0x108>)
 800119a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800119e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80011a2:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2; // APB1 = HCLK / 2
 80011a4:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <SystemClock_Config+0x108>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a0f      	ldr	r2, [pc, #60]	@ (80011e8 <SystemClock_Config+0x108>)
 80011aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ae:	6053      	str	r3, [r2, #4]
    // AHB = /1 and APB2 = /1 are already default (0b000)


    // 8. Configure I2C1 clock source: HSI
    RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 80011b0:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <SystemClock_Config+0x108>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b4:	4a0c      	ldr	r2, [pc, #48]	@ (80011e8 <SystemClock_Config+0x108>)
 80011b6:	f023 0310 	bic.w	r3, r3, #16
 80011ba:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->CFGR3 |= RCC_CFGR3_I2C1SW_HSI;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <SystemClock_Config+0x108>)
 80011be:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <SystemClock_Config+0x108>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	6313      	str	r3, [r2, #48]	@ 0x30

    // 9. Enable peripheral clocks if not already done (example)
    RCC->APB1ENR |= RCC_APB1ENR_USBEN;
 80011c4:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <SystemClock_Config+0x108>)
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	4a07      	ldr	r2, [pc, #28]	@ (80011e8 <SystemClock_Config+0x108>)
 80011ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80011ce:	61d3      	str	r3, [r2, #28]
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <SystemClock_Config+0x108>)
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <SystemClock_Config+0x108>)
 80011d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011da:	61d3      	str	r3, [r2, #28]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40022000 	.word	0x40022000

080011f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <MX_I2C1_Init+0x74>)
 80011f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001268 <MX_I2C1_Init+0x78>)
 80011f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <MX_I2C1_Init+0x74>)
 80011fc:	4a1b      	ldr	r2, [pc, #108]	@ (800126c <MX_I2C1_Init+0x7c>)
 80011fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001200:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <MX_I2C1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001206:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <MX_I2C1_Init+0x74>)
 8001208:	2201      	movs	r2, #1
 800120a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800120c:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <MX_I2C1_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001212:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <MX_I2C1_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <MX_I2C1_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800122a:	480e      	ldr	r0, [pc, #56]	@ (8001264 <MX_I2C1_Init+0x74>)
 800122c:	f001 f82e 	bl	800228c <HAL_I2C_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001236:	f000 f92d 	bl	8001494 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800123a:	2100      	movs	r1, #0
 800123c:	4809      	ldr	r0, [pc, #36]	@ (8001264 <MX_I2C1_Init+0x74>)
 800123e:	f001 fdd7 	bl	8002df0 <HAL_I2CEx_ConfigAnalogFilter>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001248:	f000 f924 	bl	8001494 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800124c:	2100      	movs	r1, #0
 800124e:	4805      	ldr	r0, [pc, #20]	@ (8001264 <MX_I2C1_Init+0x74>)
 8001250:	f001 fe19 	bl	8002e86 <HAL_I2CEx_ConfigDigitalFilter>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800125a:	f000 f91b 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000308 	.word	0x20000308
 8001268:	40005400 	.word	0x40005400
 800126c:	2000090e 	.word	0x2000090e

08001270 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001274:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <MX_SPI1_Init+0x74>)
 8001276:	4a1c      	ldr	r2, [pc, #112]	@ (80012e8 <MX_SPI1_Init+0x78>)
 8001278:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800127a:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <MX_SPI1_Init+0x74>)
 800127c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001280:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001282:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <MX_SPI1_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001288:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <MX_SPI1_Init+0x74>)
 800128a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800128e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001290:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <MX_SPI1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001296:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <MX_SPI1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <MX_SPI1_Init+0x74>)
 800129e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <MX_SPI1_Init+0x74>)
 80012a6:	2208      	movs	r2, #8
 80012a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <MX_SPI1_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <MX_SPI1_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <MX_SPI1_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <MX_SPI1_Init+0x74>)
 80012be:	2207      	movs	r2, #7
 80012c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <MX_SPI1_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <MX_SPI1_Init+0x74>)
 80012ca:	2208      	movs	r2, #8
 80012cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_SPI1_Init+0x74>)
 80012d0:	f001 fef7 	bl	80030c2 <HAL_SPI_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012da:	f000 f8db 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000035c 	.word	0x2000035c
 80012e8:	40013000 	.word	0x40013000

080012ec <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80012f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001328 <MX_USB_PCD_Init+0x3c>)
 80012f2:	4a0e      	ldr	r2, [pc, #56]	@ (800132c <MX_USB_PCD_Init+0x40>)
 80012f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80012f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <MX_USB_PCD_Init+0x3c>)
 80012f8:	2208      	movs	r2, #8
 80012fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80012fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001328 <MX_USB_PCD_Init+0x3c>)
 80012fe:	2202      	movs	r2, #2
 8001300:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001302:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <MX_USB_PCD_Init+0x3c>)
 8001304:	2202      	movs	r2, #2
 8001306:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001308:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <MX_USB_PCD_Init+0x3c>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800130e:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <MX_USB_PCD_Init+0x3c>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001314:	4804      	ldr	r0, [pc, #16]	@ (8001328 <MX_USB_PCD_Init+0x3c>)
 8001316:	f001 fe02 	bl	8002f1e <HAL_PCD_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001320:	f000 f8b8 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200003c0 	.word	0x200003c0
 800132c:	40005c00 	.word	0x40005c00

08001330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
	// Enable GPIOE and GPIOA clocks
	    RCC->AHBENR |= RCC_AHBENR_GPIOEEN | RCC_AHBENR_GPIOAEN;
 8001336:	4b55      	ldr	r3, [pc, #340]	@ (800148c <MX_GPIO_Init+0x15c>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	4a54      	ldr	r2, [pc, #336]	@ (800148c <MX_GPIO_Init+0x15c>)
 800133c:	f443 1308 	orr.w	r3, r3, #2228224	@ 0x220000
 8001340:	6153      	str	r3, [r2, #20]

	    // Define GPIOE output pins
	    uint32_t gpioe_output_pins = CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin |
 8001342:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8001346:	60bb      	str	r3, [r7, #8]
	                                  LD7_Pin | LD9_Pin | LD10_Pin | LD8_Pin | LD6_Pin;

	    // Reset GPIOE output pins (set to 0)
	    GPIOE->BRR = gpioe_output_pins;
 8001348:	4a51      	ldr	r2, [pc, #324]	@ (8001490 <MX_GPIO_Init+0x160>)
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	6293      	str	r3, [r2, #40]	@ 0x28

	    // Configure output pins (push-pull, no pull-up/down, low speed)
	    for (int pin = 0; pin < 16; pin++) {
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	e040      	b.n	80013d6 <MX_GPIO_Init+0xa6>
	        if (gpioe_output_pins & (1 << pin)) {
 8001354:	2201      	movs	r2, #1
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	461a      	mov	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d034      	beq.n	80013d0 <MX_GPIO_Init+0xa0>
	            // Set mode to output (01)
	            GPIOE->MODER &= ~(3U << (pin * 2));
 8001366:	4b4a      	ldr	r3, [pc, #296]	@ (8001490 <MX_GPIO_Init+0x160>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2103      	movs	r1, #3
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	4946      	ldr	r1, [pc, #280]	@ (8001490 <MX_GPIO_Init+0x160>)
 8001378:	4013      	ands	r3, r2
 800137a:	600b      	str	r3, [r1, #0]
	            GPIOE->MODER |=  (1U << (pin * 2));
 800137c:	4b44      	ldr	r3, [pc, #272]	@ (8001490 <MX_GPIO_Init+0x160>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2101      	movs	r1, #1
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	4941      	ldr	r1, [pc, #260]	@ (8001490 <MX_GPIO_Init+0x160>)
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]

	            // Output type = push-pull (0)
	            GPIOE->OTYPER &= ~(1U << pin);
 8001390:	4b3f      	ldr	r3, [pc, #252]	@ (8001490 <MX_GPIO_Init+0x160>)
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	2101      	movs	r1, #1
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	493c      	ldr	r1, [pc, #240]	@ (8001490 <MX_GPIO_Init+0x160>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]

	            // Speed = low (00)
	            GPIOE->OSPEEDR &= ~(3U << (pin * 2));
 80013a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001490 <MX_GPIO_Init+0x160>)
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2103      	movs	r1, #3
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	4936      	ldr	r1, [pc, #216]	@ (8001490 <MX_GPIO_Init+0x160>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	608b      	str	r3, [r1, #8]

	            // No pull-up/down (00)
	            GPIOE->PUPDR &= ~(3U << (pin * 2));
 80013ba:	4b35      	ldr	r3, [pc, #212]	@ (8001490 <MX_GPIO_Init+0x160>)
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2103      	movs	r1, #3
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	4931      	ldr	r1, [pc, #196]	@ (8001490 <MX_GPIO_Init+0x160>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	60cb      	str	r3, [r1, #12]
	    for (int pin = 0; pin < 16; pin++) {
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	ddbb      	ble.n	8001354 <MX_GPIO_Init+0x24>
	        }
	    }

	    // Configure GPIOE input event pins (rising edge trigger, no pull-up/down)
	    uint32_t gpioe_input_pins = DRDY_Pin | MEMS_INT3_Pin | MEMS_INT4_Pin |
 80013dc:	2337      	movs	r3, #55	@ 0x37
 80013de:	607b      	str	r3, [r7, #4]
	                                 MEMS_INT1_Pin | MEMS_INT2_Pin;

	    for (int pin = 0; pin < 16; pin++) {
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	e021      	b.n	800142a <MX_GPIO_Init+0xfa>
	        if (gpioe_input_pins & (1 << pin)) {
 80013e6:	2201      	movs	r2, #1
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d015      	beq.n	8001424 <MX_GPIO_Init+0xf4>
	            // Set mode to input (00) — default
	            GPIOE->MODER &= ~(3U << (pin * 2));
 80013f8:	4b25      	ldr	r3, [pc, #148]	@ (8001490 <MX_GPIO_Init+0x160>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	2103      	movs	r1, #3
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	4921      	ldr	r1, [pc, #132]	@ (8001490 <MX_GPIO_Init+0x160>)
 800140a:	4013      	ands	r3, r2
 800140c:	600b      	str	r3, [r1, #0]

	            // No pull-up/down
	            GPIOE->PUPDR &= ~(3U << (pin * 2));
 800140e:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <MX_GPIO_Init+0x160>)
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2103      	movs	r1, #3
 8001418:	fa01 f303 	lsl.w	r3, r1, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	491c      	ldr	r1, [pc, #112]	@ (8001490 <MX_GPIO_Init+0x160>)
 8001420:	4013      	ands	r3, r2
 8001422:	60cb      	str	r3, [r1, #12]
	    for (int pin = 0; pin < 16; pin++) {
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	3301      	adds	r3, #1
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	ddda      	ble.n	80013e6 <MX_GPIO_Init+0xb6>

	    // NOTE: Enabling EXTI (event interrupt trigger) is separate and optional.
	    // You would use SYSCFG and EXTI if needed.

	    // Configure B1_Pin as input on GPIOA
	    for (int pin = 0; pin < 16; pin++) {
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e01f      	b.n	8001476 <MX_GPIO_Init+0x146>
	        if (B1_Pin & (1 << pin)) {
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d119      	bne.n	8001470 <MX_GPIO_Init+0x140>
	            GPIOA->MODER &= ~(3U << (pin * 2)); // Input mode
 800143c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2103      	movs	r1, #3
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8001452:	4013      	ands	r3, r2
 8001454:	600b      	str	r3, [r1, #0]
	            GPIOA->PUPDR &= ~(3U << (pin * 2)); // No pull
 8001456:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2103      	movs	r1, #3
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 800146c:	4013      	ands	r3, r2
 800146e:	60cb      	str	r3, [r1, #12]
	    for (int pin = 0; pin < 16; pin++) {
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3301      	adds	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	dddc      	ble.n	8001436 <MX_GPIO_Init+0x106>
	        }
	    }

}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	371c      	adds	r7, #28
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	48001000 	.word	0x48001000

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <Error_Handler+0x8>

080014a0 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	63da      	str	r2, [r3, #60]	@ 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80014b2:	4b34      	ldr	r3, [pc, #208]	@ (8001584 <SerialInitialise+0xe4>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4a33      	ldr	r2, [pc, #204]	@ (8001584 <SerialInitialise+0xe4>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014bc:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80014be:	4b31      	ldr	r3, [pc, #196]	@ (8001584 <SerialInitialise+0xe4>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	4a30      	ldr	r2, [pc, #192]	@ (8001584 <SerialInitialise+0xe4>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d106      	bne.n	80014e0 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80014d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001584 <SerialInitialise+0xe4>)
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	4a2b      	ldr	r2, [pc, #172]	@ (8001584 <SerialInitialise+0xe4>)
 80014d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014dc:	6153      	str	r3, [r2, #20]
		break;
 80014de:	e000      	b.n	80014e2 <SerialInitialise+0x42>
	default:
		break;
 80014e0:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80014ea:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80014f4:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	69d9      	ldr	r1, [r3, #28]
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	430a      	orrs	r2, r1
 8001514:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b04      	cmp	r3, #4
 8001520:	d821      	bhi.n	8001566 <SerialInitialise+0xc6>
 8001522:	a201      	add	r2, pc, #4	@ (adr r2, 8001528 <SerialInitialise+0x88>)
 8001524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001528:	0800153d 	.word	0x0800153d
 800152c:	08001545 	.word	0x08001545
 8001530:	0800154d 	.word	0x0800154d
 8001534:	08001555 	.word	0x08001555
 8001538:	0800155d 	.word	0x0800155d
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2246      	movs	r2, #70	@ 0x46
 8001540:	801a      	strh	r2, [r3, #0]
		break;
 8001542:	e010      	b.n	8001566 <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	2246      	movs	r2, #70	@ 0x46
 8001548:	801a      	strh	r2, [r3, #0]
		break;
 800154a:	e00c      	b.n	8001566 <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2246      	movs	r2, #70	@ 0x46
 8001550:	801a      	strh	r2, [r3, #0]
		break;
 8001552:	e008      	b.n	8001566 <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2246      	movs	r2, #70	@ 0x46
 8001558:	801a      	strh	r2, [r3, #0]
		break;
 800155a:	e004      	b.n	8001566 <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8001562:	801a      	strh	r2, [r3, #0]
		break;
 8001564:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f042 020d 	orr.w	r2, r2, #13
 8001574:	601a      	str	r2, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	371c      	adds	r7, #28
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000

08001588 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8001594:	bf00      	nop
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f8      	beq.n	8001596 <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	79fa      	ldrb	r2, [r7, #7]
 80015aa:	b292      	uxth	r2, r2
 80015ac:	801a      	strh	r2, [r3, #0]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 80015c8:	e00b      	b.n	80015e2 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ffd9 	bl	8001588 <SerialOutputChar>
		counter++;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3301      	adds	r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
		pt++;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3301      	adds	r3, #1
 80015e0:	607b      	str	r3, [r7, #4]
	while(*pt) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1ef      	bne.n	80015ca <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	4798      	blx	r3
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <HAL_MspInit+0x44>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	4a0e      	ldr	r2, [pc, #56]	@ (8001648 <HAL_MspInit+0x44>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6193      	str	r3, [r2, #24]
 8001616:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <HAL_MspInit+0x44>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <HAL_MspInit+0x44>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a08      	ldr	r2, [pc, #32]	@ (8001648 <HAL_MspInit+0x44>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162c:	61d3      	str	r3, [r2, #28]
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_MspInit+0x44>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800163a:	2007      	movs	r0, #7
 800163c:	f000 fb76 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40021000 	.word	0x40021000

0800164c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	@ 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a17      	ldr	r2, [pc, #92]	@ (80016c8 <HAL_I2C_MspInit+0x7c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d127      	bne.n	80016be <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <HAL_I2C_MspInit+0x80>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a16      	ldr	r2, [pc, #88]	@ (80016cc <HAL_I2C_MspInit+0x80>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001678:	6153      	str	r3, [r2, #20]
 800167a:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <HAL_I2C_MspInit+0x80>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001686:	23c0      	movs	r3, #192	@ 0xc0
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168a:	2312      	movs	r3, #18
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800168e:	2301      	movs	r3, #1
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001696:	2304      	movs	r3, #4
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	480b      	ldr	r0, [pc, #44]	@ (80016d0 <HAL_I2C_MspInit+0x84>)
 80016a2:	f000 fb85 	bl	8001db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <HAL_I2C_MspInit+0x80>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a08      	ldr	r2, [pc, #32]	@ (80016cc <HAL_I2C_MspInit+0x80>)
 80016ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016b0:	61d3      	str	r3, [r2, #28]
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <HAL_I2C_MspInit+0x80>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3728      	adds	r7, #40	@ 0x28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40005400 	.word	0x40005400
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48000400 	.word	0x48000400

080016d4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <HAL_I2C_MspDeInit+0x38>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d10d      	bne.n	8001702 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <HAL_I2C_MspDeInit+0x3c>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4a09      	ldr	r2, [pc, #36]	@ (8001710 <HAL_I2C_MspDeInit+0x3c>)
 80016ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80016f0:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 80016f2:	2140      	movs	r1, #64	@ 0x40
 80016f4:	4807      	ldr	r0, [pc, #28]	@ (8001714 <HAL_I2C_MspDeInit+0x40>)
 80016f6:	f000 fcd5 	bl	80020a4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 80016fa:	2180      	movs	r1, #128	@ 0x80
 80016fc:	4805      	ldr	r0, [pc, #20]	@ (8001714 <HAL_I2C_MspDeInit+0x40>)
 80016fe:	f000 fcd1 	bl	80020a4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40005400 	.word	0x40005400
 8001710:	40021000 	.word	0x40021000
 8001714:	48000400 	.word	0x48000400

08001718 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	@ 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a17      	ldr	r2, [pc, #92]	@ (8001794 <HAL_SPI_MspInit+0x7c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d128      	bne.n	800178c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800173a:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <HAL_SPI_MspInit+0x80>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	4a16      	ldr	r2, [pc, #88]	@ (8001798 <HAL_SPI_MspInit+0x80>)
 8001740:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001744:	6193      	str	r3, [r2, #24]
 8001746:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <HAL_SPI_MspInit+0x80>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <HAL_SPI_MspInit+0x80>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	4a10      	ldr	r2, [pc, #64]	@ (8001798 <HAL_SPI_MspInit+0x80>)
 8001758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800175c:	6153      	str	r3, [r2, #20]
 800175e:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <HAL_SPI_MspInit+0x80>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800176a:	23e0      	movs	r3, #224	@ 0xe0
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800177a:	2305      	movs	r3, #5
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001788:	f000 fb12 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800178c:	bf00      	nop
 800178e:	3728      	adds	r7, #40	@ 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40013000 	.word	0x40013000
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a08      	ldr	r2, [pc, #32]	@ (80017cc <HAL_SPI_MspDeInit+0x30>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10a      	bne.n	80017c4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80017ae:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <HAL_SPI_MspDeInit+0x34>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	4a07      	ldr	r2, [pc, #28]	@ (80017d0 <HAL_SPI_MspDeInit+0x34>)
 80017b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017b8:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 80017ba:	21e0      	movs	r1, #224	@ 0xe0
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c0:	f000 fc70 	bl	80020a4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40013000 	.word	0x40013000
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	@ 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a18      	ldr	r2, [pc, #96]	@ (8001854 <HAL_PCD_MspInit+0x80>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d129      	bne.n	800184a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <HAL_PCD_MspInit+0x84>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	4a17      	ldr	r2, [pc, #92]	@ (8001858 <HAL_PCD_MspInit+0x84>)
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001800:	6153      	str	r3, [r2, #20]
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <HAL_PCD_MspInit+0x84>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800180e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001820:	230e      	movs	r3, #14
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182e:	f000 fabf 	bl	8001db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <HAL_PCD_MspInit+0x84>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a08      	ldr	r2, [pc, #32]	@ (8001858 <HAL_PCD_MspInit+0x84>)
 8001838:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_PCD_MspInit+0x84>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	@ 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40005c00 	.word	0x40005c00
 8001858:	40021000 	.word	0x40021000

0800185c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <NMI_Handler+0x4>

08001864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <HardFault_Handler+0x4>

0800186c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <MemManage_Handler+0x4>

08001874 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <BusFault_Handler+0x4>

0800187c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <UsageFault_Handler+0x4>

08001884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b2:	f000 f94b 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
	return 1;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_kill>:

int _kill(int pid, int sig)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018d4:	f004 fa38 	bl	8005d48 <__errno>
 80018d8:	4603      	mov	r3, r0
 80018da:	2216      	movs	r2, #22
 80018dc:	601a      	str	r2, [r3, #0]
	return -1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_exit>:

void _exit (int status)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018f2:	f04f 31ff 	mov.w	r1, #4294967295
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffe7 	bl	80018ca <_kill>
	while (1) {}		/* Make sure we hang here */
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <_exit+0x12>

08001900 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	e00a      	b.n	8001928 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001912:	f3af 8000 	nop.w
 8001916:	4601      	mov	r1, r0
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	60ba      	str	r2, [r7, #8]
 800191e:	b2ca      	uxtb	r2, r1
 8001920:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbf0      	blt.n	8001912 <_read+0x12>
	}

return len;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e009      	b.n	8001960 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf1      	blt.n	800194c <_write+0x12>
	}
	return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_close>:

int _close(int file)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
	return -1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800199a:	605a      	str	r2, [r3, #4]
	return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <_isatty>:

int _isatty(int file)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
	return 1;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
	return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <_sbrk+0x5c>)
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <_sbrk+0x60>)
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <_sbrk+0x64>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	@ (8001a44 <_sbrk+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d207      	bcs.n	8001a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a0c:	f004 f99c 	bl	8005d48 <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	e009      	b.n	8001a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a22:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <_sbrk+0x64>)
 8001a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	2000a000 	.word	0x2000a000
 8001a3c:	00000400 	.word	0x00000400
 8001a40:	200006ac 	.word	0x200006ac
 8001a44:	200008b8 	.word	0x200008b8

08001a48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <SystemInit+0x20>)
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a52:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <SystemInit+0x20>)
 8001a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001aa4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a70:	f7ff ffea 	bl	8001a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a74:	480c      	ldr	r0, [pc, #48]	@ (8001aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a76:	490d      	ldr	r1, [pc, #52]	@ (8001aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a78:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab0 <LoopForever+0xe>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ab8 <LoopForever+0x16>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f004 f95b 	bl	8005d54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a9e:	f7ff f927 	bl	8000cf0 <main>

08001aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001aa2:	e7fe      	b.n	8001aa2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001aa4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8001ab0:	08008960 	.word	0x08008960
  ldr r2, =_sbss
 8001ab4:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 8001ab8:	200008b8 	.word	0x200008b8

08001abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_2_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <HAL_Init+0x28>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	@ (8001ae8 <HAL_Init+0x28>)
 8001aca:	f043 0310 	orr.w	r3, r3, #16
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f92b 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f000 f808 	bl	8001aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fd92 	bl	8001604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40022000 	.word	0x40022000

08001aec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af4:	4b12      	ldr	r3, [pc, #72]	@ (8001b40 <HAL_InitTick+0x54>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_InitTick+0x58>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f943 	bl	8001d96 <HAL_SYSTICK_Config>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00e      	b.n	8001b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	d80a      	bhi.n	8001b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b20:	2200      	movs	r2, #0
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f000 f90b 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b2c:	4a06      	ldr	r2, [pc, #24]	@ (8001b48 <HAL_InitTick+0x5c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000040 	.word	0x20000040
 8001b44:	20000048 	.word	0x20000048
 8001b48:	20000044 	.word	0x20000044

08001b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <HAL_IncTick+0x20>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_IncTick+0x24>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <HAL_IncTick+0x24>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000048 	.word	0x20000048
 8001b70:	200006b0 	.word	0x200006b0

08001b74 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b78:	4b03      	ldr	r3, [pc, #12]	@ (8001b88 <HAL_GetTick+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	200006b0 	.word	0x200006b0

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4907      	ldr	r1, [pc, #28]	@ (8001c28 <__NVIC_EnableIRQ+0x38>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	@ (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	@ (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	@ 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	@ 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f7ff ff8e 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff29 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff3e 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff8e 	bl	8001c80 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5d 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff31 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffa2 	bl	8001ce8 <SysTick_Config>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dbe:	e154      	b.n	800206a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 8146 	beq.w	8002064 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d005      	beq.n	8001df0 <HAL_GPIO_Init+0x40>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d130      	bne.n	8001e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e26:	2201      	movs	r2, #1
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	091b      	lsrs	r3, r3, #4
 8001e3c:	f003 0201 	and.w	r2, r3, #1
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d017      	beq.n	8001e8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	2203      	movs	r2, #3
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d123      	bne.n	8001ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	08da      	lsrs	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3208      	adds	r2, #8
 8001ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	220f      	movs	r2, #15
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	691a      	ldr	r2, [r3, #16]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	08da      	lsrs	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3208      	adds	r2, #8
 8001edc:	6939      	ldr	r1, [r7, #16]
 8001ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	2203      	movs	r2, #3
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0203 	and.w	r2, r3, #3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80a0 	beq.w	8002064 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f24:	4b58      	ldr	r3, [pc, #352]	@ (8002088 <HAL_GPIO_Init+0x2d8>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a57      	ldr	r2, [pc, #348]	@ (8002088 <HAL_GPIO_Init+0x2d8>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b55      	ldr	r3, [pc, #340]	@ (8002088 <HAL_GPIO_Init+0x2d8>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f3c:	4a53      	ldr	r2, [pc, #332]	@ (800208c <HAL_GPIO_Init+0x2dc>)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	3302      	adds	r3, #2
 8001f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	220f      	movs	r2, #15
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f66:	d019      	beq.n	8001f9c <HAL_GPIO_Init+0x1ec>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a49      	ldr	r2, [pc, #292]	@ (8002090 <HAL_GPIO_Init+0x2e0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d013      	beq.n	8001f98 <HAL_GPIO_Init+0x1e8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a48      	ldr	r2, [pc, #288]	@ (8002094 <HAL_GPIO_Init+0x2e4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d00d      	beq.n	8001f94 <HAL_GPIO_Init+0x1e4>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a47      	ldr	r2, [pc, #284]	@ (8002098 <HAL_GPIO_Init+0x2e8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d007      	beq.n	8001f90 <HAL_GPIO_Init+0x1e0>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a46      	ldr	r2, [pc, #280]	@ (800209c <HAL_GPIO_Init+0x2ec>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d101      	bne.n	8001f8c <HAL_GPIO_Init+0x1dc>
 8001f88:	2304      	movs	r3, #4
 8001f8a:	e008      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f8c:	2305      	movs	r3, #5
 8001f8e:	e006      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f90:	2303      	movs	r3, #3
 8001f92:	e004      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e002      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	f002 0203 	and.w	r2, r2, #3
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	4093      	lsls	r3, r2
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fae:	4937      	ldr	r1, [pc, #220]	@ (800208c <HAL_GPIO_Init+0x2dc>)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fbc:	4b38      	ldr	r3, [pc, #224]	@ (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fe6:	4b2e      	ldr	r3, [pc, #184]	@ (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800200a:	4a25      	ldr	r2, [pc, #148]	@ (80020a0 <HAL_GPIO_Init+0x2f0>)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002010:	4b23      	ldr	r3, [pc, #140]	@ (80020a0 <HAL_GPIO_Init+0x2f0>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002034:	4a1a      	ldr	r2, [pc, #104]	@ (80020a0 <HAL_GPIO_Init+0x2f0>)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800203a:	4b19      	ldr	r3, [pc, #100]	@ (80020a0 <HAL_GPIO_Init+0x2f0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	43db      	mvns	r3, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800205e:	4a10      	ldr	r2, [pc, #64]	@ (80020a0 <HAL_GPIO_Init+0x2f0>)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	3301      	adds	r3, #1
 8002068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	f47f aea3 	bne.w	8001dc0 <HAL_GPIO_Init+0x10>
  }
}
 800207a:	bf00      	nop
 800207c:	bf00      	nop
 800207e:	371c      	adds	r7, #28
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40021000 	.word	0x40021000
 800208c:	40010000 	.word	0x40010000
 8002090:	48000400 	.word	0x48000400
 8002094:	48000800 	.word	0x48000800
 8002098:	48000c00 	.word	0x48000c00
 800209c:	48001000 	.word	0x48001000
 80020a0:	40010400 	.word	0x40010400

080020a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80020b2:	e0b8      	b.n	8002226 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80020b4:	2201      	movs	r2, #1
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80ab 	beq.w	8002220 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80020ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002244 <HAL_GPIO_DeInit+0x1a0>)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	3302      	adds	r3, #2
 80020d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	220f      	movs	r2, #15
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4013      	ands	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020f2:	d019      	beq.n	8002128 <HAL_GPIO_DeInit+0x84>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a54      	ldr	r2, [pc, #336]	@ (8002248 <HAL_GPIO_DeInit+0x1a4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d013      	beq.n	8002124 <HAL_GPIO_DeInit+0x80>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a53      	ldr	r2, [pc, #332]	@ (800224c <HAL_GPIO_DeInit+0x1a8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d00d      	beq.n	8002120 <HAL_GPIO_DeInit+0x7c>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a52      	ldr	r2, [pc, #328]	@ (8002250 <HAL_GPIO_DeInit+0x1ac>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d007      	beq.n	800211c <HAL_GPIO_DeInit+0x78>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a51      	ldr	r2, [pc, #324]	@ (8002254 <HAL_GPIO_DeInit+0x1b0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d101      	bne.n	8002118 <HAL_GPIO_DeInit+0x74>
 8002114:	2304      	movs	r3, #4
 8002116:	e008      	b.n	800212a <HAL_GPIO_DeInit+0x86>
 8002118:	2305      	movs	r3, #5
 800211a:	e006      	b.n	800212a <HAL_GPIO_DeInit+0x86>
 800211c:	2303      	movs	r3, #3
 800211e:	e004      	b.n	800212a <HAL_GPIO_DeInit+0x86>
 8002120:	2302      	movs	r3, #2
 8002122:	e002      	b.n	800212a <HAL_GPIO_DeInit+0x86>
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <HAL_GPIO_DeInit+0x86>
 8002128:	2300      	movs	r3, #0
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	f002 0203 	and.w	r2, r2, #3
 8002130:	0092      	lsls	r2, r2, #2
 8002132:	4093      	lsls	r3, r2
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	429a      	cmp	r2, r3
 8002138:	d132      	bne.n	80021a0 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800213a:	4b47      	ldr	r3, [pc, #284]	@ (8002258 <HAL_GPIO_DeInit+0x1b4>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	4945      	ldr	r1, [pc, #276]	@ (8002258 <HAL_GPIO_DeInit+0x1b4>)
 8002144:	4013      	ands	r3, r2
 8002146:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002148:	4b43      	ldr	r3, [pc, #268]	@ (8002258 <HAL_GPIO_DeInit+0x1b4>)
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	43db      	mvns	r3, r3
 8002150:	4941      	ldr	r1, [pc, #260]	@ (8002258 <HAL_GPIO_DeInit+0x1b4>)
 8002152:	4013      	ands	r3, r2
 8002154:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002156:	4b40      	ldr	r3, [pc, #256]	@ (8002258 <HAL_GPIO_DeInit+0x1b4>)
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	43db      	mvns	r3, r3
 800215e:	493e      	ldr	r1, [pc, #248]	@ (8002258 <HAL_GPIO_DeInit+0x1b4>)
 8002160:	4013      	ands	r3, r2
 8002162:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002164:	4b3c      	ldr	r3, [pc, #240]	@ (8002258 <HAL_GPIO_DeInit+0x1b4>)
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	493a      	ldr	r1, [pc, #232]	@ (8002258 <HAL_GPIO_DeInit+0x1b4>)
 800216e:	4013      	ands	r3, r2
 8002170:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	220f      	movs	r2, #15
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002182:	4a30      	ldr	r2, [pc, #192]	@ (8002244 <HAL_GPIO_DeInit+0x1a0>)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	43da      	mvns	r2, r3
 8002192:	482c      	ldr	r0, [pc, #176]	@ (8002244 <HAL_GPIO_DeInit+0x1a0>)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	400a      	ands	r2, r1
 800219a:	3302      	adds	r3, #2
 800219c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	2103      	movs	r1, #3
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	401a      	ands	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	08da      	lsrs	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3208      	adds	r2, #8
 80021be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	08d2      	lsrs	r2, r2, #3
 80021d6:	4019      	ands	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3208      	adds	r2, #8
 80021dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2103      	movs	r1, #3
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	401a      	ands	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	2101      	movs	r1, #1
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	401a      	ands	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2103      	movs	r1, #3
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	401a      	ands	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3301      	adds	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa22 f303 	lsr.w	r3, r2, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	f47f af40 	bne.w	80020b4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	371c      	adds	r7, #28
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40010000 	.word	0x40010000
 8002248:	48000400 	.word	0x48000400
 800224c:	48000800 	.word	0x48000800
 8002250:	48000c00 	.word	0x48000c00
 8002254:	48001000 	.word	0x48001000
 8002258:	40010400 	.word	0x40010400

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002278:	e002      	b.n	8002280 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e081      	b.n	80023a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff f9ca 	bl	800164c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2224      	movs	r2, #36	@ 0x24
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d107      	bne.n	8002306 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	e006      	b.n	8002314 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002312:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d104      	bne.n	8002326 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002324:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002334:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002338:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002348:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69d9      	ldr	r1, [r3, #28]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1a      	ldr	r2, [r3, #32]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e021      	b.n	8002400 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2224      	movs	r2, #36	@ 0x24
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff f97d 	bl	80016d4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af02      	add	r7, sp, #8
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	4608      	mov	r0, r1
 8002412:	4611      	mov	r1, r2
 8002414:	461a      	mov	r2, r3
 8002416:	4603      	mov	r3, r0
 8002418:	817b      	strh	r3, [r7, #10]
 800241a:	460b      	mov	r3, r1
 800241c:	813b      	strh	r3, [r7, #8]
 800241e:	4613      	mov	r3, r2
 8002420:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b20      	cmp	r3, #32
 800242c:	f040 80f9 	bne.w	8002622 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_I2C_Mem_Write+0x34>
 8002436:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002438:	2b00      	cmp	r3, #0
 800243a:	d105      	bne.n	8002448 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002442:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0ed      	b.n	8002624 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_I2C_Mem_Write+0x4e>
 8002452:	2302      	movs	r3, #2
 8002454:	e0e6      	b.n	8002624 <HAL_I2C_Mem_Write+0x21c>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800245e:	f7ff fb89 	bl	8001b74 <HAL_GetTick>
 8002462:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2319      	movs	r3, #25
 800246a:	2201      	movs	r2, #1
 800246c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fad1 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0d1      	b.n	8002624 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2221      	movs	r2, #33	@ 0x21
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2240      	movs	r2, #64	@ 0x40
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a3a      	ldr	r2, [r7, #32]
 800249a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024a8:	88f8      	ldrh	r0, [r7, #6]
 80024aa:	893a      	ldrh	r2, [r7, #8]
 80024ac:	8979      	ldrh	r1, [r7, #10]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	4603      	mov	r3, r0
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f9e1 	bl	8002880 <I2C_RequestMemoryWrite>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0a9      	b.n	8002624 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2bff      	cmp	r3, #255	@ 0xff
 80024d8:	d90e      	bls.n	80024f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	22ff      	movs	r2, #255	@ 0xff
 80024de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	8979      	ldrh	r1, [r7, #10]
 80024e8:	2300      	movs	r3, #0
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fc4b 	bl	8002d8c <I2C_TransferConfig>
 80024f6:	e00f      	b.n	8002518 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002506:	b2da      	uxtb	r2, r3
 8002508:	8979      	ldrh	r1, [r7, #10]
 800250a:	2300      	movs	r3, #0
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 fc3a 	bl	8002d8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 faca 	bl	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e07b      	b.n	8002624 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d034      	beq.n	80025d0 <HAL_I2C_Mem_Write+0x1c8>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256a:	2b00      	cmp	r3, #0
 800256c:	d130      	bne.n	80025d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002574:	2200      	movs	r2, #0
 8002576:	2180      	movs	r1, #128	@ 0x80
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 fa4d 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e04d      	b.n	8002624 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	2bff      	cmp	r3, #255	@ 0xff
 8002590:	d90e      	bls.n	80025b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	22ff      	movs	r2, #255	@ 0xff
 8002596:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259c:	b2da      	uxtb	r2, r3
 800259e:	8979      	ldrh	r1, [r7, #10]
 80025a0:	2300      	movs	r3, #0
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 fbef 	bl	8002d8c <I2C_TransferConfig>
 80025ae:	e00f      	b.n	80025d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	8979      	ldrh	r1, [r7, #10]
 80025c2:	2300      	movs	r3, #0
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fbde 	bl	8002d8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d19e      	bne.n	8002518 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fab0 	bl	8002b44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e01a      	b.n	8002624 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2220      	movs	r2, #32
 80025f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6859      	ldr	r1, [r3, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <HAL_I2C_Mem_Write+0x224>)
 8002602:	400b      	ands	r3, r1
 8002604:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	e000      	b.n	8002624 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002622:	2302      	movs	r3, #2
  }
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	fe00e800 	.word	0xfe00e800

08002630 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af02      	add	r7, sp, #8
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	4608      	mov	r0, r1
 800263a:	4611      	mov	r1, r2
 800263c:	461a      	mov	r2, r3
 800263e:	4603      	mov	r3, r0
 8002640:	817b      	strh	r3, [r7, #10]
 8002642:	460b      	mov	r3, r1
 8002644:	813b      	strh	r3, [r7, #8]
 8002646:	4613      	mov	r3, r2
 8002648:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b20      	cmp	r3, #32
 8002654:	f040 80fd 	bne.w	8002852 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_I2C_Mem_Read+0x34>
 800265e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800266a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0f1      	b.n	8002854 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_I2C_Mem_Read+0x4e>
 800267a:	2302      	movs	r3, #2
 800267c:	e0ea      	b.n	8002854 <HAL_I2C_Mem_Read+0x224>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002686:	f7ff fa75 	bl	8001b74 <HAL_GetTick>
 800268a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	2319      	movs	r3, #25
 8002692:	2201      	movs	r2, #1
 8002694:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f9bd 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0d5      	b.n	8002854 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2222      	movs	r2, #34	@ 0x22
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2240      	movs	r2, #64	@ 0x40
 80026b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a3a      	ldr	r2, [r7, #32]
 80026c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026d0:	88f8      	ldrh	r0, [r7, #6]
 80026d2:	893a      	ldrh	r2, [r7, #8]
 80026d4:	8979      	ldrh	r1, [r7, #10]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	4603      	mov	r3, r0
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 f921 	bl	8002928 <I2C_RequestMemoryRead>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0ad      	b.n	8002854 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2bff      	cmp	r3, #255	@ 0xff
 8002700:	d90e      	bls.n	8002720 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	22ff      	movs	r2, #255	@ 0xff
 8002706:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270c:	b2da      	uxtb	r2, r3
 800270e:	8979      	ldrh	r1, [r7, #10]
 8002710:	4b52      	ldr	r3, [pc, #328]	@ (800285c <HAL_I2C_Mem_Read+0x22c>)
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 fb37 	bl	8002d8c <I2C_TransferConfig>
 800271e:	e00f      	b.n	8002740 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272e:	b2da      	uxtb	r2, r3
 8002730:	8979      	ldrh	r1, [r7, #10]
 8002732:	4b4a      	ldr	r3, [pc, #296]	@ (800285c <HAL_I2C_Mem_Read+0x22c>)
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 fb26 	bl	8002d8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002746:	2200      	movs	r2, #0
 8002748:	2104      	movs	r1, #4
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f964 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e07c      	b.n	8002854 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d034      	beq.n	8002800 <HAL_I2C_Mem_Read+0x1d0>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279a:	2b00      	cmp	r3, #0
 800279c:	d130      	bne.n	8002800 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a4:	2200      	movs	r2, #0
 80027a6:	2180      	movs	r1, #128	@ 0x80
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f935 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e04d      	b.n	8002854 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2bff      	cmp	r3, #255	@ 0xff
 80027c0:	d90e      	bls.n	80027e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	22ff      	movs	r2, #255	@ 0xff
 80027c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	8979      	ldrh	r1, [r7, #10]
 80027d0:	2300      	movs	r3, #0
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 fad7 	bl	8002d8c <I2C_TransferConfig>
 80027de:	e00f      	b.n	8002800 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	8979      	ldrh	r1, [r7, #10]
 80027f2:	2300      	movs	r3, #0
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 fac6 	bl	8002d8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d19a      	bne.n	8002740 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f998 	bl	8002b44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e01a      	b.n	8002854 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2220      	movs	r2, #32
 8002824:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6859      	ldr	r1, [r3, #4]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b0b      	ldr	r3, [pc, #44]	@ (8002860 <HAL_I2C_Mem_Read+0x230>)
 8002832:	400b      	ands	r3, r1
 8002834:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	e000      	b.n	8002854 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002852:	2302      	movs	r3, #2
  }
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	80002400 	.word	0x80002400
 8002860:	fe00e800 	.word	0xfe00e800

08002864 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002872:	b2db      	uxtb	r3, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	4608      	mov	r0, r1
 800288a:	4611      	mov	r1, r2
 800288c:	461a      	mov	r2, r3
 800288e:	4603      	mov	r3, r0
 8002890:	817b      	strh	r3, [r7, #10]
 8002892:	460b      	mov	r3, r1
 8002894:	813b      	strh	r3, [r7, #8]
 8002896:	4613      	mov	r3, r2
 8002898:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	8979      	ldrh	r1, [r7, #10]
 80028a0:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <I2C_RequestMemoryWrite+0xa4>)
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fa6f 	bl	8002d8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	69b9      	ldr	r1, [r7, #24]
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 f8ff 	bl	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e02c      	b.n	800291c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d105      	bne.n	80028d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028c8:	893b      	ldrh	r3, [r7, #8]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80028d2:	e015      	b.n	8002900 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028d4:	893b      	ldrh	r3, [r7, #8]
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	b29b      	uxth	r3, r3
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	69b9      	ldr	r1, [r7, #24]
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f8e5 	bl	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e012      	b.n	800291c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028f6:	893b      	ldrh	r3, [r7, #8]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2200      	movs	r2, #0
 8002908:	2180      	movs	r1, #128	@ 0x80
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f884 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	80002000 	.word	0x80002000

08002928 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	4608      	mov	r0, r1
 8002932:	4611      	mov	r1, r2
 8002934:	461a      	mov	r2, r3
 8002936:	4603      	mov	r3, r0
 8002938:	817b      	strh	r3, [r7, #10]
 800293a:	460b      	mov	r3, r1
 800293c:	813b      	strh	r3, [r7, #8]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	8979      	ldrh	r1, [r7, #10]
 8002948:	4b20      	ldr	r3, [pc, #128]	@ (80029cc <I2C_RequestMemoryRead+0xa4>)
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2300      	movs	r3, #0
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fa1c 	bl	8002d8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	69b9      	ldr	r1, [r7, #24]
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f8ac 	bl	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e02c      	b.n	80029c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d105      	bne.n	800297a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800296e:	893b      	ldrh	r3, [r7, #8]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	629a      	str	r2, [r3, #40]	@ 0x28
 8002978:	e015      	b.n	80029a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800297a:	893b      	ldrh	r3, [r7, #8]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	b29b      	uxth	r3, r3
 8002980:	b2da      	uxtb	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	69b9      	ldr	r1, [r7, #24]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f892 	bl	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e012      	b.n	80029c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800299c:	893b      	ldrh	r3, [r7, #8]
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	2200      	movs	r2, #0
 80029ae:	2140      	movs	r1, #64	@ 0x40
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f831 	bl	8002a18 <I2C_WaitOnFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	80002000 	.word	0x80002000

080029d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d103      	bne.n	80029ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d007      	beq.n	8002a0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	619a      	str	r2, [r3, #24]
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a28:	e031      	b.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d02d      	beq.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a32:	f7ff f89f 	bl	8001b74 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d302      	bcc.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d122      	bne.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4013      	ands	r3, r2
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	bf0c      	ite	eq
 8002a58:	2301      	moveq	r3, #1
 8002a5a:	2300      	movne	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d113      	bne.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	f043 0220 	orr.w	r2, r3, #32
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00f      	b.n	8002aae <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699a      	ldr	r2, [r3, #24]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4013      	ands	r3, r2
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	bf0c      	ite	eq
 8002a9e:	2301      	moveq	r3, #1
 8002aa0:	2300      	movne	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d0be      	beq.n	8002a2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ac2:	e033      	b.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f87f 	bl	8002bcc <I2C_IsErrorOccurred>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e031      	b.n	8002b3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ade:	d025      	beq.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae0:	f7ff f848 	bl	8001b74 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d302      	bcc.n	8002af6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d11a      	bne.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d013      	beq.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e007      	b.n	8002b3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d1c4      	bne.n	8002ac4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b50:	e02f      	b.n	8002bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f838 	bl	8002bcc <I2C_IsErrorOccurred>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e02d      	b.n	8002bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b66:	f7ff f805 	bl	8001b74 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d302      	bcc.n	8002b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d11a      	bne.n	8002bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d013      	beq.n	8002bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e007      	b.n	8002bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d1c8      	bne.n	8002b52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	@ 0x28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d068      	beq.n	8002cca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c00:	e049      	b.n	8002c96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d045      	beq.n	8002c96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c0a:	f7fe ffb3 	bl	8001b74 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d302      	bcc.n	8002c20 <I2C_IsErrorOccurred+0x54>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d13a      	bne.n	8002c96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c42:	d121      	bne.n	8002c88 <I2C_IsErrorOccurred+0xbc>
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c4a:	d01d      	beq.n	8002c88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d01a      	beq.n	8002c88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c62:	f7fe ff87 	bl	8001b74 <HAL_GetTick>
 8002c66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c68:	e00e      	b.n	8002c88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c6a:	f7fe ff83 	bl	8001b74 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b19      	cmp	r3, #25
 8002c76:	d907      	bls.n	8002c88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	f043 0320 	orr.w	r3, r3, #32
 8002c7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c86:	e006      	b.n	8002c96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d1e9      	bne.n	8002c6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d003      	beq.n	8002cac <I2C_IsErrorOccurred+0xe0>
 8002ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0aa      	beq.n	8002c02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d103      	bne.n	8002cbc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	f043 0308 	orr.w	r3, r3, #8
 8002d04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00b      	beq.n	8002d38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	f043 0302 	orr.w	r3, r3, #2
 8002d26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002d38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01c      	beq.n	8002d7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff fe45 	bl	80029d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <I2C_IsErrorOccurred+0x1bc>)
 8002d52:	400b      	ands	r3, r1
 8002d54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3728      	adds	r7, #40	@ 0x28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	fe00e800 	.word	0xfe00e800

08002d8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	817b      	strh	r3, [r7, #10]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d9e:	897b      	ldrh	r3, [r7, #10]
 8002da0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002da4:	7a7b      	ldrb	r3, [r7, #9]
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	0d5b      	lsrs	r3, r3, #21
 8002dc6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002dca:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <I2C_TransferConfig+0x60>)
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	ea02 0103 	and.w	r1, r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002dde:	bf00      	nop
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	03ff63ff 	.word	0x03ff63ff

08002df0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d138      	bne.n	8002e78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e032      	b.n	8002e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2224      	movs	r2, #36	@ 0x24
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6819      	ldr	r1, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e000      	b.n	8002e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e78:	2302      	movs	r3, #2
  }
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d139      	bne.n	8002f10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e033      	b.n	8002f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2224      	movs	r2, #36	@ 0x24
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ed8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e000      	b.n	8002f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
  }
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f20:	b08b      	sub	sp, #44	@ 0x2c
 8002f22:	af06      	add	r7, sp, #24
 8002f24:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0c4      	b.n	80030ba <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d106      	bne.n	8002f4a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7fe fc45 	bl	80017d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fd1a 	bl	8003990 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]
 8002f60:	e040      	b.n	8002fe4 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	440b      	add	r3, r1
 8002f72:	3301      	adds	r3, #1
 8002f74:	2201      	movs	r2, #1
 8002f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	440b      	add	r3, r1
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	440b      	add	r3, r1
 8002f9c:	3303      	adds	r3, #3
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	440b      	add	r3, r1
 8002fb0:	3338      	adds	r3, #56	@ 0x38
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fb6:	7bfa      	ldrb	r2, [r7, #15]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	440b      	add	r3, r1
 8002fc4:	333c      	adds	r3, #60	@ 0x3c
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fca:	7bfa      	ldrb	r2, [r7, #15]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	440b      	add	r3, r1
 8002fd8:	3340      	adds	r3, #64	@ 0x40
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d3b9      	bcc.n	8002f62 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	73fb      	strb	r3, [r7, #15]
 8002ff2:	e044      	b.n	800307e <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	440b      	add	r3, r1
 8003002:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800300a:	7bfa      	ldrb	r2, [r7, #15]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	440b      	add	r3, r1
 8003018:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800301c:	7bfa      	ldrb	r2, [r7, #15]
 800301e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	440b      	add	r3, r1
 800302e:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003036:	7bfa      	ldrb	r2, [r7, #15]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	440b      	add	r3, r1
 8003044:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	440b      	add	r3, r1
 800305a:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003062:	7bfa      	ldrb	r2, [r7, #15]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	3301      	adds	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
 800307e:	7bfa      	ldrb	r2, [r7, #15]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	429a      	cmp	r2, r3
 8003086:	d3b5      	bcc.n	8002ff4 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	687e      	ldr	r6, [r7, #4]
 8003090:	466d      	mov	r5, sp
 8003092:	f106 0410 	add.w	r4, r6, #16
 8003096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	602b      	str	r3, [r5, #0]
 800309e:	1d33      	adds	r3, r6, #4
 80030a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030a2:	6838      	ldr	r0, [r7, #0]
 80030a4:	f000 fc8f 	bl	80039c6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030c2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e09d      	b.n	8003210 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d108      	bne.n	80030ee <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030e4:	d009      	beq.n	80030fa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	61da      	str	r2, [r3, #28]
 80030ec:	e005      	b.n	80030fa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d106      	bne.n	800311a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7fe faff 	bl	8001718 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003130:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800313a:	d902      	bls.n	8003142 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	e002      	b.n	8003148 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003142:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003146:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003150:	d007      	beq.n	8003162 <HAL_SPI_Init+0xa0>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800315a:	d002      	beq.n	8003162 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a4:	ea42 0103 	orr.w	r1, r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	f003 0204 	and.w	r2, r3, #4
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80031de:	ea42 0103 	orr.w	r1, r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69da      	ldr	r2, [r3, #28]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e01a      	b.n	8003260 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003240:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fe faaa 	bl	800179c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	@ 0x28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003276:	2301      	movs	r3, #1
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_SPI_TransmitReceive+0x26>
 800328a:	2302      	movs	r3, #2
 800328c:	e20a      	b.n	80036a4 <HAL_SPI_TransmitReceive+0x43c>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003296:	f7fe fc6d 	bl	8001b74 <HAL_GetTick>
 800329a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032a2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80032aa:	887b      	ldrh	r3, [r7, #2]
 80032ac:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80032ae:	887b      	ldrh	r3, [r7, #2]
 80032b0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032b2:	7efb      	ldrb	r3, [r7, #27]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d00e      	beq.n	80032d6 <HAL_SPI_TransmitReceive+0x6e>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032be:	d106      	bne.n	80032ce <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <HAL_SPI_TransmitReceive+0x66>
 80032c8:	7efb      	ldrb	r3, [r7, #27]
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d003      	beq.n	80032d6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
 80032d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80032d4:	e1e0      	b.n	8003698 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x80>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x80>
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d103      	bne.n	80032f0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80032ee:	e1d3      	b.n	8003698 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d003      	beq.n	8003304 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2205      	movs	r2, #5
 8003300:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	887a      	ldrh	r2, [r7, #2]
 8003314:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	887a      	ldrh	r2, [r7, #2]
 800331c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	887a      	ldrh	r2, [r7, #2]
 800332a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	887a      	ldrh	r2, [r7, #2]
 8003330:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003346:	d802      	bhi.n	800334e <HAL_SPI_TransmitReceive+0xe6>
 8003348:	8a3b      	ldrh	r3, [r7, #16]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d908      	bls.n	8003360 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	e007      	b.n	8003370 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800336e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800337a:	2b40      	cmp	r3, #64	@ 0x40
 800337c:	d007      	beq.n	800338e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800338c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003396:	f240 8081 	bls.w	800349c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_SPI_TransmitReceive+0x140>
 80033a2:	8a7b      	ldrh	r3, [r7, #18]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d16d      	bne.n	8003484 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ac:	881a      	ldrh	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b8:	1c9a      	adds	r2, r3, #2
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033cc:	e05a      	b.n	8003484 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d11b      	bne.n	8003414 <HAL_SPI_TransmitReceive+0x1ac>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d016      	beq.n	8003414 <HAL_SPI_TransmitReceive+0x1ac>
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d113      	bne.n	8003414 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f0:	881a      	ldrh	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fc:	1c9a      	adds	r2, r3, #2
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b01      	cmp	r3, #1
 8003420:	d11c      	bne.n	800345c <HAL_SPI_TransmitReceive+0x1f4>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d016      	beq.n	800345c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	b292      	uxth	r2, r2
 800343a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	1c9a      	adds	r2, r3, #2
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003458:	2301      	movs	r3, #1
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800345c:	f7fe fb8a 	bl	8001b74 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003468:	429a      	cmp	r2, r3
 800346a:	d80b      	bhi.n	8003484 <HAL_SPI_TransmitReceive+0x21c>
 800346c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003472:	d007      	beq.n	8003484 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003482:	e109      	b.n	8003698 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d19f      	bne.n	80033ce <HAL_SPI_TransmitReceive+0x166>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d199      	bne.n	80033ce <HAL_SPI_TransmitReceive+0x166>
 800349a:	e0e3      	b.n	8003664 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_SPI_TransmitReceive+0x244>
 80034a4:	8a7b      	ldrh	r3, [r7, #18]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	f040 80cf 	bne.w	800364a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d912      	bls.n	80034dc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ba:	881a      	ldrh	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c6:	1c9a      	adds	r2, r3, #2
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b02      	subs	r3, #2
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034da:	e0b6      	b.n	800364a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	330c      	adds	r3, #12
 80034e6:	7812      	ldrb	r2, [r2, #0]
 80034e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003502:	e0a2      	b.n	800364a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b02      	cmp	r3, #2
 8003510:	d134      	bne.n	800357c <HAL_SPI_TransmitReceive+0x314>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003516:	b29b      	uxth	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d02f      	beq.n	800357c <HAL_SPI_TransmitReceive+0x314>
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	2b01      	cmp	r3, #1
 8003520:	d12c      	bne.n	800357c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d912      	bls.n	8003552 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003530:	881a      	ldrh	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	1c9a      	adds	r2, r3, #2
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b02      	subs	r3, #2
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003550:	e012      	b.n	8003578 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	330c      	adds	r3, #12
 800355c:	7812      	ldrb	r2, [r2, #0]
 800355e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d148      	bne.n	800361c <HAL_SPI_TransmitReceive+0x3b4>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d042      	beq.n	800361c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d923      	bls.n	80035ea <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ac:	b292      	uxth	r2, r2
 80035ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b4:	1c9a      	adds	r2, r3, #2
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b02      	subs	r3, #2
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d81f      	bhi.n	8003618 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	e016      	b.n	8003618 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f103 020c 	add.w	r2, r3, #12
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	7812      	ldrb	r2, [r2, #0]
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003618:	2301      	movs	r3, #1
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800361c:	f7fe faaa 	bl	8001b74 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003628:	429a      	cmp	r2, r3
 800362a:	d803      	bhi.n	8003634 <HAL_SPI_TransmitReceive+0x3cc>
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003632:	d102      	bne.n	800363a <HAL_SPI_TransmitReceive+0x3d2>
 8003634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003636:	2b00      	cmp	r3, #0
 8003638:	d107      	bne.n	800364a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003648:	e026      	b.n	8003698 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	f47f af57 	bne.w	8003504 <HAL_SPI_TransmitReceive+0x29c>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	f47f af50 	bne.w	8003504 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f94b 	bl	8003904 <SPI_EndRxTxTransaction>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800368e:	e003      	b.n	8003698 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80036a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3728      	adds	r7, #40	@ 0x28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80036ba:	b2db      	uxtb	r3, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	4613      	mov	r3, r2
 80036d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036d8:	f7fe fa4c 	bl	8001b74 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	4413      	add	r3, r2
 80036e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036e8:	f7fe fa44 	bl	8001b74 <HAL_GetTick>
 80036ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036ee:	4b39      	ldr	r3, [pc, #228]	@ (80037d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	015b      	lsls	r3, r3, #5
 80036f4:	0d1b      	lsrs	r3, r3, #20
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	fb02 f303 	mul.w	r3, r2, r3
 80036fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036fe:	e054      	b.n	80037aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003706:	d050      	beq.n	80037aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003708:	f7fe fa34 	bl	8001b74 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	429a      	cmp	r2, r3
 8003716:	d902      	bls.n	800371e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d13d      	bne.n	800379a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800372c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003736:	d111      	bne.n	800375c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003740:	d004      	beq.n	800374c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800374a:	d107      	bne.n	800375c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800375a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003764:	d10f      	bne.n	8003786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e017      	b.n	80037ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4013      	ands	r3, r2
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	bf0c      	ite	eq
 80037ba:	2301      	moveq	r3, #1
 80037bc:	2300      	movne	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d19b      	bne.n	8003700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3720      	adds	r7, #32
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000040 	.word	0x20000040

080037d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	@ 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037ea:	f7fe f9c3 	bl	8001b74 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	4413      	add	r3, r2
 80037f8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80037fa:	f7fe f9bb 	bl	8001b74 <HAL_GetTick>
 80037fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	330c      	adds	r3, #12
 8003806:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003808:	4b3d      	ldr	r3, [pc, #244]	@ (8003900 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	00da      	lsls	r2, r3, #3
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	0d1b      	lsrs	r3, r3, #20
 8003818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003820:	e060      	b.n	80038e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003828:	d107      	bne.n	800383a <SPI_WaitFifoStateUntilTimeout+0x62>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d104      	bne.n	800383a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003838:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003840:	d050      	beq.n	80038e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003842:	f7fe f997 	bl	8001b74 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800384e:	429a      	cmp	r2, r3
 8003850:	d902      	bls.n	8003858 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	2b00      	cmp	r3, #0
 8003856:	d13d      	bne.n	80038d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003866:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003870:	d111      	bne.n	8003896 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800387a:	d004      	beq.n	8003886 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003884:	d107      	bne.n	8003896 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003894:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800389e:	d10f      	bne.n	80038c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e010      	b.n	80038f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4013      	ands	r3, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d196      	bne.n	8003822 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3728      	adds	r7, #40	@ 0x28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000040 	.word	0x20000040

08003904 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2200      	movs	r2, #0
 8003918:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff ff5b 	bl	80037d8 <SPI_WaitFifoStateUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d007      	beq.n	8003938 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e027      	b.n	8003988 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2200      	movs	r2, #0
 8003940:	2180      	movs	r1, #128	@ 0x80
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f7ff fec0 	bl	80036c8 <SPI_WaitFlagStateUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d007      	beq.n	800395e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003952:	f043 0220 	orr.w	r2, r3, #32
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e014      	b.n	8003988 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2200      	movs	r2, #0
 8003966:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f7ff ff34 	bl	80037d8 <SPI_WaitFifoStateUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d007      	beq.n	8003986 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800397a:	f043 0220 	orr.w	r2, r3, #32
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e000      	b.n	8003988 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003998:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800399c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	4013      	ands	r3, r2
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039c6:	b084      	sub	sp, #16
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	f107 0014 	add.w	r0, r7, #20
 80039d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	b004      	add	sp, #16
 8003a06:	4770      	bx	lr

08003a08 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8003a12:	2300      	movs	r3, #0
 8003a14:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8003a1e:	4b59      	ldr	r3, [pc, #356]	@ (8003b84 <BSP_ACCELERO_Init+0x17c>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	4798      	blx	r3
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b33      	cmp	r3, #51	@ 0x33
 8003a28:	d150      	bne.n	8003acc <BSP_ACCELERO_Init+0xc4>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8003a2a:	4b57      	ldr	r3, [pc, #348]	@ (8003b88 <BSP_ACCELERO_Init+0x180>)
 8003a2c:	4a55      	ldr	r2, [pc, #340]	@ (8003b84 <BSP_ACCELERO_Init+0x17c>)
 8003a2e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8003a34:	2340      	movs	r3, #64	@ 0x40
 8003a36:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8003a38:	2307      	movs	r3, #7
 8003a3a:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8003a40:	2300      	movs	r3, #0
 8003a42:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8003a44:	2300      	movs	r3, #0
 8003a46:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8003a48:	2308      	movs	r3, #8
 8003a4a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003a4c:	7b3a      	ldrb	r2, [r7, #12]
 8003a4e:	7b7b      	ldrb	r3, [r7, #13]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8003a54:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003a56:	4313      	orrs	r3, r2
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	8abb      	ldrh	r3, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003a62:	7c3a      	ldrb	r2, [r7, #16]
 8003a64:	7c7b      	ldrb	r3, [r7, #17]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	b2da      	uxtb	r2, r3
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8003a6a:	7cbb      	ldrb	r3, [r7, #18]
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	b2da      	uxtb	r2, r3
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003a72:	4313      	orrs	r3, r2
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	b21b      	sxth	r3, r3
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	b21a      	sxth	r2, r3
 8003a7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	b21b      	sxth	r3, r3
 8003a84:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003a86:	4b40      	ldr	r3, [pc, #256]	@ (8003b88 <BSP_ACCELERO_Init+0x180>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	8aba      	ldrh	r2, [r7, #20]
 8003a8e:	4610      	mov	r0, r2
 8003a90:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8003a92:	2380      	movs	r3, #128	@ 0x80
 8003a94:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8003a96:	2310      	movs	r3, #16
 8003a98:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003aa2:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8003aa4:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8003aaa:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003aac:	4313      	orrs	r3, r2
 8003aae:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8003ab8:	4b33      	ldr	r3, [pc, #204]	@ (8003b88 <BSP_ACCELERO_Init+0x180>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abe:	8aba      	ldrh	r2, [r7, #20]
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	4798      	blx	r3

    ret = ACCELERO_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	75fb      	strb	r3, [r7, #23]
 8003aca:	e055      	b.n	8003b78 <BSP_ACCELERO_Init+0x170>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8003acc:	4b2f      	ldr	r3, [pc, #188]	@ (8003b8c <BSP_ACCELERO_Init+0x184>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4798      	blx	r3
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b33      	cmp	r3, #51	@ 0x33
 8003ad6:	d14f      	bne.n	8003b78 <BSP_ACCELERO_Init+0x170>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8003ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b88 <BSP_ACCELERO_Init+0x180>)
 8003ada:	4a2c      	ldr	r2, [pc, #176]	@ (8003b8c <BSP_ACCELERO_Init+0x184>)
 8003adc:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8003ae2:	2340      	movs	r3, #64	@ 0x40
 8003ae4:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8003ae6:	2307      	movs	r3, #7
 8003ae8:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8003aea:	2300      	movs	r3, #0
 8003aec:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8003aee:	2300      	movs	r3, #0
 8003af0:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8003af2:	2300      	movs	r3, #0
 8003af4:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8003af6:	2308      	movs	r3, #8
 8003af8:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003afa:	7b3a      	ldrb	r2, [r7, #12]
 8003afc:	7b7b      	ldrb	r3, [r7, #13]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8003b02:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003b04:	4313      	orrs	r3, r2
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	8abb      	ldrh	r3, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003b10:	7c3a      	ldrb	r2, [r7, #16]
 8003b12:	7c7b      	ldrb	r3, [r7, #17]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	b2da      	uxtb	r2, r3
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8003b18:	7cbb      	ldrb	r3, [r7, #18]
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	b2da      	uxtb	r2, r3
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003b20:	4313      	orrs	r3, r2
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	b21b      	sxth	r3, r3
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	b21a      	sxth	r2, r3
 8003b2a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	b21b      	sxth	r3, r3
 8003b32:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003b34:	4b14      	ldr	r3, [pc, #80]	@ (8003b88 <BSP_ACCELERO_Init+0x180>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	8aba      	ldrh	r2, [r7, #20]
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8003b40:	2380      	movs	r3, #128	@ 0x80
 8003b42:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8003b44:	2310      	movs	r3, #16
 8003b46:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003b50:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8003b52:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003b54:	4313      	orrs	r3, r2
 8003b56:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8003b58:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003b60:	4313      	orrs	r3, r2
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8003b66:	4b08      	ldr	r3, [pc, #32]	@ (8003b88 <BSP_ACCELERO_Init+0x180>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	8aba      	ldrh	r2, [r7, #20]
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	4610      	mov	r0, r2
 8003b72:	4798      	blx	r3

    ret = ACCELERO_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	200000e8 	.word	0x200000e8
 8003b88:	200006b4 	.word	0x200006b4
 8003b8c:	200000b4 	.word	0x200000b4

08003b90 <BSP_ACCELERO_GetXYZ>:
  * @param pDataXYZ Pointer on 3 angular accelerations
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv->GetXYZ!= NULL)
 8003b98:	4b06      	ldr	r3, [pc, #24]	@ (8003bb4 <BSP_ACCELERO_GetXYZ+0x24>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <BSP_ACCELERO_GetXYZ+0x1c>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8003ba2:	4b04      	ldr	r3, [pc, #16]	@ (8003bb4 <BSP_ACCELERO_GetXYZ+0x24>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
  }
}
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	200006b4 	.word	0x200006b4

08003bb8 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	703b      	strb	r3, [r7, #0]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8003bce:	4b51      	ldr	r3, [pc, #324]	@ (8003d14 <BSP_GYRO_Init+0x15c>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	4798      	blx	r3
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2bd4      	cmp	r3, #212	@ 0xd4
 8003bd8:	d005      	beq.n	8003be6 <BSP_GYRO_Init+0x2e>
 8003bda:	4b4e      	ldr	r3, [pc, #312]	@ (8003d14 <BSP_GYRO_Init+0x15c>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	4798      	blx	r3
 8003be0:	4603      	mov	r3, r0
 8003be2:	2bd5      	cmp	r3, #213	@ 0xd5
 8003be4:	d145      	bne.n	8003c72 <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8003be6:	4b4c      	ldr	r3, [pc, #304]	@ (8003d18 <BSP_GYRO_Init+0x160>)
 8003be8:	4a4a      	ldr	r2, [pc, #296]	@ (8003d14 <BSP_GYRO_Init+0x15c>)
 8003bea:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8003bec:	2308      	movs	r3, #8
 8003bee:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8003bf4:	2307      	movs	r3, #7
 8003bf6:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8003bf8:	2330      	movs	r3, #48	@ 0x30
 8003bfa:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8003c00:	2300      	movs	r3, #0
 8003c02:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8003c04:	2310      	movs	r3, #16
 8003c06:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003c08:	793a      	ldrb	r2, [r7, #4]
 8003c0a:	797b      	ldrb	r3, [r7, #5]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003c10:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003c12:	4313      	orrs	r3, r2
 8003c14:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003c16:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003c1e:	7a3a      	ldrb	r2, [r7, #8]
 8003c20:	7a7b      	ldrb	r3, [r7, #9]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8003c26:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	89bb      	ldrh	r3, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8003c36:	4b38      	ldr	r3, [pc, #224]	@ (8003d18 <BSP_GYRO_Init+0x160>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	89ba      	ldrh	r2, [r7, #12]
 8003c3e:	4610      	mov	r0, r2
 8003c40:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8003c42:	2300      	movs	r3, #0
 8003c44:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003c4a:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8003c4c:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8003c54:	4b30      	ldr	r3, [pc, #192]	@ (8003d18 <BSP_GYRO_Init+0x160>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5a:	89ba      	ldrh	r2, [r7, #12]
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	4610      	mov	r0, r2
 8003c60:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8003c62:	4b2d      	ldr	r3, [pc, #180]	@ (8003d18 <BSP_GYRO_Init+0x160>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c68:	2010      	movs	r0, #16
 8003c6a:	4798      	blx	r3

    ret = GYRO_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	73fb      	strb	r3, [r7, #15]
 8003c70:	e04a      	b.n	8003d08 <BSP_GYRO_Init+0x150>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8003c72:	4b2a      	ldr	r3, [pc, #168]	@ (8003d1c <BSP_GYRO_Init+0x164>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	4798      	blx	r3
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2bd3      	cmp	r3, #211	@ 0xd3
 8003c7c:	d144      	bne.n	8003d08 <BSP_GYRO_Init+0x150>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8003c7e:	4b26      	ldr	r3, [pc, #152]	@ (8003d18 <BSP_GYRO_Init+0x160>)
 8003c80:	4a26      	ldr	r2, [pc, #152]	@ (8003d1c <BSP_GYRO_Init+0x164>)
 8003c82:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8003c84:	2308      	movs	r3, #8
 8003c86:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 8003c8c:	2307      	movs	r3, #7
 8003c8e:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 8003c90:	2330      	movs	r3, #48	@ 0x30
 8003c92:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8003c94:	2300      	movs	r3, #0
 8003c96:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003ca0:	793a      	ldrb	r2, [r7, #4]
 8003ca2:	797b      	ldrb	r3, [r7, #5]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003ca8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003caa:	4313      	orrs	r3, r2
 8003cac:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003cae:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003cb6:	7a3a      	ldrb	r2, [r7, #8]
 8003cb8:	7a7b      	ldrb	r3, [r7, #9]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8003cbe:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	89bb      	ldrh	r3, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8003cce:	4b12      	ldr	r3, [pc, #72]	@ (8003d18 <BSP_GYRO_Init+0x160>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	89ba      	ldrh	r2, [r7, #12]
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003ce2:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8003ce4:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8003cec:	4b0a      	ldr	r3, [pc, #40]	@ (8003d18 <BSP_GYRO_Init+0x160>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf2:	89ba      	ldrh	r2, [r7, #12]
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 8003cfa:	4b07      	ldr	r3, [pc, #28]	@ (8003d18 <BSP_GYRO_Init+0x160>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d00:	2010      	movs	r0, #16
 8003d02:	4798      	blx	r3

    ret = GYRO_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20000080 	.word	0x20000080
 8003d18:	200006b8 	.word	0x200006b8
 8003d1c:	2000004c 	.word	0x2000004c

08003d20 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8003d28:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <BSP_GYRO_GetXYZ+0x24>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d004      	beq.n	8003d3c <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8003d32:	4b04      	ldr	r3, [pc, #16]	@ (8003d44 <BSP_GYRO_GetXYZ+0x24>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	4798      	blx	r3
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	200006b8 	.word	0x200006b8

08003d48 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003d52:	2300      	movs	r3, #0
 8003d54:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8003d56:	f001 f8d7 	bl	8004f08 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8003d60:	f107 030f 	add.w	r3, r7, #15
 8003d64:	2201      	movs	r2, #1
 8003d66:	2120      	movs	r1, #32
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 f913 	bl	8004f94 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	0a1b      	lsrs	r3, r3, #8
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8003d78:	f107 030f 	add.w	r3, r7, #15
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	2123      	movs	r1, #35	@ 0x23
 8003d80:	4618      	mov	r0, r3
 8003d82:	f001 f907 	bl	8004f94 <GYRO_IO_Write>
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	af00      	add	r7, sp, #0
}
 8003d92:	bf00      	nop
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8003da2:	f001 f8b1 	bl	8004f08 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8003da6:	1dfb      	adds	r3, r7, #7
 8003da8:	2201      	movs	r2, #1
 8003daa:	210f      	movs	r1, #15
 8003dac:	4618      	mov	r0, r3
 8003dae:	f001 f923 	bl	8004ff8 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8003db2:	79fb      	ldrb	r3, [r7, #7]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8003dc2:	1dfb      	adds	r3, r7, #7
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	2124      	movs	r1, #36	@ 0x24
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 f915 	bl	8004ff8 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8003dd8:	1dfb      	adds	r3, r7, #7
 8003dda:	2201      	movs	r2, #1
 8003ddc:	2124      	movs	r1, #36	@ 0x24
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 f8d8 	bl	8004f94 <GYRO_IO_Write>
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8003e00:	f107 030f 	add.w	r3, r7, #15
 8003e04:	2201      	movs	r2, #1
 8003e06:	2120      	movs	r1, #32
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f001 f8c3 	bl	8004f94 <GYRO_IO_Write>
}
 8003e0e:	bf00      	nop
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8003e20:	2300      	movs	r3, #0
 8003e22:	73fb      	strb	r3, [r7, #15]
 8003e24:	2300      	movs	r3, #0
 8003e26:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8003e28:	f107 030f 	add.w	r3, r7, #15
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	2130      	movs	r1, #48	@ 0x30
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 f8e1 	bl	8004ff8 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8003e36:	f107 030e 	add.w	r3, r7, #14
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	2122      	movs	r1, #34	@ 0x22
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f001 f8da 	bl	8004ff8 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	121b      	asrs	r3, r3, #8
 8003e54:	b25a      	sxtb	r2, r3
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	b25b      	sxtb	r3, r3
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	b25b      	sxtb	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8003e62:	7bbb      	ldrb	r3, [r7, #14]
 8003e64:	f023 0320 	bic.w	r3, r3, #32
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8003e6c:	88fb      	ldrh	r3, [r7, #6]
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	7bbb      	ldrb	r3, [r7, #14]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8003e78:	f107 030f 	add.w	r3, r7, #15
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	2130      	movs	r1, #48	@ 0x30
 8003e80:	4618      	mov	r0, r3
 8003e82:	f001 f887 	bl	8004f94 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8003e86:	f107 030e 	add.w	r3, r7, #14
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	2122      	movs	r1, #34	@ 0x22
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 f880 	bl	8004f94 <GYRO_IO_Write>
}
 8003e94:	bf00      	nop
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8003ea6:	f107 030f 	add.w	r3, r7, #15
 8003eaa:	2201      	movs	r2, #1
 8003eac:	2122      	movs	r1, #34	@ 0x22
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f001 f8a2 	bl	8004ff8 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	73fb      	strb	r3, [r7, #15]
 8003ece:	e00c      	b.n	8003eea <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d109      	bne.n	8003eea <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	f023 0308 	bic.w	r3, r3, #8
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	f043 0308 	orr.w	r3, r3, #8
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8003eea:	f107 030f 	add.w	r3, r7, #15
 8003eee:	2201      	movs	r2, #1
 8003ef0:	2122      	movs	r1, #34	@ 0x22
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 f84e 	bl	8004f94 <GYRO_IO_Write>
}
 8003ef8:	bf00      	nop
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8003f0a:	f107 030f 	add.w	r3, r7, #15
 8003f0e:	2201      	movs	r2, #1
 8003f10:	2122      	movs	r1, #34	@ 0x22
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 f870 	bl	8004ff8 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d107      	bne.n	8003f2e <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	73fb      	strb	r3, [r7, #15]
 8003f2c:	e009      	b.n	8003f42 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d106      	bne.n	8003f42 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	f023 0308 	bic.w	r3, r3, #8
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8003f42:	f107 030f 	add.w	r3, r7, #15
 8003f46:	2201      	movs	r2, #1
 8003f48:	2122      	movs	r1, #34	@ 0x22
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 f822 	bl	8004f94 <GYRO_IO_Write>
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8003f62:	f107 030f 	add.w	r3, r7, #15
 8003f66:	2201      	movs	r2, #1
 8003f68:	2121      	movs	r1, #33	@ 0x21
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 f844 	bl	8004ff8 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8003f84:	f107 030f 	add.w	r3, r7, #15
 8003f88:	2201      	movs	r2, #1
 8003f8a:	2121      	movs	r1, #33	@ 0x21
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f001 f801 	bl	8004f94 <GYRO_IO_Write>
}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8003fa4:	f107 030f 	add.w	r3, r7, #15
 8003fa8:	2201      	movs	r2, #1
 8003faa:	2124      	movs	r1, #36	@ 0x24
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 f823 	bl	8004ff8 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	f023 0310 	bic.w	r3, r3, #16
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8003fbc:	7bfa      	ldrb	r2, [r7, #15]
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8003fc6:	f107 030f 	add.w	r3, r7, #15
 8003fca:	2201      	movs	r2, #1
 8003fcc:	2124      	movs	r1, #36	@ 0x24
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 ffe0 	bl	8004f94 <GYRO_IO_Write>
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	@ 0x28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8003fe4:	f107 0318 	add.w	r3, r7, #24
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 8003fee:	f107 0310 	add.w	r3, r7, #16
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	627b      	str	r3, [r7, #36]	@ 0x24
  int i = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8004006:	f107 030f 	add.w	r3, r7, #15
 800400a:	2201      	movs	r2, #1
 800400c:	2123      	movs	r1, #35	@ 0x23
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fff2 	bl	8004ff8 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8004014:	f107 0318 	add.w	r3, r7, #24
 8004018:	2206      	movs	r2, #6
 800401a:	2128      	movs	r1, #40	@ 0x28
 800401c:	4618      	mov	r0, r3
 800401e:	f000 ffeb 	bl	8004ff8 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d121      	bne.n	8004070 <I3G4250D_ReadXYZAngRate+0x94>
  {
    for (i = 0; i < 3; i++)
 800402c:	2300      	movs	r3, #0
 800402e:	623b      	str	r3, [r7, #32]
 8004030:	e01a      	b.n	8004068 <I3G4250D_ReadXYZAngRate+0x8c>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	3301      	adds	r3, #1
 8004038:	3328      	adds	r3, #40	@ 0x28
 800403a:	443b      	add	r3, r7
 800403c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	b29b      	uxth	r3, r3
 8004044:	6a3a      	ldr	r2, [r7, #32]
 8004046:	0052      	lsls	r2, r2, #1
 8004048:	3228      	adds	r2, #40	@ 0x28
 800404a:	443a      	add	r2, r7
 800404c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8004050:	4413      	add	r3, r2
 8004052:	b29b      	uxth	r3, r3
 8004054:	b21a      	sxth	r2, r3
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	3328      	adds	r3, #40	@ 0x28
 800405c:	443b      	add	r3, r7
 800405e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	3301      	adds	r3, #1
 8004066:	623b      	str	r3, [r7, #32]
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	2b02      	cmp	r3, #2
 800406c:	dde1      	ble.n	8004032 <I3G4250D_ReadXYZAngRate+0x56>
 800406e:	e020      	b.n	80040b2 <I3G4250D_ReadXYZAngRate+0xd6>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 8004070:	2300      	movs	r3, #0
 8004072:	623b      	str	r3, [r7, #32]
 8004074:	e01a      	b.n	80040ac <I3G4250D_ReadXYZAngRate+0xd0>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	3328      	adds	r3, #40	@ 0x28
 800407c:	443b      	add	r3, r7
 800407e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	b29b      	uxth	r3, r3
 8004086:	6a3a      	ldr	r2, [r7, #32]
 8004088:	0052      	lsls	r2, r2, #1
 800408a:	3201      	adds	r2, #1
 800408c:	3228      	adds	r2, #40	@ 0x28
 800408e:	443a      	add	r2, r7
 8004090:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8004094:	4413      	add	r3, r2
 8004096:	b29b      	uxth	r3, r3
 8004098:	b21a      	sxth	r2, r3
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	3328      	adds	r3, #40	@ 0x28
 80040a0:	443b      	add	r3, r7
 80040a2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	3301      	adds	r3, #1
 80040aa:	623b      	str	r3, [r7, #32]
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	dde1      	ble.n	8004076 <I3G4250D_ReadXYZAngRate+0x9a>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d00c      	beq.n	80040d6 <I3G4250D_ReadXYZAngRate+0xfa>
 80040bc:	2b20      	cmp	r3, #32
 80040be:	dc0d      	bgt.n	80040dc <I3G4250D_ReadXYZAngRate+0x100>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <I3G4250D_ReadXYZAngRate+0xee>
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d003      	beq.n	80040d0 <I3G4250D_ReadXYZAngRate+0xf4>
 80040c8:	e008      	b.n	80040dc <I3G4250D_ReadXYZAngRate+0x100>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 80040ca:	4b15      	ldr	r3, [pc, #84]	@ (8004120 <I3G4250D_ReadXYZAngRate+0x144>)
 80040cc:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80040ce:	e005      	b.n	80040dc <I3G4250D_ReadXYZAngRate+0x100>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 80040d0:	4b14      	ldr	r3, [pc, #80]	@ (8004124 <I3G4250D_ReadXYZAngRate+0x148>)
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80040d4:	e002      	b.n	80040dc <I3G4250D_ReadXYZAngRate+0x100>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 80040d6:	4b14      	ldr	r3, [pc, #80]	@ (8004128 <I3G4250D_ReadXYZAngRate+0x14c>)
 80040d8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80040da:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 80040dc:	2300      	movs	r3, #0
 80040de:	623b      	str	r3, [r7, #32]
 80040e0:	e016      	b.n	8004110 <I3G4250D_ReadXYZAngRate+0x134>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	3328      	adds	r3, #40	@ 0x28
 80040e8:	443b      	add	r3, r7
 80040ea:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004106:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	3301      	adds	r3, #1
 800410e:	623b      	str	r3, [r7, #32]
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	2b02      	cmp	r3, #2
 8004114:	dde5      	ble.n	80040e2 <I3G4250D_ReadXYZAngRate+0x106>
  }
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	3728      	adds	r7, #40	@ 0x28
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	410c0000 	.word	0x410c0000
 8004124:	418c0000 	.word	0x418c0000
 8004128:	428c0000 	.word	0x428c0000

0800412c <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004136:	2300      	movs	r3, #0
 8004138:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800413a:	f000 fee5 	bl	8004f08 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8004144:	f107 030f 	add.w	r3, r7, #15
 8004148:	2201      	movs	r2, #1
 800414a:	2120      	movs	r1, #32
 800414c:	4618      	mov	r0, r3
 800414e:	f000 ff21 	bl	8004f94 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	0a1b      	lsrs	r3, r3, #8
 8004156:	b29b      	uxth	r3, r3
 8004158:	b2db      	uxtb	r3, r3
 800415a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800415c:	f107 030f 	add.w	r3, r7, #15
 8004160:	2201      	movs	r2, #1
 8004162:	2123      	movs	r1, #35	@ 0x23
 8004164:	4618      	mov	r0, r3
 8004166:	f000 ff15 	bl	8004f94 <GYRO_IO_Write>
}
 800416a:	bf00      	nop
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8004172:	b480      	push	{r7}
 8004174:	af00      	add	r7, sp, #0
}
 8004176:	bf00      	nop
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8004186:	f000 febf 	bl	8004f08 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800418a:	1dfb      	adds	r3, r7, #7
 800418c:	2201      	movs	r2, #1
 800418e:	210f      	movs	r1, #15
 8004190:	4618      	mov	r0, r3
 8004192:	f000 ff31 	bl	8004ff8 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8004196:	79fb      	ldrb	r3, [r7, #7]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80041a6:	1dfb      	adds	r3, r7, #7
 80041a8:	2201      	movs	r2, #1
 80041aa:	2124      	movs	r1, #36	@ 0x24
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 ff23 	bl	8004ff8 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80041bc:	1dfb      	adds	r3, r7, #7
 80041be:	2201      	movs	r2, #1
 80041c0:	2124      	movs	r1, #36	@ 0x24
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fee6 	bl	8004f94 <GYRO_IO_Write>
}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80041da:	2300      	movs	r3, #0
 80041dc:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80041de:	88fb      	ldrh	r3, [r7, #6]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80041e4:	f107 030f 	add.w	r3, r7, #15
 80041e8:	2201      	movs	r2, #1
 80041ea:	2120      	movs	r1, #32
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fed1 	bl	8004f94 <GYRO_IO_Write>
}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	4603      	mov	r3, r0
 8004202:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8004204:	2300      	movs	r3, #0
 8004206:	73fb      	strb	r3, [r7, #15]
 8004208:	2300      	movs	r3, #0
 800420a:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800420c:	f107 030f 	add.w	r3, r7, #15
 8004210:	2201      	movs	r2, #1
 8004212:	2130      	movs	r1, #48	@ 0x30
 8004214:	4618      	mov	r0, r3
 8004216:	f000 feef 	bl	8004ff8 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800421a:	f107 030e 	add.w	r3, r7, #14
 800421e:	2201      	movs	r2, #1
 8004220:	2122      	movs	r1, #34	@ 0x22
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fee8 	bl	8004ff8 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800422e:	b2db      	uxtb	r3, r3
 8004230:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	121b      	asrs	r3, r3, #8
 8004238:	b25a      	sxtb	r2, r3
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	b25b      	sxtb	r3, r3
 800423e:	4313      	orrs	r3, r2
 8004240:	b25b      	sxtb	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8004246:	7bbb      	ldrb	r3, [r7, #14]
 8004248:	f023 0320 	bic.w	r3, r3, #32
 800424c:	b2db      	uxtb	r3, r3
 800424e:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8004250:	88fb      	ldrh	r3, [r7, #6]
 8004252:	b2da      	uxtb	r2, r3
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	4313      	orrs	r3, r2
 8004258:	b2db      	uxtb	r3, r3
 800425a:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800425c:	f107 030f 	add.w	r3, r7, #15
 8004260:	2201      	movs	r2, #1
 8004262:	2130      	movs	r1, #48	@ 0x30
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fe95 	bl	8004f94 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800426a:	f107 030e 	add.w	r3, r7, #14
 800426e:	2201      	movs	r2, #1
 8004270:	2122      	movs	r1, #34	@ 0x22
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fe8e 	bl	8004f94 <GYRO_IO_Write>
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800428a:	f107 030f 	add.w	r3, r7, #15
 800428e:	2201      	movs	r2, #1
 8004290:	2122      	movs	r1, #34	@ 0x22
 8004292:	4618      	mov	r0, r3
 8004294:	f000 feb0 	bl	8004ff8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	73fb      	strb	r3, [r7, #15]
 80042b2:	e00c      	b.n	80042ce <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d109      	bne.n	80042ce <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	f023 0308 	bic.w	r3, r3, #8
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	f043 0308 	orr.w	r3, r3, #8
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80042ce:	f107 030f 	add.w	r3, r7, #15
 80042d2:	2201      	movs	r2, #1
 80042d4:	2122      	movs	r1, #34	@ 0x22
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fe5c 	bl	8004f94 <GYRO_IO_Write>
}
 80042dc:	bf00      	nop
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80042ee:	f107 030f 	add.w	r3, r7, #15
 80042f2:	2201      	movs	r2, #1
 80042f4:	2122      	movs	r1, #34	@ 0x22
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fe7e 	bl	8004ff8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d107      	bne.n	8004312 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004308:	b2db      	uxtb	r3, r3
 800430a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	73fb      	strb	r3, [r7, #15]
 8004310:	e009      	b.n	8004326 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d106      	bne.n	8004326 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	f023 0308 	bic.w	r3, r3, #8
 800431e:	b2db      	uxtb	r3, r3
 8004320:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8004326:	f107 030f 	add.w	r3, r7, #15
 800432a:	2201      	movs	r2, #1
 800432c:	2122      	movs	r1, #34	@ 0x22
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fe30 	bl	8004f94 <GYRO_IO_Write>
}
 8004334:	bf00      	nop
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004346:	f107 030f 	add.w	r3, r7, #15
 800434a:	2201      	movs	r2, #1
 800434c:	2121      	movs	r1, #33	@ 0x21
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fe52 	bl	8004ff8 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800435a:	b2db      	uxtb	r3, r3
 800435c:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800435e:	7bfa      	ldrb	r2, [r7, #15]
 8004360:	79fb      	ldrb	r3, [r7, #7]
 8004362:	4313      	orrs	r3, r2
 8004364:	b2db      	uxtb	r3, r3
 8004366:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8004368:	f107 030f 	add.w	r3, r7, #15
 800436c:	2201      	movs	r2, #1
 800436e:	2121      	movs	r1, #33	@ 0x21
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fe0f 	bl	8004f94 <GYRO_IO_Write>
}
 8004376:	bf00      	nop
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b084      	sub	sp, #16
 8004382:	af00      	add	r7, sp, #0
 8004384:	4603      	mov	r3, r0
 8004386:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8004388:	f107 030f 	add.w	r3, r7, #15
 800438c:	2201      	movs	r2, #1
 800438e:	2124      	movs	r1, #36	@ 0x24
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fe31 	bl	8004ff8 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	f023 0310 	bic.w	r3, r3, #16
 800439c:	b2db      	uxtb	r3, r3
 800439e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80043a0:	7bfa      	ldrb	r2, [r7, #15]
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80043aa:	f107 030f 	add.w	r3, r7, #15
 80043ae:	2201      	movs	r2, #1
 80043b0:	2124      	movs	r1, #36	@ 0x24
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fdee 	bl	8004f94 <GYRO_IO_Write>
}
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08a      	sub	sp, #40	@ 0x28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 80043c8:	f107 0318 	add.w	r3, r7, #24
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 80043d2:	f107 0310 	add.w	r3, r7, #16
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 80043ea:	f107 030f 	add.w	r3, r7, #15
 80043ee:	2201      	movs	r2, #1
 80043f0:	2123      	movs	r1, #35	@ 0x23
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fe00 	bl	8004ff8 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 80043f8:	f107 0318 	add.w	r3, r7, #24
 80043fc:	2206      	movs	r2, #6
 80043fe:	2128      	movs	r1, #40	@ 0x28
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fdf9 	bl	8004ff8 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800440c:	2b00      	cmp	r3, #0
 800440e:	d121      	bne.n	8004454 <L3GD20_ReadXYZAngRate+0x94>
  {
    for(i=0; i<3; i++)
 8004410:	2300      	movs	r3, #0
 8004412:	623b      	str	r3, [r7, #32]
 8004414:	e01a      	b.n	800444c <L3GD20_ReadXYZAngRate+0x8c>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	3301      	adds	r3, #1
 800441c:	3328      	adds	r3, #40	@ 0x28
 800441e:	443b      	add	r3, r7
 8004420:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	b29b      	uxth	r3, r3
 8004428:	6a3a      	ldr	r2, [r7, #32]
 800442a:	0052      	lsls	r2, r2, #1
 800442c:	3228      	adds	r2, #40	@ 0x28
 800442e:	443a      	add	r2, r7
 8004430:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8004434:	4413      	add	r3, r2
 8004436:	b29b      	uxth	r3, r3
 8004438:	b21a      	sxth	r2, r3
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	3328      	adds	r3, #40	@ 0x28
 8004440:	443b      	add	r3, r7
 8004442:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	3301      	adds	r3, #1
 800444a:	623b      	str	r3, [r7, #32]
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	2b02      	cmp	r3, #2
 8004450:	dde1      	ble.n	8004416 <L3GD20_ReadXYZAngRate+0x56>
 8004452:	e020      	b.n	8004496 <L3GD20_ReadXYZAngRate+0xd6>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8004454:	2300      	movs	r3, #0
 8004456:	623b      	str	r3, [r7, #32]
 8004458:	e01a      	b.n	8004490 <L3GD20_ReadXYZAngRate+0xd0>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	3328      	adds	r3, #40	@ 0x28
 8004460:	443b      	add	r3, r7
 8004462:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	b29b      	uxth	r3, r3
 800446a:	6a3a      	ldr	r2, [r7, #32]
 800446c:	0052      	lsls	r2, r2, #1
 800446e:	3201      	adds	r2, #1
 8004470:	3228      	adds	r2, #40	@ 0x28
 8004472:	443a      	add	r2, r7
 8004474:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8004478:	4413      	add	r3, r2
 800447a:	b29b      	uxth	r3, r3
 800447c:	b21a      	sxth	r2, r3
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	3328      	adds	r3, #40	@ 0x28
 8004484:	443b      	add	r3, r7
 8004486:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	3301      	adds	r3, #1
 800448e:	623b      	str	r3, [r7, #32]
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	2b02      	cmp	r3, #2
 8004494:	dde1      	ble.n	800445a <L3GD20_ReadXYZAngRate+0x9a>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800449c:	2b20      	cmp	r3, #32
 800449e:	d00c      	beq.n	80044ba <L3GD20_ReadXYZAngRate+0xfa>
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	dc0d      	bgt.n	80044c0 <L3GD20_ReadXYZAngRate+0x100>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <L3GD20_ReadXYZAngRate+0xee>
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d003      	beq.n	80044b4 <L3GD20_ReadXYZAngRate+0xf4>
 80044ac:	e008      	b.n	80044c0 <L3GD20_ReadXYZAngRate+0x100>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80044ae:	4b15      	ldr	r3, [pc, #84]	@ (8004504 <L3GD20_ReadXYZAngRate+0x144>)
 80044b0:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80044b2:	e005      	b.n	80044c0 <L3GD20_ReadXYZAngRate+0x100>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80044b4:	4b14      	ldr	r3, [pc, #80]	@ (8004508 <L3GD20_ReadXYZAngRate+0x148>)
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80044b8:	e002      	b.n	80044c0 <L3GD20_ReadXYZAngRate+0x100>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80044ba:	4b14      	ldr	r3, [pc, #80]	@ (800450c <L3GD20_ReadXYZAngRate+0x14c>)
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80044be:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 80044c0:	2300      	movs	r3, #0
 80044c2:	623b      	str	r3, [r7, #32]
 80044c4:	e016      	b.n	80044f4 <L3GD20_ReadXYZAngRate+0x134>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	3328      	adds	r3, #40	@ 0x28
 80044cc:	443b      	add	r3, r7
 80044ce:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	4413      	add	r3, r2
 80044e2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80044e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ea:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	3301      	adds	r3, #1
 80044f2:	623b      	str	r3, [r7, #32]
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	dde5      	ble.n	80044c6 <L3GD20_ReadXYZAngRate+0x106>
  }
}
 80044fa:	bf00      	nop
 80044fc:	bf00      	nop
 80044fe:	3728      	adds	r7, #40	@ 0x28
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	410c0000 	.word	0x410c0000
 8004508:	418c0000 	.word	0x418c0000
 800450c:	428c0000 	.word	0x428c0000

08004510 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800451a:	2300      	movs	r3, #0
 800451c:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800451e:	f000 fda5 	bl	800506c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	461a      	mov	r2, r3
 800452a:	2120      	movs	r1, #32
 800452c:	2032      	movs	r0, #50	@ 0x32
 800452e:	f000 fe15 	bl	800515c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8004532:	2300      	movs	r3, #0
 8004534:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	461a      	mov	r2, r3
 800453a:	2123      	movs	r1, #35	@ 0x23
 800453c:	2032      	movs	r0, #50	@ 0x32
 800453e:	f000 fe0d 	bl	800515c <COMPASSACCELERO_IO_Write>
}
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 800454a:	b480      	push	{r7}
 800454c:	af00      	add	r7, sp, #0
}
 800454e:	bf00      	nop
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800455e:	2300      	movs	r3, #0
 8004560:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8004562:	f000 fd83 	bl	800506c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8004566:	210f      	movs	r1, #15
 8004568:	2032      	movs	r0, #50	@ 0x32
 800456a:	f000 fe0a 	bl	8005182 <COMPASSACCELERO_IO_Read>
 800456e:	4603      	mov	r3, r0
 8004570:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8004572:	79fb      	ldrb	r3, [r7, #7]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8004582:	2124      	movs	r1, #36	@ 0x24
 8004584:	2032      	movs	r0, #50	@ 0x32
 8004586:	f000 fdfc 	bl	8005182 <COMPASSACCELERO_IO_Read>
 800458a:	4603      	mov	r3, r0
 800458c:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004594:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	461a      	mov	r2, r3
 800459a:	2124      	movs	r1, #36	@ 0x24
 800459c:	2032      	movs	r0, #50	@ 0x32
 800459e:	f000 fddd 	bl	800515c <COMPASSACCELERO_IO_Write>
}
 80045a2:	bf00      	nop
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	4603      	mov	r3, r0
 80045b2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80045b4:	2121      	movs	r1, #33	@ 0x21
 80045b6:	2032      	movs	r0, #50	@ 0x32
 80045b8:	f000 fde3 	bl	8005182 <COMPASSACCELERO_IO_Read>
 80045bc:	4603      	mov	r3, r0
 80045be:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 80045c8:	7bfa      	ldrb	r2, [r7, #15]
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	461a      	mov	r2, r3
 80045d4:	2121      	movs	r1, #33	@ 0x21
 80045d6:	2032      	movs	r0, #50	@ 0x32
 80045d8:	f000 fdc0 	bl	800515c <COMPASSACCELERO_IO_Write>
}
 80045dc:	bf00      	nop
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80045ee:	2121      	movs	r1, #33	@ 0x21
 80045f0:	2032      	movs	r0, #50	@ 0x32
 80045f2:	f000 fdc6 	bl	8005182 <COMPASSACCELERO_IO_Read>
 80045f6:	4603      	mov	r3, r0
 80045f8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	f023 0308 	bic.w	r3, r3, #8
 8004600:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	4313      	orrs	r3, r2
 8004608:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	461a      	mov	r2, r3
 800460e:	2121      	movs	r1, #33	@ 0x21
 8004610:	2032      	movs	r0, #50	@ 0x32
 8004612:	f000 fda3 	bl	800515c <COMPASSACCELERO_IO_Write>
}
 8004616:	bf00      	nop
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b088      	sub	sp, #32
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8004626:	2300      	movs	r3, #0
 8004628:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 800462e:	2301      	movs	r3, #1
 8004630:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8004632:	2123      	movs	r1, #35	@ 0x23
 8004634:	2032      	movs	r0, #50	@ 0x32
 8004636:	f000 fda4 	bl	8005182 <COMPASSACCELERO_IO_Read>
 800463a:	4603      	mov	r3, r0
 800463c:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800463e:	2124      	movs	r1, #36	@ 0x24
 8004640:	2032      	movs	r0, #50	@ 0x32
 8004642:	f000 fd9e 	bl	8005182 <COMPASSACCELERO_IO_Read>
 8004646:	4603      	mov	r3, r0
 8004648:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 800464a:	2128      	movs	r1, #40	@ 0x28
 800464c:	2032      	movs	r0, #50	@ 0x32
 800464e:	f000 fd98 	bl	8005182 <COMPASSACCELERO_IO_Read>
 8004652:	4603      	mov	r3, r0
 8004654:	b25b      	sxtb	r3, r3
 8004656:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8004658:	2129      	movs	r1, #41	@ 0x29
 800465a:	2032      	movs	r0, #50	@ 0x32
 800465c:	f000 fd91 	bl	8005182 <COMPASSACCELERO_IO_Read>
 8004660:	4603      	mov	r3, r0
 8004662:	b25b      	sxtb	r3, r3
 8004664:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8004666:	212a      	movs	r1, #42	@ 0x2a
 8004668:	2032      	movs	r0, #50	@ 0x32
 800466a:	f000 fd8a 	bl	8005182 <COMPASSACCELERO_IO_Read>
 800466e:	4603      	mov	r3, r0
 8004670:	b25b      	sxtb	r3, r3
 8004672:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8004674:	212b      	movs	r1, #43	@ 0x2b
 8004676:	2032      	movs	r0, #50	@ 0x32
 8004678:	f000 fd83 	bl	8005182 <COMPASSACCELERO_IO_Read>
 800467c:	4603      	mov	r3, r0
 800467e:	b25b      	sxtb	r3, r3
 8004680:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8004682:	212c      	movs	r1, #44	@ 0x2c
 8004684:	2032      	movs	r0, #50	@ 0x32
 8004686:	f000 fd7c 	bl	8005182 <COMPASSACCELERO_IO_Read>
 800468a:	4603      	mov	r3, r0
 800468c:	b25b      	sxtb	r3, r3
 800468e:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8004690:	212d      	movs	r1, #45	@ 0x2d
 8004692:	2032      	movs	r0, #50	@ 0x32
 8004694:	f000 fd75 	bl	8005182 <COMPASSACCELERO_IO_Read>
 8004698:	4603      	mov	r3, r0
 800469a:	b25b      	sxtb	r3, r3
 800469c:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 800469e:	7d3b      	ldrb	r3, [r7, #20]
 80046a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d123      	bne.n	80046f0 <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 80046a8:	2300      	movs	r3, #0
 80046aa:	77fb      	strb	r3, [r7, #31]
 80046ac:	e01c      	b.n	80046e8 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80046ae:	7ffb      	ldrb	r3, [r7, #31]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	3301      	adds	r3, #1
 80046b4:	3320      	adds	r3, #32
 80046b6:	443b      	add	r3, r7
 80046b8:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	7ffb      	ldrb	r3, [r7, #31]
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	3320      	adds	r3, #32
 80046c8:	443b      	add	r3, r7
 80046ca:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	4413      	add	r3, r2
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	7ffb      	ldrb	r3, [r7, #31]
 80046d6:	b212      	sxth	r2, r2
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	3320      	adds	r3, #32
 80046dc:	443b      	add	r3, r7
 80046de:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80046e2:	7ffb      	ldrb	r3, [r7, #31]
 80046e4:	3301      	adds	r3, #1
 80046e6:	77fb      	strb	r3, [r7, #31]
 80046e8:	7ffb      	ldrb	r3, [r7, #31]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d9df      	bls.n	80046ae <LSM303AGR_AccReadXYZ+0x90>
 80046ee:	e022      	b.n	8004736 <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 80046f0:	2300      	movs	r3, #0
 80046f2:	77fb      	strb	r3, [r7, #31]
 80046f4:	e01c      	b.n	8004730 <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 80046f6:	7ffb      	ldrb	r3, [r7, #31]
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	3320      	adds	r3, #32
 80046fc:	443b      	add	r3, r7
 80046fe:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8004702:	b29b      	uxth	r3, r3
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	b29a      	uxth	r2, r3
 8004708:	7ffb      	ldrb	r3, [r7, #31]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	3301      	adds	r3, #1
 800470e:	3320      	adds	r3, #32
 8004710:	443b      	add	r3, r7
 8004712:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8004716:	b29b      	uxth	r3, r3
 8004718:	4413      	add	r3, r2
 800471a:	b29a      	uxth	r2, r3
 800471c:	7ffb      	ldrb	r3, [r7, #31]
 800471e:	b212      	sxth	r2, r2
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	3320      	adds	r3, #32
 8004724:	443b      	add	r3, r7
 8004726:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800472a:	7ffb      	ldrb	r3, [r7, #31]
 800472c:	3301      	adds	r3, #1
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	7ffb      	ldrb	r3, [r7, #31]
 8004732:	2b02      	cmp	r3, #2
 8004734:	d9df      	bls.n	80046f6 <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8004736:	7d3b      	ldrb	r3, [r7, #20]
 8004738:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800473c:	2b30      	cmp	r3, #48	@ 0x30
 800473e:	d013      	beq.n	8004768 <LSM303AGR_AccReadXYZ+0x14a>
 8004740:	2b30      	cmp	r3, #48	@ 0x30
 8004742:	dc14      	bgt.n	800476e <LSM303AGR_AccReadXYZ+0x150>
 8004744:	2b20      	cmp	r3, #32
 8004746:	d00c      	beq.n	8004762 <LSM303AGR_AccReadXYZ+0x144>
 8004748:	2b20      	cmp	r3, #32
 800474a:	dc10      	bgt.n	800476e <LSM303AGR_AccReadXYZ+0x150>
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <LSM303AGR_AccReadXYZ+0x138>
 8004750:	2b10      	cmp	r3, #16
 8004752:	d003      	beq.n	800475c <LSM303AGR_AccReadXYZ+0x13e>
 8004754:	e00b      	b.n	800476e <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8004756:	2301      	movs	r3, #1
 8004758:	77bb      	strb	r3, [r7, #30]
    break;
 800475a:	e008      	b.n	800476e <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 800475c:	2302      	movs	r3, #2
 800475e:	77bb      	strb	r3, [r7, #30]
    break;
 8004760:	e005      	b.n	800476e <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8004762:	2304      	movs	r3, #4
 8004764:	77bb      	strb	r3, [r7, #30]
    break;
 8004766:	e002      	b.n	800476e <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8004768:	230c      	movs	r3, #12
 800476a:	77bb      	strb	r3, [r7, #30]
    break;
 800476c:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800476e:	2300      	movs	r3, #0
 8004770:	77fb      	strb	r3, [r7, #31]
 8004772:	e014      	b.n	800479e <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8004774:	7ffb      	ldrb	r3, [r7, #31]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	3320      	adds	r3, #32
 800477a:	443b      	add	r3, r7
 800477c:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8004780:	b29a      	uxth	r2, r3
 8004782:	7fbb      	ldrb	r3, [r7, #30]
 8004784:	b29b      	uxth	r3, r3
 8004786:	fb12 f303 	smulbb	r3, r2, r3
 800478a:	b299      	uxth	r1, r3
 800478c:	7ffb      	ldrb	r3, [r7, #31]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	4413      	add	r3, r2
 8004794:	b20a      	sxth	r2, r1
 8004796:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8004798:	7ffb      	ldrb	r3, [r7, #31]
 800479a:	3301      	adds	r3, #1
 800479c:	77fb      	strb	r3, [r7, #31]
 800479e:	7ffb      	ldrb	r3, [r7, #31]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d9e7      	bls.n	8004774 <LSM303AGR_AccReadXYZ+0x156>
  }
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b084      	sub	sp, #16
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	4603      	mov	r3, r0
 80047b6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80047b8:	2300      	movs	r3, #0
 80047ba:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80047bc:	2121      	movs	r1, #33	@ 0x21
 80047be:	2032      	movs	r0, #50	@ 0x32
 80047c0:	f000 fcdf 	bl	8005182 <COMPASSACCELERO_IO_Read>
 80047c4:	4603      	mov	r3, r0
 80047c6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	f023 0304 	bic.w	r3, r3, #4
 80047ce:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 80047d0:	7bfa      	ldrb	r2, [r7, #15]
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	461a      	mov	r2, r3
 80047dc:	2121      	movs	r1, #33	@ 0x21
 80047de:	2032      	movs	r0, #50	@ 0x32
 80047e0:	f000 fcbc 	bl	800515c <COMPASSACCELERO_IO_Write>
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80047f6:	2300      	movs	r3, #0
 80047f8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 80047fa:	2122      	movs	r1, #34	@ 0x22
 80047fc:	2032      	movs	r0, #50	@ 0x32
 80047fe:	f000 fcc0 	bl	8005182 <COMPASSACCELERO_IO_Read>
 8004802:	4603      	mov	r3, r0
 8004804:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8004806:	7bfa      	ldrb	r2, [r7, #15]
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	4313      	orrs	r3, r2
 800480c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	461a      	mov	r2, r3
 8004812:	2122      	movs	r1, #34	@ 0x22
 8004814:	2032      	movs	r0, #50	@ 0x32
 8004816:	f000 fca1 	bl	800515c <COMPASSACCELERO_IO_Write>
}
 800481a:	bf00      	nop
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	4603      	mov	r3, r0
 800482a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800482c:	2300      	movs	r3, #0
 800482e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8004830:	2138      	movs	r1, #56	@ 0x38
 8004832:	2032      	movs	r0, #50	@ 0x32
 8004834:	f000 fca5 	bl	8005182 <COMPASSACCELERO_IO_Read>
 8004838:	4603      	mov	r3, r0
 800483a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800483c:	7bfa      	ldrb	r2, [r7, #15]
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	4313      	orrs	r3, r2
 8004842:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	461a      	mov	r2, r3
 8004848:	2138      	movs	r1, #56	@ 0x38
 800484a:	2032      	movs	r0, #50	@ 0x32
 800484c:	f000 fc86 	bl	800515c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8004850:	230a      	movs	r3, #10
 8004852:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	461a      	mov	r2, r3
 8004858:	213a      	movs	r1, #58	@ 0x3a
 800485a:	2032      	movs	r0, #50	@ 0x32
 800485c:	f000 fc7e 	bl	800515c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8004860:	2305      	movs	r3, #5
 8004862:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	461a      	mov	r2, r3
 8004868:	213b      	movs	r1, #59	@ 0x3b
 800486a:	2032      	movs	r0, #50	@ 0x32
 800486c:	f000 fc76 	bl	800515c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	461a      	mov	r2, r3
 8004874:	213c      	movs	r1, #60	@ 0x3c
 8004876:	2032      	movs	r0, #50	@ 0x32
 8004878:	f000 fc70 	bl	800515c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 800487c:	2332      	movs	r3, #50	@ 0x32
 800487e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	461a      	mov	r2, r3
 8004884:	213d      	movs	r1, #61	@ 0x3d
 8004886:	2032      	movs	r0, #50	@ 0x32
 8004888:	f000 fc68 	bl	800515c <COMPASSACCELERO_IO_Write>
}
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8004898:	f000 fc32 	bl	8005100 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 800489c:	2080      	movs	r0, #128	@ 0x80
 800489e:	f7ff ffa5 	bl	80047ec <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 80048a2:	2004      	movs	r0, #4
 80048a4:	f7ff ff83 	bl	80047ae <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 80048a8:	2010      	movs	r0, #16
 80048aa:	f7ff ffba 	bl	8004822 <LSM303AGR_AccClickITEnable>
}
 80048ae:	bf00      	nop
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	4603      	mov	r3, r0
 80048ba:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80048bc:	2300      	movs	r3, #0
 80048be:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80048c0:	f000 fbd4 	bl	800506c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80048c4:	88fb      	ldrh	r3, [r7, #6]
 80048c6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	461a      	mov	r2, r3
 80048cc:	2120      	movs	r1, #32
 80048ce:	2032      	movs	r0, #50	@ 0x32
 80048d0:	f000 fc44 	bl	800515c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80048d4:	2300      	movs	r3, #0
 80048d6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	461a      	mov	r2, r3
 80048dc:	2123      	movs	r1, #35	@ 0x23
 80048de:	2032      	movs	r0, #50	@ 0x32
 80048e0:	f000 fc3c 	bl	800515c <COMPASSACCELERO_IO_Write>
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004900:	2300      	movs	r3, #0
 8004902:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8004904:	f000 fbb2 	bl	800506c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8004908:	210f      	movs	r1, #15
 800490a:	2032      	movs	r0, #50	@ 0x32
 800490c:	f000 fc39 	bl	8005182 <COMPASSACCELERO_IO_Read>
 8004910:	4603      	mov	r3, r0
 8004912:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8004914:	79fb      	ldrb	r3, [r7, #7]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8004924:	2124      	movs	r1, #36	@ 0x24
 8004926:	2032      	movs	r0, #50	@ 0x32
 8004928:	f000 fc2b 	bl	8005182 <COMPASSACCELERO_IO_Read>
 800492c:	4603      	mov	r3, r0
 800492e:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8004930:	79fb      	ldrb	r3, [r7, #7]
 8004932:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004936:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	461a      	mov	r2, r3
 800493c:	2124      	movs	r1, #36	@ 0x24
 800493e:	2032      	movs	r0, #50	@ 0x32
 8004940:	f000 fc0c 	bl	800515c <COMPASSACCELERO_IO_Write>
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004956:	2121      	movs	r1, #33	@ 0x21
 8004958:	2032      	movs	r0, #50	@ 0x32
 800495a:	f000 fc12 	bl	8005182 <COMPASSACCELERO_IO_Read>
 800495e:	4603      	mov	r3, r0
 8004960:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	f003 030c 	and.w	r3, r3, #12
 8004968:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 800496a:	7bfa      	ldrb	r2, [r7, #15]
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	4313      	orrs	r3, r2
 8004970:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	461a      	mov	r2, r3
 8004976:	2121      	movs	r1, #33	@ 0x21
 8004978:	2032      	movs	r0, #50	@ 0x32
 800497a:	f000 fbef 	bl	800515c <COMPASSACCELERO_IO_Write>
}
 800497e:	bf00      	nop
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	4603      	mov	r3, r0
 800498e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004990:	2121      	movs	r1, #33	@ 0x21
 8004992:	2032      	movs	r0, #50	@ 0x32
 8004994:	f000 fbf5 	bl	8005182 <COMPASSACCELERO_IO_Read>
 8004998:	4603      	mov	r3, r0
 800499a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	f023 0308 	bic.w	r3, r3, #8
 80049a2:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80049a4:	7bfa      	ldrb	r2, [r7, #15]
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	461a      	mov	r2, r3
 80049b0:	2121      	movs	r1, #33	@ 0x21
 80049b2:	2032      	movs	r0, #50	@ 0x32
 80049b4:	f000 fbd2 	bl	800515c <COMPASSACCELERO_IO_Write>
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80049c8:	2300      	movs	r3, #0
 80049ca:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80049d0:	2301      	movs	r3, #1
 80049d2:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 80049d4:	2123      	movs	r1, #35	@ 0x23
 80049d6:	2032      	movs	r0, #50	@ 0x32
 80049d8:	f000 fbd3 	bl	8005182 <COMPASSACCELERO_IO_Read>
 80049dc:	4603      	mov	r3, r0
 80049de:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80049e0:	2124      	movs	r1, #36	@ 0x24
 80049e2:	2032      	movs	r0, #50	@ 0x32
 80049e4:	f000 fbcd 	bl	8005182 <COMPASSACCELERO_IO_Read>
 80049e8:	4603      	mov	r3, r0
 80049ea:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80049ec:	2128      	movs	r1, #40	@ 0x28
 80049ee:	2032      	movs	r0, #50	@ 0x32
 80049f0:	f000 fbc7 	bl	8005182 <COMPASSACCELERO_IO_Read>
 80049f4:	4603      	mov	r3, r0
 80049f6:	b25b      	sxtb	r3, r3
 80049f8:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80049fa:	2129      	movs	r1, #41	@ 0x29
 80049fc:	2032      	movs	r0, #50	@ 0x32
 80049fe:	f000 fbc0 	bl	8005182 <COMPASSACCELERO_IO_Read>
 8004a02:	4603      	mov	r3, r0
 8004a04:	b25b      	sxtb	r3, r3
 8004a06:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8004a08:	212a      	movs	r1, #42	@ 0x2a
 8004a0a:	2032      	movs	r0, #50	@ 0x32
 8004a0c:	f000 fbb9 	bl	8005182 <COMPASSACCELERO_IO_Read>
 8004a10:	4603      	mov	r3, r0
 8004a12:	b25b      	sxtb	r3, r3
 8004a14:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8004a16:	212b      	movs	r1, #43	@ 0x2b
 8004a18:	2032      	movs	r0, #50	@ 0x32
 8004a1a:	f000 fbb2 	bl	8005182 <COMPASSACCELERO_IO_Read>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	b25b      	sxtb	r3, r3
 8004a22:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8004a24:	212c      	movs	r1, #44	@ 0x2c
 8004a26:	2032      	movs	r0, #50	@ 0x32
 8004a28:	f000 fbab 	bl	8005182 <COMPASSACCELERO_IO_Read>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	b25b      	sxtb	r3, r3
 8004a30:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8004a32:	212d      	movs	r1, #45	@ 0x2d
 8004a34:	2032      	movs	r0, #50	@ 0x32
 8004a36:	f000 fba4 	bl	8005182 <COMPASSACCELERO_IO_Read>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	b25b      	sxtb	r3, r3
 8004a3e:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8004a40:	7d3b      	ldrb	r3, [r7, #20]
 8004a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d123      	bne.n	8004a92 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	77fb      	strb	r3, [r7, #31]
 8004a4e:	e01c      	b.n	8004a8a <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8004a50:	7ffb      	ldrb	r3, [r7, #31]
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	3301      	adds	r3, #1
 8004a56:	3320      	adds	r3, #32
 8004a58:	443b      	add	r3, r7
 8004a5a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	7ffb      	ldrb	r3, [r7, #31]
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	3320      	adds	r3, #32
 8004a6a:	443b      	add	r3, r7
 8004a6c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	4413      	add	r3, r2
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	7ffb      	ldrb	r3, [r7, #31]
 8004a78:	b212      	sxth	r2, r2
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	3320      	adds	r3, #32
 8004a7e:	443b      	add	r3, r7
 8004a80:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8004a84:	7ffb      	ldrb	r3, [r7, #31]
 8004a86:	3301      	adds	r3, #1
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	7ffb      	ldrb	r3, [r7, #31]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d9df      	bls.n	8004a50 <LSM303DLHC_AccReadXYZ+0x90>
 8004a90:	e022      	b.n	8004ad8 <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8004a92:	2300      	movs	r3, #0
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e01c      	b.n	8004ad2 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8004a98:	7ffb      	ldrb	r3, [r7, #31]
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	3320      	adds	r3, #32
 8004a9e:	443b      	add	r3, r7
 8004aa0:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	7ffb      	ldrb	r3, [r7, #31]
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	3301      	adds	r3, #1
 8004ab0:	3320      	adds	r3, #32
 8004ab2:	443b      	add	r3, r7
 8004ab4:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	4413      	add	r3, r2
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	7ffb      	ldrb	r3, [r7, #31]
 8004ac0:	b212      	sxth	r2, r2
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	3320      	adds	r3, #32
 8004ac6:	443b      	add	r3, r7
 8004ac8:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8004acc:	7ffb      	ldrb	r3, [r7, #31]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	77fb      	strb	r3, [r7, #31]
 8004ad2:	7ffb      	ldrb	r3, [r7, #31]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d9df      	bls.n	8004a98 <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8004ad8:	7d3b      	ldrb	r3, [r7, #20]
 8004ada:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ade:	2b30      	cmp	r3, #48	@ 0x30
 8004ae0:	d013      	beq.n	8004b0a <LSM303DLHC_AccReadXYZ+0x14a>
 8004ae2:	2b30      	cmp	r3, #48	@ 0x30
 8004ae4:	dc14      	bgt.n	8004b10 <LSM303DLHC_AccReadXYZ+0x150>
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d00c      	beq.n	8004b04 <LSM303DLHC_AccReadXYZ+0x144>
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	dc10      	bgt.n	8004b10 <LSM303DLHC_AccReadXYZ+0x150>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <LSM303DLHC_AccReadXYZ+0x138>
 8004af2:	2b10      	cmp	r3, #16
 8004af4:	d003      	beq.n	8004afe <LSM303DLHC_AccReadXYZ+0x13e>
 8004af6:	e00b      	b.n	8004b10 <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8004af8:	2301      	movs	r3, #1
 8004afa:	77bb      	strb	r3, [r7, #30]
    break;
 8004afc:	e008      	b.n	8004b10 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8004afe:	2302      	movs	r3, #2
 8004b00:	77bb      	strb	r3, [r7, #30]
    break;
 8004b02:	e005      	b.n	8004b10 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8004b04:	2304      	movs	r3, #4
 8004b06:	77bb      	strb	r3, [r7, #30]
    break;
 8004b08:	e002      	b.n	8004b10 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8004b0a:	230c      	movs	r3, #12
 8004b0c:	77bb      	strb	r3, [r7, #30]
    break;
 8004b0e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8004b10:	2300      	movs	r3, #0
 8004b12:	77fb      	strb	r3, [r7, #31]
 8004b14:	e014      	b.n	8004b40 <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8004b16:	7ffb      	ldrb	r3, [r7, #31]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	3320      	adds	r3, #32
 8004b1c:	443b      	add	r3, r7
 8004b1e:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	7fbb      	ldrb	r3, [r7, #30]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	fb12 f303 	smulbb	r3, r2, r3
 8004b2c:	b299      	uxth	r1, r3
 8004b2e:	7ffb      	ldrb	r3, [r7, #31]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	4413      	add	r3, r2
 8004b36:	b20a      	sxth	r2, r1
 8004b38:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8004b3a:	7ffb      	ldrb	r3, [r7, #31]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	7ffb      	ldrb	r3, [r7, #31]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d9e7      	bls.n	8004b16 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8004b46:	bf00      	nop
 8004b48:	bf00      	nop
 8004b4a:	3720      	adds	r7, #32
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004b5e:	2121      	movs	r1, #33	@ 0x21
 8004b60:	2032      	movs	r0, #50	@ 0x32
 8004b62:	f000 fb0e 	bl	8005182 <COMPASSACCELERO_IO_Read>
 8004b66:	4603      	mov	r3, r0
 8004b68:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	f023 0304 	bic.w	r3, r3, #4
 8004b70:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8004b72:	7bfa      	ldrb	r2, [r7, #15]
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	2121      	movs	r1, #33	@ 0x21
 8004b80:	2032      	movs	r0, #50	@ 0x32
 8004b82:	f000 faeb 	bl	800515c <COMPASSACCELERO_IO_Write>
}
 8004b86:	bf00      	nop
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b084      	sub	sp, #16
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	4603      	mov	r3, r0
 8004b96:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8004b9c:	2122      	movs	r1, #34	@ 0x22
 8004b9e:	2032      	movs	r0, #50	@ 0x32
 8004ba0:	f000 faef 	bl	8005182 <COMPASSACCELERO_IO_Read>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8004ba8:	7bfa      	ldrb	r2, [r7, #15]
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2122      	movs	r1, #34	@ 0x22
 8004bb6:	2032      	movs	r0, #50	@ 0x32
 8004bb8:	f000 fad0 	bl	800515c <COMPASSACCELERO_IO_Write>
}
 8004bbc:	bf00      	nop
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8004bd2:	2138      	movs	r1, #56	@ 0x38
 8004bd4:	2032      	movs	r0, #50	@ 0x32
 8004bd6:	f000 fad4 	bl	8005182 <COMPASSACCELERO_IO_Read>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8004bde:	7bfa      	ldrb	r2, [r7, #15]
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	461a      	mov	r2, r3
 8004bea:	2138      	movs	r1, #56	@ 0x38
 8004bec:	2032      	movs	r0, #50	@ 0x32
 8004bee:	f000 fab5 	bl	800515c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8004bf2:	230a      	movs	r3, #10
 8004bf4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	213a      	movs	r1, #58	@ 0x3a
 8004bfc:	2032      	movs	r0, #50	@ 0x32
 8004bfe:	f000 faad 	bl	800515c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8004c02:	2305      	movs	r3, #5
 8004c04:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	213b      	movs	r1, #59	@ 0x3b
 8004c0c:	2032      	movs	r0, #50	@ 0x32
 8004c0e:	f000 faa5 	bl	800515c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	461a      	mov	r2, r3
 8004c16:	213c      	movs	r1, #60	@ 0x3c
 8004c18:	2032      	movs	r0, #50	@ 0x32
 8004c1a:	f000 fa9f 	bl	800515c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8004c1e:	2332      	movs	r3, #50	@ 0x32
 8004c20:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	461a      	mov	r2, r3
 8004c26:	213d      	movs	r1, #61	@ 0x3d
 8004c28:	2032      	movs	r0, #50	@ 0x32
 8004c2a:	f000 fa97 	bl	800515c <COMPASSACCELERO_IO_Write>
}
 8004c2e:	bf00      	nop
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8004c36:	b580      	push	{r7, lr}
 8004c38:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8004c3a:	f000 fa61 	bl	8005100 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8004c3e:	2080      	movs	r0, #128	@ 0x80
 8004c40:	f7ff ffa5 	bl	8004b8e <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8004c44:	2004      	movs	r0, #4
 8004c46:	f7ff ff83 	bl	8004b50 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8004c4a:	2010      	movs	r0, #16
 8004c4c:	f7ff ffba 	bl	8004bc4 <LSM303DLHC_AccClickITEnable>
}
 8004c50:	bf00      	nop
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <I2Cx_MspInit>:
  * @brief Discovery I2Cx MSP Initialization
  * @param hi2c I2C handle
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08a      	sub	sp, #40	@ 0x28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8004c5c:	4b15      	ldr	r3, [pc, #84]	@ (8004cb4 <I2Cx_MspInit+0x60>)
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	4a14      	ldr	r2, [pc, #80]	@ (8004cb4 <I2Cx_MspInit+0x60>)
 8004c62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c66:	6153      	str	r3, [r2, #20]
 8004c68:	4b12      	ldr	r3, [pc, #72]	@ (8004cb4 <I2Cx_MspInit+0x60>)
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	693b      	ldr	r3, [r7, #16]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 8004c74:	23c0      	movs	r3, #192	@ 0xc0
 8004c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c80:	2303      	movs	r3, #3
 8004c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8004c84:	2304      	movs	r3, #4
 8004c86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8004c88:	f107 0314 	add.w	r3, r7, #20
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	480a      	ldr	r0, [pc, #40]	@ (8004cb8 <I2Cx_MspInit+0x64>)
 8004c90:	f7fd f88e 	bl	8001db0 <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8004c94:	4b07      	ldr	r3, [pc, #28]	@ (8004cb4 <I2Cx_MspInit+0x60>)
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	4a06      	ldr	r2, [pc, #24]	@ (8004cb4 <I2Cx_MspInit+0x60>)
 8004c9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c9e:	61d3      	str	r3, [r2, #28]
 8004ca0:	4b04      	ldr	r3, [pc, #16]	@ (8004cb4 <I2Cx_MspInit+0x60>)
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	68fb      	ldr	r3, [r7, #12]
}
 8004cac:	bf00      	nop
 8004cae:	3728      	adds	r7, #40	@ 0x28
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	48000400 	.word	0x48000400

08004cbc <I2Cx_Init>:
/**
  * @brief Discovery I2Cx Bus initialization
  * @retval None
  */
static void I2Cx_Init(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8004cc0:	4811      	ldr	r0, [pc, #68]	@ (8004d08 <I2Cx_Init+0x4c>)
 8004cc2:	f7fd fdcf 	bl	8002864 <HAL_I2C_GetState>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d11a      	bne.n	8004d02 <I2Cx_Init+0x46>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8004ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8004d08 <I2Cx_Init+0x4c>)
 8004cce:	4a0f      	ldr	r2, [pc, #60]	@ (8004d0c <I2Cx_Init+0x50>)
 8004cd0:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d08 <I2Cx_Init+0x4c>)
 8004cd4:	2232      	movs	r2, #50	@ 0x32
 8004cd6:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d08 <I2Cx_Init+0x4c>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004cde:	4b0a      	ldr	r3, [pc, #40]	@ (8004d08 <I2Cx_Init+0x4c>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.OwnAddress2 = 0;
 8004ce4:	4b08      	ldr	r3, [pc, #32]	@ (8004d08 <I2Cx_Init+0x4c>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004cea:	4b07      	ldr	r3, [pc, #28]	@ (8004d08 <I2Cx_Init+0x4c>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;	
 8004cf0:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <I2Cx_Init+0x4c>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8004cf6:	4804      	ldr	r0, [pc, #16]	@ (8004d08 <I2Cx_Init+0x4c>)
 8004cf8:	f7ff ffac 	bl	8004c54 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8004cfc:	4802      	ldr	r0, [pc, #8]	@ (8004d08 <I2Cx_Init+0x4c>)
 8004cfe:	f7fd fac5 	bl	800228c <HAL_I2C_Init>
  }
}
 8004d02:	bf00      	nop
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000720 	.word	0x20000720
 8004d0c:	40005400 	.word	0x40005400

08004d10 <I2Cx_WriteData>:
  * @param  Reg The target register address to write
  * @param  Value The target register value to be written 
  * @retval  None
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af04      	add	r7, sp, #16
 8004d16:	4603      	mov	r3, r0
 8004d18:	80fb      	strh	r3, [r7, #6]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	717b      	strb	r3, [r7, #5]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8004d26:	797b      	ldrb	r3, [r7, #5]
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d58 <I2Cx_WriteData+0x48>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	88f9      	ldrh	r1, [r7, #6]
 8004d30:	9302      	str	r3, [sp, #8]
 8004d32:	2301      	movs	r3, #1
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	1d3b      	adds	r3, r7, #4
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	4807      	ldr	r0, [pc, #28]	@ (8004d5c <I2Cx_WriteData+0x4c>)
 8004d3e:	f7fd fb63 	bl	8002408 <HAL_I2C_Mem_Write>
 8004d42:	4603      	mov	r3, r0
 8004d44:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8004d4c:	f000 f834 	bl	8004db8 <I2Cx_Error>
  }
}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20000120 	.word	0x20000120
 8004d5c:	20000720 	.word	0x20000720

08004d60 <I2Cx_ReadData>:
  * @param  Addr Device address on BUS Bus.  
  * @param  Reg The target register address to write
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af04      	add	r7, sp, #16
 8004d66:	4603      	mov	r3, r0
 8004d68:	460a      	mov	r2, r1
 8004d6a:	80fb      	strh	r3, [r7, #6]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8004d78:	797b      	ldrb	r3, [r7, #5]
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004db0 <I2Cx_ReadData+0x50>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	88f9      	ldrh	r1, [r7, #6]
 8004d82:	9302      	str	r3, [sp, #8]
 8004d84:	2301      	movs	r3, #1
 8004d86:	9301      	str	r3, [sp, #4]
 8004d88:	f107 030e 	add.w	r3, r7, #14
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	2301      	movs	r3, #1
 8004d90:	4808      	ldr	r0, [pc, #32]	@ (8004db4 <I2Cx_ReadData+0x54>)
 8004d92:	f7fd fc4d 	bl	8002630 <HAL_I2C_Mem_Read>
 8004d96:	4603      	mov	r3, r0
 8004d98:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8004da0:	f000 f80a 	bl	8004db8 <I2Cx_Error>
  
  }
  return value;
 8004da4:	7bbb      	ldrb	r3, [r7, #14]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000120 	.word	0x20000120
 8004db4:	20000720 	.word	0x20000720

08004db8 <I2Cx_Error>:
/**
  * @brief I2C3 error treatment function
  * @retval None
  */
static void I2Cx_Error (void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8004dbc:	4803      	ldr	r0, [pc, #12]	@ (8004dcc <I2Cx_Error+0x14>)
 8004dbe:	f7fd faf4 	bl	80023aa <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8004dc2:	f7ff ff7b 	bl	8004cbc <I2Cx_Init>
}
 8004dc6:	bf00      	nop
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000720 	.word	0x20000720

08004dd0 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8004dd4:	481a      	ldr	r0, [pc, #104]	@ (8004e40 <SPIx_Init+0x70>)
 8004dd6:	f7fe fc69 	bl	80036ac <HAL_SPI_GetState>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d12c      	bne.n	8004e3a <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8004de0:	4b17      	ldr	r3, [pc, #92]	@ (8004e40 <SPIx_Init+0x70>)
 8004de2:	4a18      	ldr	r2, [pc, #96]	@ (8004e44 <SPIx_Init+0x74>)
 8004de4:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004de6:	4b16      	ldr	r3, [pc, #88]	@ (8004e40 <SPIx_Init+0x70>)
 8004de8:	2218      	movs	r2, #24
 8004dea:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8004dec:	4b14      	ldr	r3, [pc, #80]	@ (8004e40 <SPIx_Init+0x70>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004df2:	4b13      	ldr	r3, [pc, #76]	@ (8004e40 <SPIx_Init+0x70>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004df8:	4b11      	ldr	r3, [pc, #68]	@ (8004e40 <SPIx_Init+0x70>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dfe:	4b10      	ldr	r3, [pc, #64]	@ (8004e40 <SPIx_Init+0x70>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8004e04:	4b0e      	ldr	r3, [pc, #56]	@ (8004e40 <SPIx_Init+0x70>)
 8004e06:	2207      	movs	r2, #7
 8004e08:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e40 <SPIx_Init+0x70>)
 8004e0c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004e10:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e12:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <SPIx_Init+0x70>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8004e18:	4b09      	ldr	r3, [pc, #36]	@ (8004e40 <SPIx_Init+0x70>)
 8004e1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e1e:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e20:	4b07      	ldr	r3, [pc, #28]	@ (8004e40 <SPIx_Init+0x70>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8004e26:	4b06      	ldr	r3, [pc, #24]	@ (8004e40 <SPIx_Init+0x70>)
 8004e28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004e2c:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8004e2e:	4804      	ldr	r0, [pc, #16]	@ (8004e40 <SPIx_Init+0x70>)
 8004e30:	f000 f836 	bl	8004ea0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8004e34:	4802      	ldr	r0, [pc, #8]	@ (8004e40 <SPIx_Init+0x70>)
 8004e36:	f7fe f944 	bl	80030c2 <HAL_SPI_Init>
  }
}
 8004e3a:	bf00      	nop
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	200006bc 	.word	0x200006bc
 8004e44:	40013000 	.word	0x40013000

08004e48 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	4603      	mov	r3, r0
 8004e50:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8004e56:	4b0a      	ldr	r3, [pc, #40]	@ (8004e80 <SPIx_WriteRead+0x38>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f107 020f 	add.w	r2, r7, #15
 8004e5e:	1df9      	adds	r1, r7, #7
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	2301      	movs	r3, #1
 8004e64:	4807      	ldr	r0, [pc, #28]	@ (8004e84 <SPIx_WriteRead+0x3c>)
 8004e66:	f7fe f9ff 	bl	8003268 <HAL_SPI_TransmitReceive>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8004e70:	f000 f80a 	bl	8004e88 <SPIx_Error>
  }
  
  return receivedbyte;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	2000011c 	.word	0x2000011c
 8004e84:	200006bc 	.word	0x200006bc

08004e88 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8004e8c:	4803      	ldr	r0, [pc, #12]	@ (8004e9c <SPIx_Error+0x14>)
 8004e8e:	f7fe f9c3 	bl	8003218 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8004e92:	f7ff ff9d 	bl	8004dd0 <SPIx_Init>
}
 8004e96:	bf00      	nop
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	200006bc 	.word	0x200006bc

08004ea0 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08a      	sub	sp, #40	@ 0x28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8004ea8:	4b16      	ldr	r3, [pc, #88]	@ (8004f04 <SPIx_MspInit+0x64>)
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	4a15      	ldr	r2, [pc, #84]	@ (8004f04 <SPIx_MspInit+0x64>)
 8004eae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004eb2:	6193      	str	r3, [r2, #24]
 8004eb4:	4b13      	ldr	r3, [pc, #76]	@ (8004f04 <SPIx_MspInit+0x64>)
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8004ec0:	4b10      	ldr	r3, [pc, #64]	@ (8004f04 <SPIx_MspInit+0x64>)
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8004f04 <SPIx_MspInit+0x64>)
 8004ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eca:	6153      	str	r3, [r2, #20]
 8004ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8004f04 <SPIx_MspInit+0x64>)
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8004ed8:	23e0      	movs	r3, #224	@ 0xe0
 8004eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004edc:	2302      	movs	r3, #2
 8004ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8004ee8:	2305      	movs	r3, #5
 8004eea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8004eec:	f107 0314 	add.w	r3, r7, #20
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ef6:	f7fc ff5b 	bl	8001db0 <HAL_GPIO_Init>
}
 8004efa:	bf00      	nop
 8004efc:	3728      	adds	r7, #40	@ 0x28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000

08004f08 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8004f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004f8c <GYRO_IO_Init+0x84>)
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	4a1e      	ldr	r2, [pc, #120]	@ (8004f8c <GYRO_IO_Init+0x84>)
 8004f14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f18:	6153      	str	r3, [r2, #20]
 8004f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004f8c <GYRO_IO_Init+0x84>)
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8004f26:	2308      	movs	r3, #8
 8004f28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f32:	2303      	movs	r3, #3
 8004f34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8004f36:	f107 030c 	add.w	r3, r7, #12
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4814      	ldr	r0, [pc, #80]	@ (8004f90 <GYRO_IO_Init+0x88>)
 8004f3e:	f7fc ff37 	bl	8001db0 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8004f42:	2201      	movs	r2, #1
 8004f44:	2108      	movs	r1, #8
 8004f46:	4812      	ldr	r0, [pc, #72]	@ (8004f90 <GYRO_IO_Init+0x88>)
 8004f48:	f7fd f988 	bl	800225c <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8004f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f8c <GYRO_IO_Init+0x84>)
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	4a0e      	ldr	r2, [pc, #56]	@ (8004f8c <GYRO_IO_Init+0x84>)
 8004f52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f56:	6153      	str	r3, [r2, #20]
 8004f58:	4b0c      	ldr	r3, [pc, #48]	@ (8004f8c <GYRO_IO_Init+0x84>)
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f60:	607b      	str	r3, [r7, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8004f64:	2303      	movs	r3, #3
 8004f66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004f74:	f107 030c 	add.w	r3, r7, #12
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4805      	ldr	r0, [pc, #20]	@ (8004f90 <GYRO_IO_Init+0x88>)
 8004f7c:	f7fc ff18 	bl	8001db0 <HAL_GPIO_Init>
  
  SPIx_Init();
 8004f80:	f7ff ff26 	bl	8004dd0 <SPIx_Init>
}
 8004f84:	bf00      	nop
 8004f86:	3720      	adds	r7, #32
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	48001000 	.word	0x48001000

08004f94 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8004fa4:	883b      	ldrh	r3, [r7, #0]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d903      	bls.n	8004fb2 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fb0:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2108      	movs	r1, #8
 8004fb6:	480f      	ldr	r0, [pc, #60]	@ (8004ff4 <GYRO_IO_Write+0x60>)
 8004fb8:	f7fd f950 	bl	800225c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff ff42 	bl	8004e48 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8004fc4:	e00a      	b.n	8004fdc <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff ff3c 	bl	8004e48 <SPIx_WriteRead>
    NumByteToWrite--;
 8004fd0:	883b      	ldrh	r3, [r7, #0]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8004fdc:	883b      	ldrh	r3, [r7, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f1      	bne.n	8004fc6 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	2108      	movs	r1, #8
 8004fe6:	4803      	ldr	r0, [pc, #12]	@ (8004ff4 <GYRO_IO_Write+0x60>)
 8004fe8:	f7fd f938 	bl	800225c <HAL_GPIO_WritePin>
}
 8004fec:	bf00      	nop
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	48001000 	.word	0x48001000

08004ff8 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	70fb      	strb	r3, [r7, #3]
 8005004:	4613      	mov	r3, r2
 8005006:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8005008:	883b      	ldrh	r3, [r7, #0]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d904      	bls.n	8005018 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8005014:	70fb      	strb	r3, [r7, #3]
 8005016:	e003      	b.n	8005020 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800501e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8005020:	2200      	movs	r2, #0
 8005022:	2108      	movs	r1, #8
 8005024:	4810      	ldr	r0, [pc, #64]	@ (8005068 <GYRO_IO_Read+0x70>)
 8005026:	f7fd f919 	bl	800225c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800502a:	78fb      	ldrb	r3, [r7, #3]
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff ff0b 	bl	8004e48 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8005032:	e00c      	b.n	800504e <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8005034:	2000      	movs	r0, #0
 8005036:	f7ff ff07 	bl	8004e48 <SPIx_WriteRead>
 800503a:	4603      	mov	r3, r0
 800503c:	461a      	mov	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8005042:	883b      	ldrh	r3, [r7, #0]
 8005044:	3b01      	subs	r3, #1
 8005046:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3301      	adds	r3, #1
 800504c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800504e:	883b      	ldrh	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1ef      	bne.n	8005034 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8005054:	2201      	movs	r2, #1
 8005056:	2108      	movs	r1, #8
 8005058:	4803      	ldr	r0, [pc, #12]	@ (8005068 <GYRO_IO_Read+0x70>)
 800505a:	f7fd f8ff 	bl	800225c <HAL_GPIO_WritePin>
}  
 800505e:	bf00      	nop
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	48001000 	.word	0x48001000

0800506c <COMPASSACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8005072:	4b21      	ldr	r3, [pc, #132]	@ (80050f8 <COMPASSACCELERO_IO_Init+0x8c>)
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	4a20      	ldr	r2, [pc, #128]	@ (80050f8 <COMPASSACCELERO_IO_Init+0x8c>)
 8005078:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800507c:	6153      	str	r3, [r2, #20]
 800507e:	4b1e      	ldr	r3, [pc, #120]	@ (80050f8 <COMPASSACCELERO_IO_Init+0x8c>)
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800508a:	4b1b      	ldr	r3, [pc, #108]	@ (80050f8 <COMPASSACCELERO_IO_Init+0x8c>)
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	4a1a      	ldr	r2, [pc, #104]	@ (80050f8 <COMPASSACCELERO_IO_Init+0x8c>)
 8005090:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005094:	6153      	str	r3, [r2, #20]
 8005096:	4b18      	ldr	r3, [pc, #96]	@ (80050f8 <COMPASSACCELERO_IO_Init+0x8c>)
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800509e:	607b      	str	r3, [r7, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 80050a2:	2304      	movs	r3, #4
 80050a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80050a6:	2300      	movs	r3, #0
 80050a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80050ae:	2303      	movs	r3, #3
 80050b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80050b2:	f107 030c 	add.w	r3, r7, #12
 80050b6:	4619      	mov	r1, r3
 80050b8:	4810      	ldr	r0, [pc, #64]	@ (80050fc <COMPASSACCELERO_IO_Init+0x90>)
 80050ba:	f7fc fe79 	bl	8001db0 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x0F, 0x00);
 80050be:	2200      	movs	r2, #0
 80050c0:	210f      	movs	r1, #15
 80050c2:	2008      	movs	r0, #8
 80050c4:	f7fc fe3d 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 80050c8:	2008      	movs	r0, #8
 80050ca:	f7fc fe56 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80050ce:	2330      	movs	r3, #48	@ 0x30
 80050d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80050d2:	2300      	movs	r3, #0
 80050d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80050d6:	2303      	movs	r3, #3
 80050d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80050de:	f107 030c 	add.w	r3, r7, #12
 80050e2:	4619      	mov	r1, r3
 80050e4:	4805      	ldr	r0, [pc, #20]	@ (80050fc <COMPASSACCELERO_IO_Init+0x90>)
 80050e6:	f7fc fe63 	bl	8001db0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 80050ea:	f7ff fde7 	bl	8004cbc <I2Cx_Init>
}
 80050ee:	bf00      	nop
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40021000 	.word	0x40021000
 80050fc:	48001000 	.word	0x48001000

08005100 <COMPASSACCELERO_IO_ITConfig>:
/**
  * @brief  Configures COMPASS / ACCELERO click IT
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8005106:	4b13      	ldr	r3, [pc, #76]	@ (8005154 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	4a12      	ldr	r2, [pc, #72]	@ (8005154 <COMPASSACCELERO_IO_ITConfig+0x54>)
 800510c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005110:	6153      	str	r3, [r2, #20]
 8005112:	4b10      	ldr	r3, [pc, #64]	@ (8005154 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800511e:	2330      	movs	r3, #48	@ 0x30
 8005120:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8005122:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005126:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005128:	2303      	movs	r3, #3
 800512a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800512c:	2300      	movs	r3, #0
 800512e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8005130:	1d3b      	adds	r3, r7, #4
 8005132:	4619      	mov	r1, r3
 8005134:	4808      	ldr	r0, [pc, #32]	@ (8005158 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8005136:	f7fc fe3b 	bl	8001db0 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 800513a:	2200      	movs	r2, #0
 800513c:	210f      	movs	r1, #15
 800513e:	200a      	movs	r0, #10
 8005140:	f7fc fdff 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8005144:	200a      	movs	r0, #10
 8005146:	f7fc fe18 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  
}
 800514a:	bf00      	nop
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40021000 	.word	0x40021000
 8005158:	48001000 	.word	0x48001000

0800515c <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	80fb      	strh	r3, [r7, #6]
 8005166:	460b      	mov	r3, r1
 8005168:	717b      	strb	r3, [r7, #5]
 800516a:	4613      	mov	r3, r2
 800516c:	713b      	strb	r3, [r7, #4]
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 800516e:	793a      	ldrb	r2, [r7, #4]
 8005170:	7979      	ldrb	r1, [r7, #5]
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff fdcb 	bl	8004d10 <I2Cx_WriteData>
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
 8005188:	4603      	mov	r3, r0
 800518a:	460a      	mov	r2, r1
 800518c:	80fb      	strh	r3, [r7, #6]
 800518e:	4613      	mov	r3, r2
 8005190:	717b      	strb	r3, [r7, #5]
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8005192:	797a      	ldrb	r2, [r7, #5]
 8005194:	88fb      	ldrh	r3, [r7, #6]
 8005196:	4611      	mov	r1, r2
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff fde1 	bl	8004d60 <I2Cx_ReadData>
 800519e:	4603      	mov	r3, r0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <__cvt>:
 80051a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051ac:	ec57 6b10 	vmov	r6, r7, d0
 80051b0:	2f00      	cmp	r7, #0
 80051b2:	460c      	mov	r4, r1
 80051b4:	4619      	mov	r1, r3
 80051b6:	463b      	mov	r3, r7
 80051b8:	bfbb      	ittet	lt
 80051ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80051be:	461f      	movlt	r7, r3
 80051c0:	2300      	movge	r3, #0
 80051c2:	232d      	movlt	r3, #45	@ 0x2d
 80051c4:	700b      	strb	r3, [r1, #0]
 80051c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80051cc:	4691      	mov	r9, r2
 80051ce:	f023 0820 	bic.w	r8, r3, #32
 80051d2:	bfbc      	itt	lt
 80051d4:	4632      	movlt	r2, r6
 80051d6:	4616      	movlt	r6, r2
 80051d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80051dc:	d005      	beq.n	80051ea <__cvt+0x42>
 80051de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80051e2:	d100      	bne.n	80051e6 <__cvt+0x3e>
 80051e4:	3401      	adds	r4, #1
 80051e6:	2102      	movs	r1, #2
 80051e8:	e000      	b.n	80051ec <__cvt+0x44>
 80051ea:	2103      	movs	r1, #3
 80051ec:	ab03      	add	r3, sp, #12
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	ab02      	add	r3, sp, #8
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	ec47 6b10 	vmov	d0, r6, r7
 80051f8:	4653      	mov	r3, sl
 80051fa:	4622      	mov	r2, r4
 80051fc:	f000 fe68 	bl	8005ed0 <_dtoa_r>
 8005200:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005204:	4605      	mov	r5, r0
 8005206:	d119      	bne.n	800523c <__cvt+0x94>
 8005208:	f019 0f01 	tst.w	r9, #1
 800520c:	d00e      	beq.n	800522c <__cvt+0x84>
 800520e:	eb00 0904 	add.w	r9, r0, r4
 8005212:	2200      	movs	r2, #0
 8005214:	2300      	movs	r3, #0
 8005216:	4630      	mov	r0, r6
 8005218:	4639      	mov	r1, r7
 800521a:	f7fb fc55 	bl	8000ac8 <__aeabi_dcmpeq>
 800521e:	b108      	cbz	r0, 8005224 <__cvt+0x7c>
 8005220:	f8cd 900c 	str.w	r9, [sp, #12]
 8005224:	2230      	movs	r2, #48	@ 0x30
 8005226:	9b03      	ldr	r3, [sp, #12]
 8005228:	454b      	cmp	r3, r9
 800522a:	d31e      	bcc.n	800526a <__cvt+0xc2>
 800522c:	9b03      	ldr	r3, [sp, #12]
 800522e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005230:	1b5b      	subs	r3, r3, r5
 8005232:	4628      	mov	r0, r5
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	b004      	add	sp, #16
 8005238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800523c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005240:	eb00 0904 	add.w	r9, r0, r4
 8005244:	d1e5      	bne.n	8005212 <__cvt+0x6a>
 8005246:	7803      	ldrb	r3, [r0, #0]
 8005248:	2b30      	cmp	r3, #48	@ 0x30
 800524a:	d10a      	bne.n	8005262 <__cvt+0xba>
 800524c:	2200      	movs	r2, #0
 800524e:	2300      	movs	r3, #0
 8005250:	4630      	mov	r0, r6
 8005252:	4639      	mov	r1, r7
 8005254:	f7fb fc38 	bl	8000ac8 <__aeabi_dcmpeq>
 8005258:	b918      	cbnz	r0, 8005262 <__cvt+0xba>
 800525a:	f1c4 0401 	rsb	r4, r4, #1
 800525e:	f8ca 4000 	str.w	r4, [sl]
 8005262:	f8da 3000 	ldr.w	r3, [sl]
 8005266:	4499      	add	r9, r3
 8005268:	e7d3      	b.n	8005212 <__cvt+0x6a>
 800526a:	1c59      	adds	r1, r3, #1
 800526c:	9103      	str	r1, [sp, #12]
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	e7d9      	b.n	8005226 <__cvt+0x7e>

08005272 <__exponent>:
 8005272:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005274:	2900      	cmp	r1, #0
 8005276:	bfba      	itte	lt
 8005278:	4249      	neglt	r1, r1
 800527a:	232d      	movlt	r3, #45	@ 0x2d
 800527c:	232b      	movge	r3, #43	@ 0x2b
 800527e:	2909      	cmp	r1, #9
 8005280:	7002      	strb	r2, [r0, #0]
 8005282:	7043      	strb	r3, [r0, #1]
 8005284:	dd29      	ble.n	80052da <__exponent+0x68>
 8005286:	f10d 0307 	add.w	r3, sp, #7
 800528a:	461d      	mov	r5, r3
 800528c:	270a      	movs	r7, #10
 800528e:	461a      	mov	r2, r3
 8005290:	fbb1 f6f7 	udiv	r6, r1, r7
 8005294:	fb07 1416 	mls	r4, r7, r6, r1
 8005298:	3430      	adds	r4, #48	@ 0x30
 800529a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800529e:	460c      	mov	r4, r1
 80052a0:	2c63      	cmp	r4, #99	@ 0x63
 80052a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80052a6:	4631      	mov	r1, r6
 80052a8:	dcf1      	bgt.n	800528e <__exponent+0x1c>
 80052aa:	3130      	adds	r1, #48	@ 0x30
 80052ac:	1e94      	subs	r4, r2, #2
 80052ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052b2:	1c41      	adds	r1, r0, #1
 80052b4:	4623      	mov	r3, r4
 80052b6:	42ab      	cmp	r3, r5
 80052b8:	d30a      	bcc.n	80052d0 <__exponent+0x5e>
 80052ba:	f10d 0309 	add.w	r3, sp, #9
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	42ac      	cmp	r4, r5
 80052c2:	bf88      	it	hi
 80052c4:	2300      	movhi	r3, #0
 80052c6:	3302      	adds	r3, #2
 80052c8:	4403      	add	r3, r0
 80052ca:	1a18      	subs	r0, r3, r0
 80052cc:	b003      	add	sp, #12
 80052ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80052d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80052d8:	e7ed      	b.n	80052b6 <__exponent+0x44>
 80052da:	2330      	movs	r3, #48	@ 0x30
 80052dc:	3130      	adds	r1, #48	@ 0x30
 80052de:	7083      	strb	r3, [r0, #2]
 80052e0:	70c1      	strb	r1, [r0, #3]
 80052e2:	1d03      	adds	r3, r0, #4
 80052e4:	e7f1      	b.n	80052ca <__exponent+0x58>
	...

080052e8 <_printf_float>:
 80052e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	b08d      	sub	sp, #52	@ 0x34
 80052ee:	460c      	mov	r4, r1
 80052f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80052f4:	4616      	mov	r6, r2
 80052f6:	461f      	mov	r7, r3
 80052f8:	4605      	mov	r5, r0
 80052fa:	f000 fcdb 	bl	8005cb4 <_localeconv_r>
 80052fe:	6803      	ldr	r3, [r0, #0]
 8005300:	9304      	str	r3, [sp, #16]
 8005302:	4618      	mov	r0, r3
 8005304:	f7fa ffb4 	bl	8000270 <strlen>
 8005308:	2300      	movs	r3, #0
 800530a:	930a      	str	r3, [sp, #40]	@ 0x28
 800530c:	f8d8 3000 	ldr.w	r3, [r8]
 8005310:	9005      	str	r0, [sp, #20]
 8005312:	3307      	adds	r3, #7
 8005314:	f023 0307 	bic.w	r3, r3, #7
 8005318:	f103 0208 	add.w	r2, r3, #8
 800531c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005320:	f8d4 b000 	ldr.w	fp, [r4]
 8005324:	f8c8 2000 	str.w	r2, [r8]
 8005328:	e9d3 8900 	ldrd	r8, r9, [r3]
 800532c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005330:	9307      	str	r3, [sp, #28]
 8005332:	f8cd 8018 	str.w	r8, [sp, #24]
 8005336:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800533a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800533e:	4b9c      	ldr	r3, [pc, #624]	@ (80055b0 <_printf_float+0x2c8>)
 8005340:	f04f 32ff 	mov.w	r2, #4294967295
 8005344:	f7fb fbf2 	bl	8000b2c <__aeabi_dcmpun>
 8005348:	bb70      	cbnz	r0, 80053a8 <_printf_float+0xc0>
 800534a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800534e:	4b98      	ldr	r3, [pc, #608]	@ (80055b0 <_printf_float+0x2c8>)
 8005350:	f04f 32ff 	mov.w	r2, #4294967295
 8005354:	f7fb fbcc 	bl	8000af0 <__aeabi_dcmple>
 8005358:	bb30      	cbnz	r0, 80053a8 <_printf_float+0xc0>
 800535a:	2200      	movs	r2, #0
 800535c:	2300      	movs	r3, #0
 800535e:	4640      	mov	r0, r8
 8005360:	4649      	mov	r1, r9
 8005362:	f7fb fbbb 	bl	8000adc <__aeabi_dcmplt>
 8005366:	b110      	cbz	r0, 800536e <_printf_float+0x86>
 8005368:	232d      	movs	r3, #45	@ 0x2d
 800536a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800536e:	4a91      	ldr	r2, [pc, #580]	@ (80055b4 <_printf_float+0x2cc>)
 8005370:	4b91      	ldr	r3, [pc, #580]	@ (80055b8 <_printf_float+0x2d0>)
 8005372:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005376:	bf8c      	ite	hi
 8005378:	4690      	movhi	r8, r2
 800537a:	4698      	movls	r8, r3
 800537c:	2303      	movs	r3, #3
 800537e:	6123      	str	r3, [r4, #16]
 8005380:	f02b 0304 	bic.w	r3, fp, #4
 8005384:	6023      	str	r3, [r4, #0]
 8005386:	f04f 0900 	mov.w	r9, #0
 800538a:	9700      	str	r7, [sp, #0]
 800538c:	4633      	mov	r3, r6
 800538e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005390:	4621      	mov	r1, r4
 8005392:	4628      	mov	r0, r5
 8005394:	f000 f9d2 	bl	800573c <_printf_common>
 8005398:	3001      	adds	r0, #1
 800539a:	f040 808d 	bne.w	80054b8 <_printf_float+0x1d0>
 800539e:	f04f 30ff 	mov.w	r0, #4294967295
 80053a2:	b00d      	add	sp, #52	@ 0x34
 80053a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a8:	4642      	mov	r2, r8
 80053aa:	464b      	mov	r3, r9
 80053ac:	4640      	mov	r0, r8
 80053ae:	4649      	mov	r1, r9
 80053b0:	f7fb fbbc 	bl	8000b2c <__aeabi_dcmpun>
 80053b4:	b140      	cbz	r0, 80053c8 <_printf_float+0xe0>
 80053b6:	464b      	mov	r3, r9
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bfbc      	itt	lt
 80053bc:	232d      	movlt	r3, #45	@ 0x2d
 80053be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80053c2:	4a7e      	ldr	r2, [pc, #504]	@ (80055bc <_printf_float+0x2d4>)
 80053c4:	4b7e      	ldr	r3, [pc, #504]	@ (80055c0 <_printf_float+0x2d8>)
 80053c6:	e7d4      	b.n	8005372 <_printf_float+0x8a>
 80053c8:	6863      	ldr	r3, [r4, #4]
 80053ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80053ce:	9206      	str	r2, [sp, #24]
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	d13b      	bne.n	800544c <_printf_float+0x164>
 80053d4:	2306      	movs	r3, #6
 80053d6:	6063      	str	r3, [r4, #4]
 80053d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80053dc:	2300      	movs	r3, #0
 80053de:	6022      	str	r2, [r4, #0]
 80053e0:	9303      	str	r3, [sp, #12]
 80053e2:	ab0a      	add	r3, sp, #40	@ 0x28
 80053e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80053e8:	ab09      	add	r3, sp, #36	@ 0x24
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	6861      	ldr	r1, [r4, #4]
 80053ee:	ec49 8b10 	vmov	d0, r8, r9
 80053f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80053f6:	4628      	mov	r0, r5
 80053f8:	f7ff fed6 	bl	80051a8 <__cvt>
 80053fc:	9b06      	ldr	r3, [sp, #24]
 80053fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005400:	2b47      	cmp	r3, #71	@ 0x47
 8005402:	4680      	mov	r8, r0
 8005404:	d129      	bne.n	800545a <_printf_float+0x172>
 8005406:	1cc8      	adds	r0, r1, #3
 8005408:	db02      	blt.n	8005410 <_printf_float+0x128>
 800540a:	6863      	ldr	r3, [r4, #4]
 800540c:	4299      	cmp	r1, r3
 800540e:	dd41      	ble.n	8005494 <_printf_float+0x1ac>
 8005410:	f1aa 0a02 	sub.w	sl, sl, #2
 8005414:	fa5f fa8a 	uxtb.w	sl, sl
 8005418:	3901      	subs	r1, #1
 800541a:	4652      	mov	r2, sl
 800541c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005420:	9109      	str	r1, [sp, #36]	@ 0x24
 8005422:	f7ff ff26 	bl	8005272 <__exponent>
 8005426:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005428:	1813      	adds	r3, r2, r0
 800542a:	2a01      	cmp	r2, #1
 800542c:	4681      	mov	r9, r0
 800542e:	6123      	str	r3, [r4, #16]
 8005430:	dc02      	bgt.n	8005438 <_printf_float+0x150>
 8005432:	6822      	ldr	r2, [r4, #0]
 8005434:	07d2      	lsls	r2, r2, #31
 8005436:	d501      	bpl.n	800543c <_printf_float+0x154>
 8005438:	3301      	adds	r3, #1
 800543a:	6123      	str	r3, [r4, #16]
 800543c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0a2      	beq.n	800538a <_printf_float+0xa2>
 8005444:	232d      	movs	r3, #45	@ 0x2d
 8005446:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800544a:	e79e      	b.n	800538a <_printf_float+0xa2>
 800544c:	9a06      	ldr	r2, [sp, #24]
 800544e:	2a47      	cmp	r2, #71	@ 0x47
 8005450:	d1c2      	bne.n	80053d8 <_printf_float+0xf0>
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1c0      	bne.n	80053d8 <_printf_float+0xf0>
 8005456:	2301      	movs	r3, #1
 8005458:	e7bd      	b.n	80053d6 <_printf_float+0xee>
 800545a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800545e:	d9db      	bls.n	8005418 <_printf_float+0x130>
 8005460:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005464:	d118      	bne.n	8005498 <_printf_float+0x1b0>
 8005466:	2900      	cmp	r1, #0
 8005468:	6863      	ldr	r3, [r4, #4]
 800546a:	dd0b      	ble.n	8005484 <_printf_float+0x19c>
 800546c:	6121      	str	r1, [r4, #16]
 800546e:	b913      	cbnz	r3, 8005476 <_printf_float+0x18e>
 8005470:	6822      	ldr	r2, [r4, #0]
 8005472:	07d0      	lsls	r0, r2, #31
 8005474:	d502      	bpl.n	800547c <_printf_float+0x194>
 8005476:	3301      	adds	r3, #1
 8005478:	440b      	add	r3, r1
 800547a:	6123      	str	r3, [r4, #16]
 800547c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800547e:	f04f 0900 	mov.w	r9, #0
 8005482:	e7db      	b.n	800543c <_printf_float+0x154>
 8005484:	b913      	cbnz	r3, 800548c <_printf_float+0x1a4>
 8005486:	6822      	ldr	r2, [r4, #0]
 8005488:	07d2      	lsls	r2, r2, #31
 800548a:	d501      	bpl.n	8005490 <_printf_float+0x1a8>
 800548c:	3302      	adds	r3, #2
 800548e:	e7f4      	b.n	800547a <_printf_float+0x192>
 8005490:	2301      	movs	r3, #1
 8005492:	e7f2      	b.n	800547a <_printf_float+0x192>
 8005494:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800549a:	4299      	cmp	r1, r3
 800549c:	db05      	blt.n	80054aa <_printf_float+0x1c2>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	6121      	str	r1, [r4, #16]
 80054a2:	07d8      	lsls	r0, r3, #31
 80054a4:	d5ea      	bpl.n	800547c <_printf_float+0x194>
 80054a6:	1c4b      	adds	r3, r1, #1
 80054a8:	e7e7      	b.n	800547a <_printf_float+0x192>
 80054aa:	2900      	cmp	r1, #0
 80054ac:	bfd4      	ite	le
 80054ae:	f1c1 0202 	rsble	r2, r1, #2
 80054b2:	2201      	movgt	r2, #1
 80054b4:	4413      	add	r3, r2
 80054b6:	e7e0      	b.n	800547a <_printf_float+0x192>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	055a      	lsls	r2, r3, #21
 80054bc:	d407      	bmi.n	80054ce <_printf_float+0x1e6>
 80054be:	6923      	ldr	r3, [r4, #16]
 80054c0:	4642      	mov	r2, r8
 80054c2:	4631      	mov	r1, r6
 80054c4:	4628      	mov	r0, r5
 80054c6:	47b8      	blx	r7
 80054c8:	3001      	adds	r0, #1
 80054ca:	d12b      	bne.n	8005524 <_printf_float+0x23c>
 80054cc:	e767      	b.n	800539e <_printf_float+0xb6>
 80054ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80054d2:	f240 80dd 	bls.w	8005690 <_printf_float+0x3a8>
 80054d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80054da:	2200      	movs	r2, #0
 80054dc:	2300      	movs	r3, #0
 80054de:	f7fb faf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d033      	beq.n	800554e <_printf_float+0x266>
 80054e6:	4a37      	ldr	r2, [pc, #220]	@ (80055c4 <_printf_float+0x2dc>)
 80054e8:	2301      	movs	r3, #1
 80054ea:	4631      	mov	r1, r6
 80054ec:	4628      	mov	r0, r5
 80054ee:	47b8      	blx	r7
 80054f0:	3001      	adds	r0, #1
 80054f2:	f43f af54 	beq.w	800539e <_printf_float+0xb6>
 80054f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80054fa:	4543      	cmp	r3, r8
 80054fc:	db02      	blt.n	8005504 <_printf_float+0x21c>
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	07d8      	lsls	r0, r3, #31
 8005502:	d50f      	bpl.n	8005524 <_printf_float+0x23c>
 8005504:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005508:	4631      	mov	r1, r6
 800550a:	4628      	mov	r0, r5
 800550c:	47b8      	blx	r7
 800550e:	3001      	adds	r0, #1
 8005510:	f43f af45 	beq.w	800539e <_printf_float+0xb6>
 8005514:	f04f 0900 	mov.w	r9, #0
 8005518:	f108 38ff 	add.w	r8, r8, #4294967295
 800551c:	f104 0a1a 	add.w	sl, r4, #26
 8005520:	45c8      	cmp	r8, r9
 8005522:	dc09      	bgt.n	8005538 <_printf_float+0x250>
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	079b      	lsls	r3, r3, #30
 8005528:	f100 8103 	bmi.w	8005732 <_printf_float+0x44a>
 800552c:	68e0      	ldr	r0, [r4, #12]
 800552e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005530:	4298      	cmp	r0, r3
 8005532:	bfb8      	it	lt
 8005534:	4618      	movlt	r0, r3
 8005536:	e734      	b.n	80053a2 <_printf_float+0xba>
 8005538:	2301      	movs	r3, #1
 800553a:	4652      	mov	r2, sl
 800553c:	4631      	mov	r1, r6
 800553e:	4628      	mov	r0, r5
 8005540:	47b8      	blx	r7
 8005542:	3001      	adds	r0, #1
 8005544:	f43f af2b 	beq.w	800539e <_printf_float+0xb6>
 8005548:	f109 0901 	add.w	r9, r9, #1
 800554c:	e7e8      	b.n	8005520 <_printf_float+0x238>
 800554e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005550:	2b00      	cmp	r3, #0
 8005552:	dc39      	bgt.n	80055c8 <_printf_float+0x2e0>
 8005554:	4a1b      	ldr	r2, [pc, #108]	@ (80055c4 <_printf_float+0x2dc>)
 8005556:	2301      	movs	r3, #1
 8005558:	4631      	mov	r1, r6
 800555a:	4628      	mov	r0, r5
 800555c:	47b8      	blx	r7
 800555e:	3001      	adds	r0, #1
 8005560:	f43f af1d 	beq.w	800539e <_printf_float+0xb6>
 8005564:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005568:	ea59 0303 	orrs.w	r3, r9, r3
 800556c:	d102      	bne.n	8005574 <_printf_float+0x28c>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	07d9      	lsls	r1, r3, #31
 8005572:	d5d7      	bpl.n	8005524 <_printf_float+0x23c>
 8005574:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005578:	4631      	mov	r1, r6
 800557a:	4628      	mov	r0, r5
 800557c:	47b8      	blx	r7
 800557e:	3001      	adds	r0, #1
 8005580:	f43f af0d 	beq.w	800539e <_printf_float+0xb6>
 8005584:	f04f 0a00 	mov.w	sl, #0
 8005588:	f104 0b1a 	add.w	fp, r4, #26
 800558c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800558e:	425b      	negs	r3, r3
 8005590:	4553      	cmp	r3, sl
 8005592:	dc01      	bgt.n	8005598 <_printf_float+0x2b0>
 8005594:	464b      	mov	r3, r9
 8005596:	e793      	b.n	80054c0 <_printf_float+0x1d8>
 8005598:	2301      	movs	r3, #1
 800559a:	465a      	mov	r2, fp
 800559c:	4631      	mov	r1, r6
 800559e:	4628      	mov	r0, r5
 80055a0:	47b8      	blx	r7
 80055a2:	3001      	adds	r0, #1
 80055a4:	f43f aefb 	beq.w	800539e <_printf_float+0xb6>
 80055a8:	f10a 0a01 	add.w	sl, sl, #1
 80055ac:	e7ee      	b.n	800558c <_printf_float+0x2a4>
 80055ae:	bf00      	nop
 80055b0:	7fefffff 	.word	0x7fefffff
 80055b4:	08008559 	.word	0x08008559
 80055b8:	08008555 	.word	0x08008555
 80055bc:	08008561 	.word	0x08008561
 80055c0:	0800855d 	.word	0x0800855d
 80055c4:	08008565 	.word	0x08008565
 80055c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80055ce:	4553      	cmp	r3, sl
 80055d0:	bfa8      	it	ge
 80055d2:	4653      	movge	r3, sl
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	4699      	mov	r9, r3
 80055d8:	dc36      	bgt.n	8005648 <_printf_float+0x360>
 80055da:	f04f 0b00 	mov.w	fp, #0
 80055de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055e2:	f104 021a 	add.w	r2, r4, #26
 80055e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055e8:	9306      	str	r3, [sp, #24]
 80055ea:	eba3 0309 	sub.w	r3, r3, r9
 80055ee:	455b      	cmp	r3, fp
 80055f0:	dc31      	bgt.n	8005656 <_printf_float+0x36e>
 80055f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055f4:	459a      	cmp	sl, r3
 80055f6:	dc3a      	bgt.n	800566e <_printf_float+0x386>
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	07da      	lsls	r2, r3, #31
 80055fc:	d437      	bmi.n	800566e <_printf_float+0x386>
 80055fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005600:	ebaa 0903 	sub.w	r9, sl, r3
 8005604:	9b06      	ldr	r3, [sp, #24]
 8005606:	ebaa 0303 	sub.w	r3, sl, r3
 800560a:	4599      	cmp	r9, r3
 800560c:	bfa8      	it	ge
 800560e:	4699      	movge	r9, r3
 8005610:	f1b9 0f00 	cmp.w	r9, #0
 8005614:	dc33      	bgt.n	800567e <_printf_float+0x396>
 8005616:	f04f 0800 	mov.w	r8, #0
 800561a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800561e:	f104 0b1a 	add.w	fp, r4, #26
 8005622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005624:	ebaa 0303 	sub.w	r3, sl, r3
 8005628:	eba3 0309 	sub.w	r3, r3, r9
 800562c:	4543      	cmp	r3, r8
 800562e:	f77f af79 	ble.w	8005524 <_printf_float+0x23c>
 8005632:	2301      	movs	r3, #1
 8005634:	465a      	mov	r2, fp
 8005636:	4631      	mov	r1, r6
 8005638:	4628      	mov	r0, r5
 800563a:	47b8      	blx	r7
 800563c:	3001      	adds	r0, #1
 800563e:	f43f aeae 	beq.w	800539e <_printf_float+0xb6>
 8005642:	f108 0801 	add.w	r8, r8, #1
 8005646:	e7ec      	b.n	8005622 <_printf_float+0x33a>
 8005648:	4642      	mov	r2, r8
 800564a:	4631      	mov	r1, r6
 800564c:	4628      	mov	r0, r5
 800564e:	47b8      	blx	r7
 8005650:	3001      	adds	r0, #1
 8005652:	d1c2      	bne.n	80055da <_printf_float+0x2f2>
 8005654:	e6a3      	b.n	800539e <_printf_float+0xb6>
 8005656:	2301      	movs	r3, #1
 8005658:	4631      	mov	r1, r6
 800565a:	4628      	mov	r0, r5
 800565c:	9206      	str	r2, [sp, #24]
 800565e:	47b8      	blx	r7
 8005660:	3001      	adds	r0, #1
 8005662:	f43f ae9c 	beq.w	800539e <_printf_float+0xb6>
 8005666:	9a06      	ldr	r2, [sp, #24]
 8005668:	f10b 0b01 	add.w	fp, fp, #1
 800566c:	e7bb      	b.n	80055e6 <_printf_float+0x2fe>
 800566e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005672:	4631      	mov	r1, r6
 8005674:	4628      	mov	r0, r5
 8005676:	47b8      	blx	r7
 8005678:	3001      	adds	r0, #1
 800567a:	d1c0      	bne.n	80055fe <_printf_float+0x316>
 800567c:	e68f      	b.n	800539e <_printf_float+0xb6>
 800567e:	9a06      	ldr	r2, [sp, #24]
 8005680:	464b      	mov	r3, r9
 8005682:	4442      	add	r2, r8
 8005684:	4631      	mov	r1, r6
 8005686:	4628      	mov	r0, r5
 8005688:	47b8      	blx	r7
 800568a:	3001      	adds	r0, #1
 800568c:	d1c3      	bne.n	8005616 <_printf_float+0x32e>
 800568e:	e686      	b.n	800539e <_printf_float+0xb6>
 8005690:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005694:	f1ba 0f01 	cmp.w	sl, #1
 8005698:	dc01      	bgt.n	800569e <_printf_float+0x3b6>
 800569a:	07db      	lsls	r3, r3, #31
 800569c:	d536      	bpl.n	800570c <_printf_float+0x424>
 800569e:	2301      	movs	r3, #1
 80056a0:	4642      	mov	r2, r8
 80056a2:	4631      	mov	r1, r6
 80056a4:	4628      	mov	r0, r5
 80056a6:	47b8      	blx	r7
 80056a8:	3001      	adds	r0, #1
 80056aa:	f43f ae78 	beq.w	800539e <_printf_float+0xb6>
 80056ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056b2:	4631      	mov	r1, r6
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b8      	blx	r7
 80056b8:	3001      	adds	r0, #1
 80056ba:	f43f ae70 	beq.w	800539e <_printf_float+0xb6>
 80056be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056c2:	2200      	movs	r2, #0
 80056c4:	2300      	movs	r3, #0
 80056c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056ca:	f7fb f9fd 	bl	8000ac8 <__aeabi_dcmpeq>
 80056ce:	b9c0      	cbnz	r0, 8005702 <_printf_float+0x41a>
 80056d0:	4653      	mov	r3, sl
 80056d2:	f108 0201 	add.w	r2, r8, #1
 80056d6:	4631      	mov	r1, r6
 80056d8:	4628      	mov	r0, r5
 80056da:	47b8      	blx	r7
 80056dc:	3001      	adds	r0, #1
 80056de:	d10c      	bne.n	80056fa <_printf_float+0x412>
 80056e0:	e65d      	b.n	800539e <_printf_float+0xb6>
 80056e2:	2301      	movs	r3, #1
 80056e4:	465a      	mov	r2, fp
 80056e6:	4631      	mov	r1, r6
 80056e8:	4628      	mov	r0, r5
 80056ea:	47b8      	blx	r7
 80056ec:	3001      	adds	r0, #1
 80056ee:	f43f ae56 	beq.w	800539e <_printf_float+0xb6>
 80056f2:	f108 0801 	add.w	r8, r8, #1
 80056f6:	45d0      	cmp	r8, sl
 80056f8:	dbf3      	blt.n	80056e2 <_printf_float+0x3fa>
 80056fa:	464b      	mov	r3, r9
 80056fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005700:	e6df      	b.n	80054c2 <_printf_float+0x1da>
 8005702:	f04f 0800 	mov.w	r8, #0
 8005706:	f104 0b1a 	add.w	fp, r4, #26
 800570a:	e7f4      	b.n	80056f6 <_printf_float+0x40e>
 800570c:	2301      	movs	r3, #1
 800570e:	4642      	mov	r2, r8
 8005710:	e7e1      	b.n	80056d6 <_printf_float+0x3ee>
 8005712:	2301      	movs	r3, #1
 8005714:	464a      	mov	r2, r9
 8005716:	4631      	mov	r1, r6
 8005718:	4628      	mov	r0, r5
 800571a:	47b8      	blx	r7
 800571c:	3001      	adds	r0, #1
 800571e:	f43f ae3e 	beq.w	800539e <_printf_float+0xb6>
 8005722:	f108 0801 	add.w	r8, r8, #1
 8005726:	68e3      	ldr	r3, [r4, #12]
 8005728:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800572a:	1a5b      	subs	r3, r3, r1
 800572c:	4543      	cmp	r3, r8
 800572e:	dcf0      	bgt.n	8005712 <_printf_float+0x42a>
 8005730:	e6fc      	b.n	800552c <_printf_float+0x244>
 8005732:	f04f 0800 	mov.w	r8, #0
 8005736:	f104 0919 	add.w	r9, r4, #25
 800573a:	e7f4      	b.n	8005726 <_printf_float+0x43e>

0800573c <_printf_common>:
 800573c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005740:	4616      	mov	r6, r2
 8005742:	4698      	mov	r8, r3
 8005744:	688a      	ldr	r2, [r1, #8]
 8005746:	690b      	ldr	r3, [r1, #16]
 8005748:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800574c:	4293      	cmp	r3, r2
 800574e:	bfb8      	it	lt
 8005750:	4613      	movlt	r3, r2
 8005752:	6033      	str	r3, [r6, #0]
 8005754:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005758:	4607      	mov	r7, r0
 800575a:	460c      	mov	r4, r1
 800575c:	b10a      	cbz	r2, 8005762 <_printf_common+0x26>
 800575e:	3301      	adds	r3, #1
 8005760:	6033      	str	r3, [r6, #0]
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	0699      	lsls	r1, r3, #26
 8005766:	bf42      	ittt	mi
 8005768:	6833      	ldrmi	r3, [r6, #0]
 800576a:	3302      	addmi	r3, #2
 800576c:	6033      	strmi	r3, [r6, #0]
 800576e:	6825      	ldr	r5, [r4, #0]
 8005770:	f015 0506 	ands.w	r5, r5, #6
 8005774:	d106      	bne.n	8005784 <_printf_common+0x48>
 8005776:	f104 0a19 	add.w	sl, r4, #25
 800577a:	68e3      	ldr	r3, [r4, #12]
 800577c:	6832      	ldr	r2, [r6, #0]
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	42ab      	cmp	r3, r5
 8005782:	dc26      	bgt.n	80057d2 <_printf_common+0x96>
 8005784:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005788:	6822      	ldr	r2, [r4, #0]
 800578a:	3b00      	subs	r3, #0
 800578c:	bf18      	it	ne
 800578e:	2301      	movne	r3, #1
 8005790:	0692      	lsls	r2, r2, #26
 8005792:	d42b      	bmi.n	80057ec <_printf_common+0xb0>
 8005794:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005798:	4641      	mov	r1, r8
 800579a:	4638      	mov	r0, r7
 800579c:	47c8      	blx	r9
 800579e:	3001      	adds	r0, #1
 80057a0:	d01e      	beq.n	80057e0 <_printf_common+0xa4>
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	6922      	ldr	r2, [r4, #16]
 80057a6:	f003 0306 	and.w	r3, r3, #6
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	bf02      	ittt	eq
 80057ae:	68e5      	ldreq	r5, [r4, #12]
 80057b0:	6833      	ldreq	r3, [r6, #0]
 80057b2:	1aed      	subeq	r5, r5, r3
 80057b4:	68a3      	ldr	r3, [r4, #8]
 80057b6:	bf0c      	ite	eq
 80057b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057bc:	2500      	movne	r5, #0
 80057be:	4293      	cmp	r3, r2
 80057c0:	bfc4      	itt	gt
 80057c2:	1a9b      	subgt	r3, r3, r2
 80057c4:	18ed      	addgt	r5, r5, r3
 80057c6:	2600      	movs	r6, #0
 80057c8:	341a      	adds	r4, #26
 80057ca:	42b5      	cmp	r5, r6
 80057cc:	d11a      	bne.n	8005804 <_printf_common+0xc8>
 80057ce:	2000      	movs	r0, #0
 80057d0:	e008      	b.n	80057e4 <_printf_common+0xa8>
 80057d2:	2301      	movs	r3, #1
 80057d4:	4652      	mov	r2, sl
 80057d6:	4641      	mov	r1, r8
 80057d8:	4638      	mov	r0, r7
 80057da:	47c8      	blx	r9
 80057dc:	3001      	adds	r0, #1
 80057de:	d103      	bne.n	80057e8 <_printf_common+0xac>
 80057e0:	f04f 30ff 	mov.w	r0, #4294967295
 80057e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e8:	3501      	adds	r5, #1
 80057ea:	e7c6      	b.n	800577a <_printf_common+0x3e>
 80057ec:	18e1      	adds	r1, r4, r3
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	2030      	movs	r0, #48	@ 0x30
 80057f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80057f6:	4422      	add	r2, r4
 80057f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80057fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005800:	3302      	adds	r3, #2
 8005802:	e7c7      	b.n	8005794 <_printf_common+0x58>
 8005804:	2301      	movs	r3, #1
 8005806:	4622      	mov	r2, r4
 8005808:	4641      	mov	r1, r8
 800580a:	4638      	mov	r0, r7
 800580c:	47c8      	blx	r9
 800580e:	3001      	adds	r0, #1
 8005810:	d0e6      	beq.n	80057e0 <_printf_common+0xa4>
 8005812:	3601      	adds	r6, #1
 8005814:	e7d9      	b.n	80057ca <_printf_common+0x8e>
	...

08005818 <_printf_i>:
 8005818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800581c:	7e0f      	ldrb	r7, [r1, #24]
 800581e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005820:	2f78      	cmp	r7, #120	@ 0x78
 8005822:	4691      	mov	r9, r2
 8005824:	4680      	mov	r8, r0
 8005826:	460c      	mov	r4, r1
 8005828:	469a      	mov	sl, r3
 800582a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800582e:	d807      	bhi.n	8005840 <_printf_i+0x28>
 8005830:	2f62      	cmp	r7, #98	@ 0x62
 8005832:	d80a      	bhi.n	800584a <_printf_i+0x32>
 8005834:	2f00      	cmp	r7, #0
 8005836:	f000 80d1 	beq.w	80059dc <_printf_i+0x1c4>
 800583a:	2f58      	cmp	r7, #88	@ 0x58
 800583c:	f000 80b8 	beq.w	80059b0 <_printf_i+0x198>
 8005840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005844:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005848:	e03a      	b.n	80058c0 <_printf_i+0xa8>
 800584a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800584e:	2b15      	cmp	r3, #21
 8005850:	d8f6      	bhi.n	8005840 <_printf_i+0x28>
 8005852:	a101      	add	r1, pc, #4	@ (adr r1, 8005858 <_printf_i+0x40>)
 8005854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005858:	080058b1 	.word	0x080058b1
 800585c:	080058c5 	.word	0x080058c5
 8005860:	08005841 	.word	0x08005841
 8005864:	08005841 	.word	0x08005841
 8005868:	08005841 	.word	0x08005841
 800586c:	08005841 	.word	0x08005841
 8005870:	080058c5 	.word	0x080058c5
 8005874:	08005841 	.word	0x08005841
 8005878:	08005841 	.word	0x08005841
 800587c:	08005841 	.word	0x08005841
 8005880:	08005841 	.word	0x08005841
 8005884:	080059c3 	.word	0x080059c3
 8005888:	080058ef 	.word	0x080058ef
 800588c:	0800597d 	.word	0x0800597d
 8005890:	08005841 	.word	0x08005841
 8005894:	08005841 	.word	0x08005841
 8005898:	080059e5 	.word	0x080059e5
 800589c:	08005841 	.word	0x08005841
 80058a0:	080058ef 	.word	0x080058ef
 80058a4:	08005841 	.word	0x08005841
 80058a8:	08005841 	.word	0x08005841
 80058ac:	08005985 	.word	0x08005985
 80058b0:	6833      	ldr	r3, [r6, #0]
 80058b2:	1d1a      	adds	r2, r3, #4
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6032      	str	r2, [r6, #0]
 80058b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058c0:	2301      	movs	r3, #1
 80058c2:	e09c      	b.n	80059fe <_printf_i+0x1e6>
 80058c4:	6833      	ldr	r3, [r6, #0]
 80058c6:	6820      	ldr	r0, [r4, #0]
 80058c8:	1d19      	adds	r1, r3, #4
 80058ca:	6031      	str	r1, [r6, #0]
 80058cc:	0606      	lsls	r6, r0, #24
 80058ce:	d501      	bpl.n	80058d4 <_printf_i+0xbc>
 80058d0:	681d      	ldr	r5, [r3, #0]
 80058d2:	e003      	b.n	80058dc <_printf_i+0xc4>
 80058d4:	0645      	lsls	r5, r0, #25
 80058d6:	d5fb      	bpl.n	80058d0 <_printf_i+0xb8>
 80058d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058dc:	2d00      	cmp	r5, #0
 80058de:	da03      	bge.n	80058e8 <_printf_i+0xd0>
 80058e0:	232d      	movs	r3, #45	@ 0x2d
 80058e2:	426d      	negs	r5, r5
 80058e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058e8:	4858      	ldr	r0, [pc, #352]	@ (8005a4c <_printf_i+0x234>)
 80058ea:	230a      	movs	r3, #10
 80058ec:	e011      	b.n	8005912 <_printf_i+0xfa>
 80058ee:	6821      	ldr	r1, [r4, #0]
 80058f0:	6833      	ldr	r3, [r6, #0]
 80058f2:	0608      	lsls	r0, r1, #24
 80058f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80058f8:	d402      	bmi.n	8005900 <_printf_i+0xe8>
 80058fa:	0649      	lsls	r1, r1, #25
 80058fc:	bf48      	it	mi
 80058fe:	b2ad      	uxthmi	r5, r5
 8005900:	2f6f      	cmp	r7, #111	@ 0x6f
 8005902:	4852      	ldr	r0, [pc, #328]	@ (8005a4c <_printf_i+0x234>)
 8005904:	6033      	str	r3, [r6, #0]
 8005906:	bf14      	ite	ne
 8005908:	230a      	movne	r3, #10
 800590a:	2308      	moveq	r3, #8
 800590c:	2100      	movs	r1, #0
 800590e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005912:	6866      	ldr	r6, [r4, #4]
 8005914:	60a6      	str	r6, [r4, #8]
 8005916:	2e00      	cmp	r6, #0
 8005918:	db05      	blt.n	8005926 <_printf_i+0x10e>
 800591a:	6821      	ldr	r1, [r4, #0]
 800591c:	432e      	orrs	r6, r5
 800591e:	f021 0104 	bic.w	r1, r1, #4
 8005922:	6021      	str	r1, [r4, #0]
 8005924:	d04b      	beq.n	80059be <_printf_i+0x1a6>
 8005926:	4616      	mov	r6, r2
 8005928:	fbb5 f1f3 	udiv	r1, r5, r3
 800592c:	fb03 5711 	mls	r7, r3, r1, r5
 8005930:	5dc7      	ldrb	r7, [r0, r7]
 8005932:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005936:	462f      	mov	r7, r5
 8005938:	42bb      	cmp	r3, r7
 800593a:	460d      	mov	r5, r1
 800593c:	d9f4      	bls.n	8005928 <_printf_i+0x110>
 800593e:	2b08      	cmp	r3, #8
 8005940:	d10b      	bne.n	800595a <_printf_i+0x142>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	07df      	lsls	r7, r3, #31
 8005946:	d508      	bpl.n	800595a <_printf_i+0x142>
 8005948:	6923      	ldr	r3, [r4, #16]
 800594a:	6861      	ldr	r1, [r4, #4]
 800594c:	4299      	cmp	r1, r3
 800594e:	bfde      	ittt	le
 8005950:	2330      	movle	r3, #48	@ 0x30
 8005952:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005956:	f106 36ff 	addle.w	r6, r6, #4294967295
 800595a:	1b92      	subs	r2, r2, r6
 800595c:	6122      	str	r2, [r4, #16]
 800595e:	f8cd a000 	str.w	sl, [sp]
 8005962:	464b      	mov	r3, r9
 8005964:	aa03      	add	r2, sp, #12
 8005966:	4621      	mov	r1, r4
 8005968:	4640      	mov	r0, r8
 800596a:	f7ff fee7 	bl	800573c <_printf_common>
 800596e:	3001      	adds	r0, #1
 8005970:	d14a      	bne.n	8005a08 <_printf_i+0x1f0>
 8005972:	f04f 30ff 	mov.w	r0, #4294967295
 8005976:	b004      	add	sp, #16
 8005978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	f043 0320 	orr.w	r3, r3, #32
 8005982:	6023      	str	r3, [r4, #0]
 8005984:	4832      	ldr	r0, [pc, #200]	@ (8005a50 <_printf_i+0x238>)
 8005986:	2778      	movs	r7, #120	@ 0x78
 8005988:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	6831      	ldr	r1, [r6, #0]
 8005990:	061f      	lsls	r7, r3, #24
 8005992:	f851 5b04 	ldr.w	r5, [r1], #4
 8005996:	d402      	bmi.n	800599e <_printf_i+0x186>
 8005998:	065f      	lsls	r7, r3, #25
 800599a:	bf48      	it	mi
 800599c:	b2ad      	uxthmi	r5, r5
 800599e:	6031      	str	r1, [r6, #0]
 80059a0:	07d9      	lsls	r1, r3, #31
 80059a2:	bf44      	itt	mi
 80059a4:	f043 0320 	orrmi.w	r3, r3, #32
 80059a8:	6023      	strmi	r3, [r4, #0]
 80059aa:	b11d      	cbz	r5, 80059b4 <_printf_i+0x19c>
 80059ac:	2310      	movs	r3, #16
 80059ae:	e7ad      	b.n	800590c <_printf_i+0xf4>
 80059b0:	4826      	ldr	r0, [pc, #152]	@ (8005a4c <_printf_i+0x234>)
 80059b2:	e7e9      	b.n	8005988 <_printf_i+0x170>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	f023 0320 	bic.w	r3, r3, #32
 80059ba:	6023      	str	r3, [r4, #0]
 80059bc:	e7f6      	b.n	80059ac <_printf_i+0x194>
 80059be:	4616      	mov	r6, r2
 80059c0:	e7bd      	b.n	800593e <_printf_i+0x126>
 80059c2:	6833      	ldr	r3, [r6, #0]
 80059c4:	6825      	ldr	r5, [r4, #0]
 80059c6:	6961      	ldr	r1, [r4, #20]
 80059c8:	1d18      	adds	r0, r3, #4
 80059ca:	6030      	str	r0, [r6, #0]
 80059cc:	062e      	lsls	r6, r5, #24
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	d501      	bpl.n	80059d6 <_printf_i+0x1be>
 80059d2:	6019      	str	r1, [r3, #0]
 80059d4:	e002      	b.n	80059dc <_printf_i+0x1c4>
 80059d6:	0668      	lsls	r0, r5, #25
 80059d8:	d5fb      	bpl.n	80059d2 <_printf_i+0x1ba>
 80059da:	8019      	strh	r1, [r3, #0]
 80059dc:	2300      	movs	r3, #0
 80059de:	6123      	str	r3, [r4, #16]
 80059e0:	4616      	mov	r6, r2
 80059e2:	e7bc      	b.n	800595e <_printf_i+0x146>
 80059e4:	6833      	ldr	r3, [r6, #0]
 80059e6:	1d1a      	adds	r2, r3, #4
 80059e8:	6032      	str	r2, [r6, #0]
 80059ea:	681e      	ldr	r6, [r3, #0]
 80059ec:	6862      	ldr	r2, [r4, #4]
 80059ee:	2100      	movs	r1, #0
 80059f0:	4630      	mov	r0, r6
 80059f2:	f7fa fbed 	bl	80001d0 <memchr>
 80059f6:	b108      	cbz	r0, 80059fc <_printf_i+0x1e4>
 80059f8:	1b80      	subs	r0, r0, r6
 80059fa:	6060      	str	r0, [r4, #4]
 80059fc:	6863      	ldr	r3, [r4, #4]
 80059fe:	6123      	str	r3, [r4, #16]
 8005a00:	2300      	movs	r3, #0
 8005a02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a06:	e7aa      	b.n	800595e <_printf_i+0x146>
 8005a08:	6923      	ldr	r3, [r4, #16]
 8005a0a:	4632      	mov	r2, r6
 8005a0c:	4649      	mov	r1, r9
 8005a0e:	4640      	mov	r0, r8
 8005a10:	47d0      	blx	sl
 8005a12:	3001      	adds	r0, #1
 8005a14:	d0ad      	beq.n	8005972 <_printf_i+0x15a>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	079b      	lsls	r3, r3, #30
 8005a1a:	d413      	bmi.n	8005a44 <_printf_i+0x22c>
 8005a1c:	68e0      	ldr	r0, [r4, #12]
 8005a1e:	9b03      	ldr	r3, [sp, #12]
 8005a20:	4298      	cmp	r0, r3
 8005a22:	bfb8      	it	lt
 8005a24:	4618      	movlt	r0, r3
 8005a26:	e7a6      	b.n	8005976 <_printf_i+0x15e>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	4632      	mov	r2, r6
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	4640      	mov	r0, r8
 8005a30:	47d0      	blx	sl
 8005a32:	3001      	adds	r0, #1
 8005a34:	d09d      	beq.n	8005972 <_printf_i+0x15a>
 8005a36:	3501      	adds	r5, #1
 8005a38:	68e3      	ldr	r3, [r4, #12]
 8005a3a:	9903      	ldr	r1, [sp, #12]
 8005a3c:	1a5b      	subs	r3, r3, r1
 8005a3e:	42ab      	cmp	r3, r5
 8005a40:	dcf2      	bgt.n	8005a28 <_printf_i+0x210>
 8005a42:	e7eb      	b.n	8005a1c <_printf_i+0x204>
 8005a44:	2500      	movs	r5, #0
 8005a46:	f104 0619 	add.w	r6, r4, #25
 8005a4a:	e7f5      	b.n	8005a38 <_printf_i+0x220>
 8005a4c:	08008567 	.word	0x08008567
 8005a50:	08008578 	.word	0x08008578

08005a54 <std>:
 8005a54:	2300      	movs	r3, #0
 8005a56:	b510      	push	{r4, lr}
 8005a58:	4604      	mov	r4, r0
 8005a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a62:	6083      	str	r3, [r0, #8]
 8005a64:	8181      	strh	r1, [r0, #12]
 8005a66:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a68:	81c2      	strh	r2, [r0, #14]
 8005a6a:	6183      	str	r3, [r0, #24]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	2208      	movs	r2, #8
 8005a70:	305c      	adds	r0, #92	@ 0x5c
 8005a72:	f000 f916 	bl	8005ca2 <memset>
 8005a76:	4b0d      	ldr	r3, [pc, #52]	@ (8005aac <std+0x58>)
 8005a78:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab0 <std+0x5c>)
 8005a7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab4 <std+0x60>)
 8005a80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a82:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <std+0x64>)
 8005a84:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <std+0x68>)
 8005a88:	6224      	str	r4, [r4, #32]
 8005a8a:	429c      	cmp	r4, r3
 8005a8c:	d006      	beq.n	8005a9c <std+0x48>
 8005a8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a92:	4294      	cmp	r4, r2
 8005a94:	d002      	beq.n	8005a9c <std+0x48>
 8005a96:	33d0      	adds	r3, #208	@ 0xd0
 8005a98:	429c      	cmp	r4, r3
 8005a9a:	d105      	bne.n	8005aa8 <std+0x54>
 8005a9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa4:	f000 b97a 	b.w	8005d9c <__retarget_lock_init_recursive>
 8005aa8:	bd10      	pop	{r4, pc}
 8005aaa:	bf00      	nop
 8005aac:	08005c1d 	.word	0x08005c1d
 8005ab0:	08005c3f 	.word	0x08005c3f
 8005ab4:	08005c77 	.word	0x08005c77
 8005ab8:	08005c9b 	.word	0x08005c9b
 8005abc:	2000076c 	.word	0x2000076c

08005ac0 <stdio_exit_handler>:
 8005ac0:	4a02      	ldr	r2, [pc, #8]	@ (8005acc <stdio_exit_handler+0xc>)
 8005ac2:	4903      	ldr	r1, [pc, #12]	@ (8005ad0 <stdio_exit_handler+0x10>)
 8005ac4:	4803      	ldr	r0, [pc, #12]	@ (8005ad4 <stdio_exit_handler+0x14>)
 8005ac6:	f000 b869 	b.w	8005b9c <_fwalk_sglue>
 8005aca:	bf00      	nop
 8005acc:	20000124 	.word	0x20000124
 8005ad0:	0800771d 	.word	0x0800771d
 8005ad4:	20000134 	.word	0x20000134

08005ad8 <cleanup_stdio>:
 8005ad8:	6841      	ldr	r1, [r0, #4]
 8005ada:	4b0c      	ldr	r3, [pc, #48]	@ (8005b0c <cleanup_stdio+0x34>)
 8005adc:	4299      	cmp	r1, r3
 8005ade:	b510      	push	{r4, lr}
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	d001      	beq.n	8005ae8 <cleanup_stdio+0x10>
 8005ae4:	f001 fe1a 	bl	800771c <_fflush_r>
 8005ae8:	68a1      	ldr	r1, [r4, #8]
 8005aea:	4b09      	ldr	r3, [pc, #36]	@ (8005b10 <cleanup_stdio+0x38>)
 8005aec:	4299      	cmp	r1, r3
 8005aee:	d002      	beq.n	8005af6 <cleanup_stdio+0x1e>
 8005af0:	4620      	mov	r0, r4
 8005af2:	f001 fe13 	bl	800771c <_fflush_r>
 8005af6:	68e1      	ldr	r1, [r4, #12]
 8005af8:	4b06      	ldr	r3, [pc, #24]	@ (8005b14 <cleanup_stdio+0x3c>)
 8005afa:	4299      	cmp	r1, r3
 8005afc:	d004      	beq.n	8005b08 <cleanup_stdio+0x30>
 8005afe:	4620      	mov	r0, r4
 8005b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b04:	f001 be0a 	b.w	800771c <_fflush_r>
 8005b08:	bd10      	pop	{r4, pc}
 8005b0a:	bf00      	nop
 8005b0c:	2000076c 	.word	0x2000076c
 8005b10:	200007d4 	.word	0x200007d4
 8005b14:	2000083c 	.word	0x2000083c

08005b18 <global_stdio_init.part.0>:
 8005b18:	b510      	push	{r4, lr}
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b48 <global_stdio_init.part.0+0x30>)
 8005b1c:	4c0b      	ldr	r4, [pc, #44]	@ (8005b4c <global_stdio_init.part.0+0x34>)
 8005b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8005b50 <global_stdio_init.part.0+0x38>)
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	4620      	mov	r0, r4
 8005b24:	2200      	movs	r2, #0
 8005b26:	2104      	movs	r1, #4
 8005b28:	f7ff ff94 	bl	8005a54 <std>
 8005b2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b30:	2201      	movs	r2, #1
 8005b32:	2109      	movs	r1, #9
 8005b34:	f7ff ff8e 	bl	8005a54 <std>
 8005b38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b42:	2112      	movs	r1, #18
 8005b44:	f7ff bf86 	b.w	8005a54 <std>
 8005b48:	200008a4 	.word	0x200008a4
 8005b4c:	2000076c 	.word	0x2000076c
 8005b50:	08005ac1 	.word	0x08005ac1

08005b54 <__sfp_lock_acquire>:
 8005b54:	4801      	ldr	r0, [pc, #4]	@ (8005b5c <__sfp_lock_acquire+0x8>)
 8005b56:	f000 b922 	b.w	8005d9e <__retarget_lock_acquire_recursive>
 8005b5a:	bf00      	nop
 8005b5c:	200008ad 	.word	0x200008ad

08005b60 <__sfp_lock_release>:
 8005b60:	4801      	ldr	r0, [pc, #4]	@ (8005b68 <__sfp_lock_release+0x8>)
 8005b62:	f000 b91d 	b.w	8005da0 <__retarget_lock_release_recursive>
 8005b66:	bf00      	nop
 8005b68:	200008ad 	.word	0x200008ad

08005b6c <__sinit>:
 8005b6c:	b510      	push	{r4, lr}
 8005b6e:	4604      	mov	r4, r0
 8005b70:	f7ff fff0 	bl	8005b54 <__sfp_lock_acquire>
 8005b74:	6a23      	ldr	r3, [r4, #32]
 8005b76:	b11b      	cbz	r3, 8005b80 <__sinit+0x14>
 8005b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b7c:	f7ff bff0 	b.w	8005b60 <__sfp_lock_release>
 8005b80:	4b04      	ldr	r3, [pc, #16]	@ (8005b94 <__sinit+0x28>)
 8005b82:	6223      	str	r3, [r4, #32]
 8005b84:	4b04      	ldr	r3, [pc, #16]	@ (8005b98 <__sinit+0x2c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1f5      	bne.n	8005b78 <__sinit+0xc>
 8005b8c:	f7ff ffc4 	bl	8005b18 <global_stdio_init.part.0>
 8005b90:	e7f2      	b.n	8005b78 <__sinit+0xc>
 8005b92:	bf00      	nop
 8005b94:	08005ad9 	.word	0x08005ad9
 8005b98:	200008a4 	.word	0x200008a4

08005b9c <_fwalk_sglue>:
 8005b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba0:	4607      	mov	r7, r0
 8005ba2:	4688      	mov	r8, r1
 8005ba4:	4614      	mov	r4, r2
 8005ba6:	2600      	movs	r6, #0
 8005ba8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bac:	f1b9 0901 	subs.w	r9, r9, #1
 8005bb0:	d505      	bpl.n	8005bbe <_fwalk_sglue+0x22>
 8005bb2:	6824      	ldr	r4, [r4, #0]
 8005bb4:	2c00      	cmp	r4, #0
 8005bb6:	d1f7      	bne.n	8005ba8 <_fwalk_sglue+0xc>
 8005bb8:	4630      	mov	r0, r6
 8005bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bbe:	89ab      	ldrh	r3, [r5, #12]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d907      	bls.n	8005bd4 <_fwalk_sglue+0x38>
 8005bc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	d003      	beq.n	8005bd4 <_fwalk_sglue+0x38>
 8005bcc:	4629      	mov	r1, r5
 8005bce:	4638      	mov	r0, r7
 8005bd0:	47c0      	blx	r8
 8005bd2:	4306      	orrs	r6, r0
 8005bd4:	3568      	adds	r5, #104	@ 0x68
 8005bd6:	e7e9      	b.n	8005bac <_fwalk_sglue+0x10>

08005bd8 <siprintf>:
 8005bd8:	b40e      	push	{r1, r2, r3}
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	b09d      	sub	sp, #116	@ 0x74
 8005bde:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005be0:	9002      	str	r0, [sp, #8]
 8005be2:	9006      	str	r0, [sp, #24]
 8005be4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005be8:	480a      	ldr	r0, [pc, #40]	@ (8005c14 <siprintf+0x3c>)
 8005bea:	9107      	str	r1, [sp, #28]
 8005bec:	9104      	str	r1, [sp, #16]
 8005bee:	490a      	ldr	r1, [pc, #40]	@ (8005c18 <siprintf+0x40>)
 8005bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bf4:	9105      	str	r1, [sp, #20]
 8005bf6:	2400      	movs	r4, #0
 8005bf8:	a902      	add	r1, sp, #8
 8005bfa:	6800      	ldr	r0, [r0, #0]
 8005bfc:	9301      	str	r3, [sp, #4]
 8005bfe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005c00:	f001 fc0c 	bl	800741c <_svfiprintf_r>
 8005c04:	9b02      	ldr	r3, [sp, #8]
 8005c06:	701c      	strb	r4, [r3, #0]
 8005c08:	b01d      	add	sp, #116	@ 0x74
 8005c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c0e:	b003      	add	sp, #12
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20000130 	.word	0x20000130
 8005c18:	ffff0208 	.word	0xffff0208

08005c1c <__sread>:
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	460c      	mov	r4, r1
 8005c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c24:	f000 f86c 	bl	8005d00 <_read_r>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	bfab      	itete	ge
 8005c2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8005c30:	181b      	addge	r3, r3, r0
 8005c32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c36:	bfac      	ite	ge
 8005c38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c3a:	81a3      	strhlt	r3, [r4, #12]
 8005c3c:	bd10      	pop	{r4, pc}

08005c3e <__swrite>:
 8005c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c42:	461f      	mov	r7, r3
 8005c44:	898b      	ldrh	r3, [r1, #12]
 8005c46:	05db      	lsls	r3, r3, #23
 8005c48:	4605      	mov	r5, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	4616      	mov	r6, r2
 8005c4e:	d505      	bpl.n	8005c5c <__swrite+0x1e>
 8005c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c54:	2302      	movs	r3, #2
 8005c56:	2200      	movs	r2, #0
 8005c58:	f000 f840 	bl	8005cdc <_lseek_r>
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c66:	81a3      	strh	r3, [r4, #12]
 8005c68:	4632      	mov	r2, r6
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c72:	f000 b857 	b.w	8005d24 <_write_r>

08005c76 <__sseek>:
 8005c76:	b510      	push	{r4, lr}
 8005c78:	460c      	mov	r4, r1
 8005c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7e:	f000 f82d 	bl	8005cdc <_lseek_r>
 8005c82:	1c43      	adds	r3, r0, #1
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	bf15      	itete	ne
 8005c88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c92:	81a3      	strheq	r3, [r4, #12]
 8005c94:	bf18      	it	ne
 8005c96:	81a3      	strhne	r3, [r4, #12]
 8005c98:	bd10      	pop	{r4, pc}

08005c9a <__sclose>:
 8005c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9e:	f000 b80d 	b.w	8005cbc <_close_r>

08005ca2 <memset>:
 8005ca2:	4402      	add	r2, r0
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d100      	bne.n	8005cac <memset+0xa>
 8005caa:	4770      	bx	lr
 8005cac:	f803 1b01 	strb.w	r1, [r3], #1
 8005cb0:	e7f9      	b.n	8005ca6 <memset+0x4>
	...

08005cb4 <_localeconv_r>:
 8005cb4:	4800      	ldr	r0, [pc, #0]	@ (8005cb8 <_localeconv_r+0x4>)
 8005cb6:	4770      	bx	lr
 8005cb8:	20000270 	.word	0x20000270

08005cbc <_close_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4d06      	ldr	r5, [pc, #24]	@ (8005cd8 <_close_r+0x1c>)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	602b      	str	r3, [r5, #0]
 8005cc8:	f7fb fe53 	bl	8001972 <_close>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d102      	bne.n	8005cd6 <_close_r+0x1a>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	b103      	cbz	r3, 8005cd6 <_close_r+0x1a>
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	200008a8 	.word	0x200008a8

08005cdc <_lseek_r>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	4d07      	ldr	r5, [pc, #28]	@ (8005cfc <_lseek_r+0x20>)
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	4608      	mov	r0, r1
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	602a      	str	r2, [r5, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	f7fb fe68 	bl	80019c0 <_lseek>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	d102      	bne.n	8005cfa <_lseek_r+0x1e>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	b103      	cbz	r3, 8005cfa <_lseek_r+0x1e>
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	200008a8 	.word	0x200008a8

08005d00 <_read_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4d07      	ldr	r5, [pc, #28]	@ (8005d20 <_read_r+0x20>)
 8005d04:	4604      	mov	r4, r0
 8005d06:	4608      	mov	r0, r1
 8005d08:	4611      	mov	r1, r2
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	602a      	str	r2, [r5, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f7fb fdf6 	bl	8001900 <_read>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_read_r+0x1e>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_read_r+0x1e>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	200008a8 	.word	0x200008a8

08005d24 <_write_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4d07      	ldr	r5, [pc, #28]	@ (8005d44 <_write_r+0x20>)
 8005d28:	4604      	mov	r4, r0
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	2200      	movs	r2, #0
 8005d30:	602a      	str	r2, [r5, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f7fb fe01 	bl	800193a <_write>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d102      	bne.n	8005d42 <_write_r+0x1e>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	b103      	cbz	r3, 8005d42 <_write_r+0x1e>
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	200008a8 	.word	0x200008a8

08005d48 <__errno>:
 8005d48:	4b01      	ldr	r3, [pc, #4]	@ (8005d50 <__errno+0x8>)
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	20000130 	.word	0x20000130

08005d54 <__libc_init_array>:
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	4d0d      	ldr	r5, [pc, #52]	@ (8005d8c <__libc_init_array+0x38>)
 8005d58:	4c0d      	ldr	r4, [pc, #52]	@ (8005d90 <__libc_init_array+0x3c>)
 8005d5a:	1b64      	subs	r4, r4, r5
 8005d5c:	10a4      	asrs	r4, r4, #2
 8005d5e:	2600      	movs	r6, #0
 8005d60:	42a6      	cmp	r6, r4
 8005d62:	d109      	bne.n	8005d78 <__libc_init_array+0x24>
 8005d64:	4d0b      	ldr	r5, [pc, #44]	@ (8005d94 <__libc_init_array+0x40>)
 8005d66:	4c0c      	ldr	r4, [pc, #48]	@ (8005d98 <__libc_init_array+0x44>)
 8005d68:	f002 fbd6 	bl	8008518 <_init>
 8005d6c:	1b64      	subs	r4, r4, r5
 8005d6e:	10a4      	asrs	r4, r4, #2
 8005d70:	2600      	movs	r6, #0
 8005d72:	42a6      	cmp	r6, r4
 8005d74:	d105      	bne.n	8005d82 <__libc_init_array+0x2e>
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7c:	4798      	blx	r3
 8005d7e:	3601      	adds	r6, #1
 8005d80:	e7ee      	b.n	8005d60 <__libc_init_array+0xc>
 8005d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d86:	4798      	blx	r3
 8005d88:	3601      	adds	r6, #1
 8005d8a:	e7f2      	b.n	8005d72 <__libc_init_array+0x1e>
 8005d8c:	08008958 	.word	0x08008958
 8005d90:	08008958 	.word	0x08008958
 8005d94:	08008958 	.word	0x08008958
 8005d98:	0800895c 	.word	0x0800895c

08005d9c <__retarget_lock_init_recursive>:
 8005d9c:	4770      	bx	lr

08005d9e <__retarget_lock_acquire_recursive>:
 8005d9e:	4770      	bx	lr

08005da0 <__retarget_lock_release_recursive>:
 8005da0:	4770      	bx	lr

08005da2 <memcpy>:
 8005da2:	440a      	add	r2, r1
 8005da4:	4291      	cmp	r1, r2
 8005da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8005daa:	d100      	bne.n	8005dae <memcpy+0xc>
 8005dac:	4770      	bx	lr
 8005dae:	b510      	push	{r4, lr}
 8005db0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005db4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005db8:	4291      	cmp	r1, r2
 8005dba:	d1f9      	bne.n	8005db0 <memcpy+0xe>
 8005dbc:	bd10      	pop	{r4, pc}

08005dbe <quorem>:
 8005dbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc2:	6903      	ldr	r3, [r0, #16]
 8005dc4:	690c      	ldr	r4, [r1, #16]
 8005dc6:	42a3      	cmp	r3, r4
 8005dc8:	4607      	mov	r7, r0
 8005dca:	db7e      	blt.n	8005eca <quorem+0x10c>
 8005dcc:	3c01      	subs	r4, #1
 8005dce:	f101 0814 	add.w	r8, r1, #20
 8005dd2:	00a3      	lsls	r3, r4, #2
 8005dd4:	f100 0514 	add.w	r5, r0, #20
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dde:	9301      	str	r3, [sp, #4]
 8005de0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005de4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005de8:	3301      	adds	r3, #1
 8005dea:	429a      	cmp	r2, r3
 8005dec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005df0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005df4:	d32e      	bcc.n	8005e54 <quorem+0x96>
 8005df6:	f04f 0a00 	mov.w	sl, #0
 8005dfa:	46c4      	mov	ip, r8
 8005dfc:	46ae      	mov	lr, r5
 8005dfe:	46d3      	mov	fp, sl
 8005e00:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005e04:	b298      	uxth	r0, r3
 8005e06:	fb06 a000 	mla	r0, r6, r0, sl
 8005e0a:	0c02      	lsrs	r2, r0, #16
 8005e0c:	0c1b      	lsrs	r3, r3, #16
 8005e0e:	fb06 2303 	mla	r3, r6, r3, r2
 8005e12:	f8de 2000 	ldr.w	r2, [lr]
 8005e16:	b280      	uxth	r0, r0
 8005e18:	b292      	uxth	r2, r2
 8005e1a:	1a12      	subs	r2, r2, r0
 8005e1c:	445a      	add	r2, fp
 8005e1e:	f8de 0000 	ldr.w	r0, [lr]
 8005e22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005e2c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005e30:	b292      	uxth	r2, r2
 8005e32:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e36:	45e1      	cmp	r9, ip
 8005e38:	f84e 2b04 	str.w	r2, [lr], #4
 8005e3c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005e40:	d2de      	bcs.n	8005e00 <quorem+0x42>
 8005e42:	9b00      	ldr	r3, [sp, #0]
 8005e44:	58eb      	ldr	r3, [r5, r3]
 8005e46:	b92b      	cbnz	r3, 8005e54 <quorem+0x96>
 8005e48:	9b01      	ldr	r3, [sp, #4]
 8005e4a:	3b04      	subs	r3, #4
 8005e4c:	429d      	cmp	r5, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	d32f      	bcc.n	8005eb2 <quorem+0xf4>
 8005e52:	613c      	str	r4, [r7, #16]
 8005e54:	4638      	mov	r0, r7
 8005e56:	f001 f97d 	bl	8007154 <__mcmp>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	db25      	blt.n	8005eaa <quorem+0xec>
 8005e5e:	4629      	mov	r1, r5
 8005e60:	2000      	movs	r0, #0
 8005e62:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e66:	f8d1 c000 	ldr.w	ip, [r1]
 8005e6a:	fa1f fe82 	uxth.w	lr, r2
 8005e6e:	fa1f f38c 	uxth.w	r3, ip
 8005e72:	eba3 030e 	sub.w	r3, r3, lr
 8005e76:	4403      	add	r3, r0
 8005e78:	0c12      	lsrs	r2, r2, #16
 8005e7a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005e7e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e88:	45c1      	cmp	r9, r8
 8005e8a:	f841 3b04 	str.w	r3, [r1], #4
 8005e8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e92:	d2e6      	bcs.n	8005e62 <quorem+0xa4>
 8005e94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e9c:	b922      	cbnz	r2, 8005ea8 <quorem+0xea>
 8005e9e:	3b04      	subs	r3, #4
 8005ea0:	429d      	cmp	r5, r3
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	d30b      	bcc.n	8005ebe <quorem+0x100>
 8005ea6:	613c      	str	r4, [r7, #16]
 8005ea8:	3601      	adds	r6, #1
 8005eaa:	4630      	mov	r0, r6
 8005eac:	b003      	add	sp, #12
 8005eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb2:	6812      	ldr	r2, [r2, #0]
 8005eb4:	3b04      	subs	r3, #4
 8005eb6:	2a00      	cmp	r2, #0
 8005eb8:	d1cb      	bne.n	8005e52 <quorem+0x94>
 8005eba:	3c01      	subs	r4, #1
 8005ebc:	e7c6      	b.n	8005e4c <quorem+0x8e>
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	3b04      	subs	r3, #4
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	d1ef      	bne.n	8005ea6 <quorem+0xe8>
 8005ec6:	3c01      	subs	r4, #1
 8005ec8:	e7ea      	b.n	8005ea0 <quorem+0xe2>
 8005eca:	2000      	movs	r0, #0
 8005ecc:	e7ee      	b.n	8005eac <quorem+0xee>
	...

08005ed0 <_dtoa_r>:
 8005ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed4:	69c7      	ldr	r7, [r0, #28]
 8005ed6:	b097      	sub	sp, #92	@ 0x5c
 8005ed8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005edc:	ec55 4b10 	vmov	r4, r5, d0
 8005ee0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005ee2:	9107      	str	r1, [sp, #28]
 8005ee4:	4681      	mov	r9, r0
 8005ee6:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ee8:	9311      	str	r3, [sp, #68]	@ 0x44
 8005eea:	b97f      	cbnz	r7, 8005f0c <_dtoa_r+0x3c>
 8005eec:	2010      	movs	r0, #16
 8005eee:	f000 fe09 	bl	8006b04 <malloc>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	f8c9 001c 	str.w	r0, [r9, #28]
 8005ef8:	b920      	cbnz	r0, 8005f04 <_dtoa_r+0x34>
 8005efa:	4ba9      	ldr	r3, [pc, #676]	@ (80061a0 <_dtoa_r+0x2d0>)
 8005efc:	21ef      	movs	r1, #239	@ 0xef
 8005efe:	48a9      	ldr	r0, [pc, #676]	@ (80061a4 <_dtoa_r+0x2d4>)
 8005f00:	f001 fc5e 	bl	80077c0 <__assert_func>
 8005f04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005f08:	6007      	str	r7, [r0, #0]
 8005f0a:	60c7      	str	r7, [r0, #12]
 8005f0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005f10:	6819      	ldr	r1, [r3, #0]
 8005f12:	b159      	cbz	r1, 8005f2c <_dtoa_r+0x5c>
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	604a      	str	r2, [r1, #4]
 8005f18:	2301      	movs	r3, #1
 8005f1a:	4093      	lsls	r3, r2
 8005f1c:	608b      	str	r3, [r1, #8]
 8005f1e:	4648      	mov	r0, r9
 8005f20:	f000 fee6 	bl	8006cf0 <_Bfree>
 8005f24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	1e2b      	subs	r3, r5, #0
 8005f2e:	bfb9      	ittee	lt
 8005f30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005f34:	9305      	strlt	r3, [sp, #20]
 8005f36:	2300      	movge	r3, #0
 8005f38:	6033      	strge	r3, [r6, #0]
 8005f3a:	9f05      	ldr	r7, [sp, #20]
 8005f3c:	4b9a      	ldr	r3, [pc, #616]	@ (80061a8 <_dtoa_r+0x2d8>)
 8005f3e:	bfbc      	itt	lt
 8005f40:	2201      	movlt	r2, #1
 8005f42:	6032      	strlt	r2, [r6, #0]
 8005f44:	43bb      	bics	r3, r7
 8005f46:	d112      	bne.n	8005f6e <_dtoa_r+0x9e>
 8005f48:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005f4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f54:	4323      	orrs	r3, r4
 8005f56:	f000 855a 	beq.w	8006a0e <_dtoa_r+0xb3e>
 8005f5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f5c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80061bc <_dtoa_r+0x2ec>
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 855c 	beq.w	8006a1e <_dtoa_r+0xb4e>
 8005f66:	f10a 0303 	add.w	r3, sl, #3
 8005f6a:	f000 bd56 	b.w	8006a1a <_dtoa_r+0xb4a>
 8005f6e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005f72:	2200      	movs	r2, #0
 8005f74:	ec51 0b17 	vmov	r0, r1, d7
 8005f78:	2300      	movs	r3, #0
 8005f7a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005f7e:	f7fa fda3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f82:	4680      	mov	r8, r0
 8005f84:	b158      	cbz	r0, 8005f9e <_dtoa_r+0xce>
 8005f86:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005f88:	2301      	movs	r3, #1
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f8e:	b113      	cbz	r3, 8005f96 <_dtoa_r+0xc6>
 8005f90:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005f92:	4b86      	ldr	r3, [pc, #536]	@ (80061ac <_dtoa_r+0x2dc>)
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80061c0 <_dtoa_r+0x2f0>
 8005f9a:	f000 bd40 	b.w	8006a1e <_dtoa_r+0xb4e>
 8005f9e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005fa2:	aa14      	add	r2, sp, #80	@ 0x50
 8005fa4:	a915      	add	r1, sp, #84	@ 0x54
 8005fa6:	4648      	mov	r0, r9
 8005fa8:	f001 f984 	bl	80072b4 <__d2b>
 8005fac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005fb0:	9002      	str	r0, [sp, #8]
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	d078      	beq.n	80060a8 <_dtoa_r+0x1d8>
 8005fb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fb8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005fc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005fc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005fcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	4b76      	ldr	r3, [pc, #472]	@ (80061b0 <_dtoa_r+0x2e0>)
 8005fd6:	f7fa f957 	bl	8000288 <__aeabi_dsub>
 8005fda:	a36b      	add	r3, pc, #428	@ (adr r3, 8006188 <_dtoa_r+0x2b8>)
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f7fa fb0a 	bl	80005f8 <__aeabi_dmul>
 8005fe4:	a36a      	add	r3, pc, #424	@ (adr r3, 8006190 <_dtoa_r+0x2c0>)
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	f7fa f94f 	bl	800028c <__adddf3>
 8005fee:	4604      	mov	r4, r0
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	460d      	mov	r5, r1
 8005ff4:	f7fa fa96 	bl	8000524 <__aeabi_i2d>
 8005ff8:	a367      	add	r3, pc, #412	@ (adr r3, 8006198 <_dtoa_r+0x2c8>)
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	f7fa fafb 	bl	80005f8 <__aeabi_dmul>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4620      	mov	r0, r4
 8006008:	4629      	mov	r1, r5
 800600a:	f7fa f93f 	bl	800028c <__adddf3>
 800600e:	4604      	mov	r4, r0
 8006010:	460d      	mov	r5, r1
 8006012:	f7fa fda1 	bl	8000b58 <__aeabi_d2iz>
 8006016:	2200      	movs	r2, #0
 8006018:	4607      	mov	r7, r0
 800601a:	2300      	movs	r3, #0
 800601c:	4620      	mov	r0, r4
 800601e:	4629      	mov	r1, r5
 8006020:	f7fa fd5c 	bl	8000adc <__aeabi_dcmplt>
 8006024:	b140      	cbz	r0, 8006038 <_dtoa_r+0x168>
 8006026:	4638      	mov	r0, r7
 8006028:	f7fa fa7c 	bl	8000524 <__aeabi_i2d>
 800602c:	4622      	mov	r2, r4
 800602e:	462b      	mov	r3, r5
 8006030:	f7fa fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006034:	b900      	cbnz	r0, 8006038 <_dtoa_r+0x168>
 8006036:	3f01      	subs	r7, #1
 8006038:	2f16      	cmp	r7, #22
 800603a:	d852      	bhi.n	80060e2 <_dtoa_r+0x212>
 800603c:	4b5d      	ldr	r3, [pc, #372]	@ (80061b4 <_dtoa_r+0x2e4>)
 800603e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006046:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800604a:	f7fa fd47 	bl	8000adc <__aeabi_dcmplt>
 800604e:	2800      	cmp	r0, #0
 8006050:	d049      	beq.n	80060e6 <_dtoa_r+0x216>
 8006052:	3f01      	subs	r7, #1
 8006054:	2300      	movs	r3, #0
 8006056:	9310      	str	r3, [sp, #64]	@ 0x40
 8006058:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800605a:	1b9b      	subs	r3, r3, r6
 800605c:	1e5a      	subs	r2, r3, #1
 800605e:	bf45      	ittet	mi
 8006060:	f1c3 0301 	rsbmi	r3, r3, #1
 8006064:	9300      	strmi	r3, [sp, #0]
 8006066:	2300      	movpl	r3, #0
 8006068:	2300      	movmi	r3, #0
 800606a:	9206      	str	r2, [sp, #24]
 800606c:	bf54      	ite	pl
 800606e:	9300      	strpl	r3, [sp, #0]
 8006070:	9306      	strmi	r3, [sp, #24]
 8006072:	2f00      	cmp	r7, #0
 8006074:	db39      	blt.n	80060ea <_dtoa_r+0x21a>
 8006076:	9b06      	ldr	r3, [sp, #24]
 8006078:	970d      	str	r7, [sp, #52]	@ 0x34
 800607a:	443b      	add	r3, r7
 800607c:	9306      	str	r3, [sp, #24]
 800607e:	2300      	movs	r3, #0
 8006080:	9308      	str	r3, [sp, #32]
 8006082:	9b07      	ldr	r3, [sp, #28]
 8006084:	2b09      	cmp	r3, #9
 8006086:	d863      	bhi.n	8006150 <_dtoa_r+0x280>
 8006088:	2b05      	cmp	r3, #5
 800608a:	bfc4      	itt	gt
 800608c:	3b04      	subgt	r3, #4
 800608e:	9307      	strgt	r3, [sp, #28]
 8006090:	9b07      	ldr	r3, [sp, #28]
 8006092:	f1a3 0302 	sub.w	r3, r3, #2
 8006096:	bfcc      	ite	gt
 8006098:	2400      	movgt	r4, #0
 800609a:	2401      	movle	r4, #1
 800609c:	2b03      	cmp	r3, #3
 800609e:	d863      	bhi.n	8006168 <_dtoa_r+0x298>
 80060a0:	e8df f003 	tbb	[pc, r3]
 80060a4:	2b375452 	.word	0x2b375452
 80060a8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80060ac:	441e      	add	r6, r3
 80060ae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	bfc1      	itttt	gt
 80060b6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80060ba:	409f      	lslgt	r7, r3
 80060bc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80060c0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80060c4:	bfd6      	itet	le
 80060c6:	f1c3 0320 	rsble	r3, r3, #32
 80060ca:	ea47 0003 	orrgt.w	r0, r7, r3
 80060ce:	fa04 f003 	lslle.w	r0, r4, r3
 80060d2:	f7fa fa17 	bl	8000504 <__aeabi_ui2d>
 80060d6:	2201      	movs	r2, #1
 80060d8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80060dc:	3e01      	subs	r6, #1
 80060de:	9212      	str	r2, [sp, #72]	@ 0x48
 80060e0:	e776      	b.n	8005fd0 <_dtoa_r+0x100>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e7b7      	b.n	8006056 <_dtoa_r+0x186>
 80060e6:	9010      	str	r0, [sp, #64]	@ 0x40
 80060e8:	e7b6      	b.n	8006058 <_dtoa_r+0x188>
 80060ea:	9b00      	ldr	r3, [sp, #0]
 80060ec:	1bdb      	subs	r3, r3, r7
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	427b      	negs	r3, r7
 80060f2:	9308      	str	r3, [sp, #32]
 80060f4:	2300      	movs	r3, #0
 80060f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80060f8:	e7c3      	b.n	8006082 <_dtoa_r+0x1b2>
 80060fa:	2301      	movs	r3, #1
 80060fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80060fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006100:	eb07 0b03 	add.w	fp, r7, r3
 8006104:	f10b 0301 	add.w	r3, fp, #1
 8006108:	2b01      	cmp	r3, #1
 800610a:	9303      	str	r3, [sp, #12]
 800610c:	bfb8      	it	lt
 800610e:	2301      	movlt	r3, #1
 8006110:	e006      	b.n	8006120 <_dtoa_r+0x250>
 8006112:	2301      	movs	r3, #1
 8006114:	9309      	str	r3, [sp, #36]	@ 0x24
 8006116:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006118:	2b00      	cmp	r3, #0
 800611a:	dd28      	ble.n	800616e <_dtoa_r+0x29e>
 800611c:	469b      	mov	fp, r3
 800611e:	9303      	str	r3, [sp, #12]
 8006120:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006124:	2100      	movs	r1, #0
 8006126:	2204      	movs	r2, #4
 8006128:	f102 0514 	add.w	r5, r2, #20
 800612c:	429d      	cmp	r5, r3
 800612e:	d926      	bls.n	800617e <_dtoa_r+0x2ae>
 8006130:	6041      	str	r1, [r0, #4]
 8006132:	4648      	mov	r0, r9
 8006134:	f000 fd9c 	bl	8006c70 <_Balloc>
 8006138:	4682      	mov	sl, r0
 800613a:	2800      	cmp	r0, #0
 800613c:	d142      	bne.n	80061c4 <_dtoa_r+0x2f4>
 800613e:	4b1e      	ldr	r3, [pc, #120]	@ (80061b8 <_dtoa_r+0x2e8>)
 8006140:	4602      	mov	r2, r0
 8006142:	f240 11af 	movw	r1, #431	@ 0x1af
 8006146:	e6da      	b.n	8005efe <_dtoa_r+0x2e>
 8006148:	2300      	movs	r3, #0
 800614a:	e7e3      	b.n	8006114 <_dtoa_r+0x244>
 800614c:	2300      	movs	r3, #0
 800614e:	e7d5      	b.n	80060fc <_dtoa_r+0x22c>
 8006150:	2401      	movs	r4, #1
 8006152:	2300      	movs	r3, #0
 8006154:	9307      	str	r3, [sp, #28]
 8006156:	9409      	str	r4, [sp, #36]	@ 0x24
 8006158:	f04f 3bff 	mov.w	fp, #4294967295
 800615c:	2200      	movs	r2, #0
 800615e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006162:	2312      	movs	r3, #18
 8006164:	920c      	str	r2, [sp, #48]	@ 0x30
 8006166:	e7db      	b.n	8006120 <_dtoa_r+0x250>
 8006168:	2301      	movs	r3, #1
 800616a:	9309      	str	r3, [sp, #36]	@ 0x24
 800616c:	e7f4      	b.n	8006158 <_dtoa_r+0x288>
 800616e:	f04f 0b01 	mov.w	fp, #1
 8006172:	f8cd b00c 	str.w	fp, [sp, #12]
 8006176:	465b      	mov	r3, fp
 8006178:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800617c:	e7d0      	b.n	8006120 <_dtoa_r+0x250>
 800617e:	3101      	adds	r1, #1
 8006180:	0052      	lsls	r2, r2, #1
 8006182:	e7d1      	b.n	8006128 <_dtoa_r+0x258>
 8006184:	f3af 8000 	nop.w
 8006188:	636f4361 	.word	0x636f4361
 800618c:	3fd287a7 	.word	0x3fd287a7
 8006190:	8b60c8b3 	.word	0x8b60c8b3
 8006194:	3fc68a28 	.word	0x3fc68a28
 8006198:	509f79fb 	.word	0x509f79fb
 800619c:	3fd34413 	.word	0x3fd34413
 80061a0:	08008596 	.word	0x08008596
 80061a4:	080085ad 	.word	0x080085ad
 80061a8:	7ff00000 	.word	0x7ff00000
 80061ac:	08008566 	.word	0x08008566
 80061b0:	3ff80000 	.word	0x3ff80000
 80061b4:	08008700 	.word	0x08008700
 80061b8:	08008605 	.word	0x08008605
 80061bc:	08008592 	.word	0x08008592
 80061c0:	08008565 	.word	0x08008565
 80061c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80061c8:	6018      	str	r0, [r3, #0]
 80061ca:	9b03      	ldr	r3, [sp, #12]
 80061cc:	2b0e      	cmp	r3, #14
 80061ce:	f200 80a1 	bhi.w	8006314 <_dtoa_r+0x444>
 80061d2:	2c00      	cmp	r4, #0
 80061d4:	f000 809e 	beq.w	8006314 <_dtoa_r+0x444>
 80061d8:	2f00      	cmp	r7, #0
 80061da:	dd33      	ble.n	8006244 <_dtoa_r+0x374>
 80061dc:	4b9c      	ldr	r3, [pc, #624]	@ (8006450 <_dtoa_r+0x580>)
 80061de:	f007 020f 	and.w	r2, r7, #15
 80061e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061e6:	ed93 7b00 	vldr	d7, [r3]
 80061ea:	05f8      	lsls	r0, r7, #23
 80061ec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80061f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80061f4:	d516      	bpl.n	8006224 <_dtoa_r+0x354>
 80061f6:	4b97      	ldr	r3, [pc, #604]	@ (8006454 <_dtoa_r+0x584>)
 80061f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80061fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006200:	f7fa fb24 	bl	800084c <__aeabi_ddiv>
 8006204:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006208:	f004 040f 	and.w	r4, r4, #15
 800620c:	2603      	movs	r6, #3
 800620e:	4d91      	ldr	r5, [pc, #580]	@ (8006454 <_dtoa_r+0x584>)
 8006210:	b954      	cbnz	r4, 8006228 <_dtoa_r+0x358>
 8006212:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006216:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800621a:	f7fa fb17 	bl	800084c <__aeabi_ddiv>
 800621e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006222:	e028      	b.n	8006276 <_dtoa_r+0x3a6>
 8006224:	2602      	movs	r6, #2
 8006226:	e7f2      	b.n	800620e <_dtoa_r+0x33e>
 8006228:	07e1      	lsls	r1, r4, #31
 800622a:	d508      	bpl.n	800623e <_dtoa_r+0x36e>
 800622c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006230:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006234:	f7fa f9e0 	bl	80005f8 <__aeabi_dmul>
 8006238:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800623c:	3601      	adds	r6, #1
 800623e:	1064      	asrs	r4, r4, #1
 8006240:	3508      	adds	r5, #8
 8006242:	e7e5      	b.n	8006210 <_dtoa_r+0x340>
 8006244:	f000 80af 	beq.w	80063a6 <_dtoa_r+0x4d6>
 8006248:	427c      	negs	r4, r7
 800624a:	4b81      	ldr	r3, [pc, #516]	@ (8006450 <_dtoa_r+0x580>)
 800624c:	4d81      	ldr	r5, [pc, #516]	@ (8006454 <_dtoa_r+0x584>)
 800624e:	f004 020f 	and.w	r2, r4, #15
 8006252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800625e:	f7fa f9cb 	bl	80005f8 <__aeabi_dmul>
 8006262:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006266:	1124      	asrs	r4, r4, #4
 8006268:	2300      	movs	r3, #0
 800626a:	2602      	movs	r6, #2
 800626c:	2c00      	cmp	r4, #0
 800626e:	f040 808f 	bne.w	8006390 <_dtoa_r+0x4c0>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1d3      	bne.n	800621e <_dtoa_r+0x34e>
 8006276:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006278:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8094 	beq.w	80063aa <_dtoa_r+0x4da>
 8006282:	4b75      	ldr	r3, [pc, #468]	@ (8006458 <_dtoa_r+0x588>)
 8006284:	2200      	movs	r2, #0
 8006286:	4620      	mov	r0, r4
 8006288:	4629      	mov	r1, r5
 800628a:	f7fa fc27 	bl	8000adc <__aeabi_dcmplt>
 800628e:	2800      	cmp	r0, #0
 8006290:	f000 808b 	beq.w	80063aa <_dtoa_r+0x4da>
 8006294:	9b03      	ldr	r3, [sp, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 8087 	beq.w	80063aa <_dtoa_r+0x4da>
 800629c:	f1bb 0f00 	cmp.w	fp, #0
 80062a0:	dd34      	ble.n	800630c <_dtoa_r+0x43c>
 80062a2:	4620      	mov	r0, r4
 80062a4:	4b6d      	ldr	r3, [pc, #436]	@ (800645c <_dtoa_r+0x58c>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	4629      	mov	r1, r5
 80062aa:	f7fa f9a5 	bl	80005f8 <__aeabi_dmul>
 80062ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062b2:	f107 38ff 	add.w	r8, r7, #4294967295
 80062b6:	3601      	adds	r6, #1
 80062b8:	465c      	mov	r4, fp
 80062ba:	4630      	mov	r0, r6
 80062bc:	f7fa f932 	bl	8000524 <__aeabi_i2d>
 80062c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062c4:	f7fa f998 	bl	80005f8 <__aeabi_dmul>
 80062c8:	4b65      	ldr	r3, [pc, #404]	@ (8006460 <_dtoa_r+0x590>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	f7f9 ffde 	bl	800028c <__adddf3>
 80062d0:	4605      	mov	r5, r0
 80062d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80062d6:	2c00      	cmp	r4, #0
 80062d8:	d16a      	bne.n	80063b0 <_dtoa_r+0x4e0>
 80062da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062de:	4b61      	ldr	r3, [pc, #388]	@ (8006464 <_dtoa_r+0x594>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	f7f9 ffd1 	bl	8000288 <__aeabi_dsub>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062ee:	462a      	mov	r2, r5
 80062f0:	4633      	mov	r3, r6
 80062f2:	f7fa fc11 	bl	8000b18 <__aeabi_dcmpgt>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	f040 8298 	bne.w	800682c <_dtoa_r+0x95c>
 80062fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006300:	462a      	mov	r2, r5
 8006302:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006306:	f7fa fbe9 	bl	8000adc <__aeabi_dcmplt>
 800630a:	bb38      	cbnz	r0, 800635c <_dtoa_r+0x48c>
 800630c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006310:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006314:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006316:	2b00      	cmp	r3, #0
 8006318:	f2c0 8157 	blt.w	80065ca <_dtoa_r+0x6fa>
 800631c:	2f0e      	cmp	r7, #14
 800631e:	f300 8154 	bgt.w	80065ca <_dtoa_r+0x6fa>
 8006322:	4b4b      	ldr	r3, [pc, #300]	@ (8006450 <_dtoa_r+0x580>)
 8006324:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006328:	ed93 7b00 	vldr	d7, [r3]
 800632c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800632e:	2b00      	cmp	r3, #0
 8006330:	ed8d 7b00 	vstr	d7, [sp]
 8006334:	f280 80e5 	bge.w	8006502 <_dtoa_r+0x632>
 8006338:	9b03      	ldr	r3, [sp, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	f300 80e1 	bgt.w	8006502 <_dtoa_r+0x632>
 8006340:	d10c      	bne.n	800635c <_dtoa_r+0x48c>
 8006342:	4b48      	ldr	r3, [pc, #288]	@ (8006464 <_dtoa_r+0x594>)
 8006344:	2200      	movs	r2, #0
 8006346:	ec51 0b17 	vmov	r0, r1, d7
 800634a:	f7fa f955 	bl	80005f8 <__aeabi_dmul>
 800634e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006352:	f7fa fbd7 	bl	8000b04 <__aeabi_dcmpge>
 8006356:	2800      	cmp	r0, #0
 8006358:	f000 8266 	beq.w	8006828 <_dtoa_r+0x958>
 800635c:	2400      	movs	r4, #0
 800635e:	4625      	mov	r5, r4
 8006360:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006362:	4656      	mov	r6, sl
 8006364:	ea6f 0803 	mvn.w	r8, r3
 8006368:	2700      	movs	r7, #0
 800636a:	4621      	mov	r1, r4
 800636c:	4648      	mov	r0, r9
 800636e:	f000 fcbf 	bl	8006cf0 <_Bfree>
 8006372:	2d00      	cmp	r5, #0
 8006374:	f000 80bd 	beq.w	80064f2 <_dtoa_r+0x622>
 8006378:	b12f      	cbz	r7, 8006386 <_dtoa_r+0x4b6>
 800637a:	42af      	cmp	r7, r5
 800637c:	d003      	beq.n	8006386 <_dtoa_r+0x4b6>
 800637e:	4639      	mov	r1, r7
 8006380:	4648      	mov	r0, r9
 8006382:	f000 fcb5 	bl	8006cf0 <_Bfree>
 8006386:	4629      	mov	r1, r5
 8006388:	4648      	mov	r0, r9
 800638a:	f000 fcb1 	bl	8006cf0 <_Bfree>
 800638e:	e0b0      	b.n	80064f2 <_dtoa_r+0x622>
 8006390:	07e2      	lsls	r2, r4, #31
 8006392:	d505      	bpl.n	80063a0 <_dtoa_r+0x4d0>
 8006394:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006398:	f7fa f92e 	bl	80005f8 <__aeabi_dmul>
 800639c:	3601      	adds	r6, #1
 800639e:	2301      	movs	r3, #1
 80063a0:	1064      	asrs	r4, r4, #1
 80063a2:	3508      	adds	r5, #8
 80063a4:	e762      	b.n	800626c <_dtoa_r+0x39c>
 80063a6:	2602      	movs	r6, #2
 80063a8:	e765      	b.n	8006276 <_dtoa_r+0x3a6>
 80063aa:	9c03      	ldr	r4, [sp, #12]
 80063ac:	46b8      	mov	r8, r7
 80063ae:	e784      	b.n	80062ba <_dtoa_r+0x3ea>
 80063b0:	4b27      	ldr	r3, [pc, #156]	@ (8006450 <_dtoa_r+0x580>)
 80063b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80063b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063bc:	4454      	add	r4, sl
 80063be:	2900      	cmp	r1, #0
 80063c0:	d054      	beq.n	800646c <_dtoa_r+0x59c>
 80063c2:	4929      	ldr	r1, [pc, #164]	@ (8006468 <_dtoa_r+0x598>)
 80063c4:	2000      	movs	r0, #0
 80063c6:	f7fa fa41 	bl	800084c <__aeabi_ddiv>
 80063ca:	4633      	mov	r3, r6
 80063cc:	462a      	mov	r2, r5
 80063ce:	f7f9 ff5b 	bl	8000288 <__aeabi_dsub>
 80063d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80063d6:	4656      	mov	r6, sl
 80063d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063dc:	f7fa fbbc 	bl	8000b58 <__aeabi_d2iz>
 80063e0:	4605      	mov	r5, r0
 80063e2:	f7fa f89f 	bl	8000524 <__aeabi_i2d>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063ee:	f7f9 ff4b 	bl	8000288 <__aeabi_dsub>
 80063f2:	3530      	adds	r5, #48	@ 0x30
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063fc:	f806 5b01 	strb.w	r5, [r6], #1
 8006400:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006404:	f7fa fb6a 	bl	8000adc <__aeabi_dcmplt>
 8006408:	2800      	cmp	r0, #0
 800640a:	d172      	bne.n	80064f2 <_dtoa_r+0x622>
 800640c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006410:	4911      	ldr	r1, [pc, #68]	@ (8006458 <_dtoa_r+0x588>)
 8006412:	2000      	movs	r0, #0
 8006414:	f7f9 ff38 	bl	8000288 <__aeabi_dsub>
 8006418:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800641c:	f7fa fb5e 	bl	8000adc <__aeabi_dcmplt>
 8006420:	2800      	cmp	r0, #0
 8006422:	f040 80b4 	bne.w	800658e <_dtoa_r+0x6be>
 8006426:	42a6      	cmp	r6, r4
 8006428:	f43f af70 	beq.w	800630c <_dtoa_r+0x43c>
 800642c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006430:	4b0a      	ldr	r3, [pc, #40]	@ (800645c <_dtoa_r+0x58c>)
 8006432:	2200      	movs	r2, #0
 8006434:	f7fa f8e0 	bl	80005f8 <__aeabi_dmul>
 8006438:	4b08      	ldr	r3, [pc, #32]	@ (800645c <_dtoa_r+0x58c>)
 800643a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800643e:	2200      	movs	r2, #0
 8006440:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006444:	f7fa f8d8 	bl	80005f8 <__aeabi_dmul>
 8006448:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800644c:	e7c4      	b.n	80063d8 <_dtoa_r+0x508>
 800644e:	bf00      	nop
 8006450:	08008700 	.word	0x08008700
 8006454:	080086d8 	.word	0x080086d8
 8006458:	3ff00000 	.word	0x3ff00000
 800645c:	40240000 	.word	0x40240000
 8006460:	401c0000 	.word	0x401c0000
 8006464:	40140000 	.word	0x40140000
 8006468:	3fe00000 	.word	0x3fe00000
 800646c:	4631      	mov	r1, r6
 800646e:	4628      	mov	r0, r5
 8006470:	f7fa f8c2 	bl	80005f8 <__aeabi_dmul>
 8006474:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006478:	9413      	str	r4, [sp, #76]	@ 0x4c
 800647a:	4656      	mov	r6, sl
 800647c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006480:	f7fa fb6a 	bl	8000b58 <__aeabi_d2iz>
 8006484:	4605      	mov	r5, r0
 8006486:	f7fa f84d 	bl	8000524 <__aeabi_i2d>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006492:	f7f9 fef9 	bl	8000288 <__aeabi_dsub>
 8006496:	3530      	adds	r5, #48	@ 0x30
 8006498:	f806 5b01 	strb.w	r5, [r6], #1
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	42a6      	cmp	r6, r4
 80064a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	d124      	bne.n	80064f6 <_dtoa_r+0x626>
 80064ac:	4baf      	ldr	r3, [pc, #700]	@ (800676c <_dtoa_r+0x89c>)
 80064ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80064b2:	f7f9 feeb 	bl	800028c <__adddf3>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064be:	f7fa fb2b 	bl	8000b18 <__aeabi_dcmpgt>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d163      	bne.n	800658e <_dtoa_r+0x6be>
 80064c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80064ca:	49a8      	ldr	r1, [pc, #672]	@ (800676c <_dtoa_r+0x89c>)
 80064cc:	2000      	movs	r0, #0
 80064ce:	f7f9 fedb 	bl	8000288 <__aeabi_dsub>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064da:	f7fa faff 	bl	8000adc <__aeabi_dcmplt>
 80064de:	2800      	cmp	r0, #0
 80064e0:	f43f af14 	beq.w	800630c <_dtoa_r+0x43c>
 80064e4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80064e6:	1e73      	subs	r3, r6, #1
 80064e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80064ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80064ee:	2b30      	cmp	r3, #48	@ 0x30
 80064f0:	d0f8      	beq.n	80064e4 <_dtoa_r+0x614>
 80064f2:	4647      	mov	r7, r8
 80064f4:	e03b      	b.n	800656e <_dtoa_r+0x69e>
 80064f6:	4b9e      	ldr	r3, [pc, #632]	@ (8006770 <_dtoa_r+0x8a0>)
 80064f8:	f7fa f87e 	bl	80005f8 <__aeabi_dmul>
 80064fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006500:	e7bc      	b.n	800647c <_dtoa_r+0x5ac>
 8006502:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006506:	4656      	mov	r6, sl
 8006508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800650c:	4620      	mov	r0, r4
 800650e:	4629      	mov	r1, r5
 8006510:	f7fa f99c 	bl	800084c <__aeabi_ddiv>
 8006514:	f7fa fb20 	bl	8000b58 <__aeabi_d2iz>
 8006518:	4680      	mov	r8, r0
 800651a:	f7fa f803 	bl	8000524 <__aeabi_i2d>
 800651e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006522:	f7fa f869 	bl	80005f8 <__aeabi_dmul>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	4620      	mov	r0, r4
 800652c:	4629      	mov	r1, r5
 800652e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006532:	f7f9 fea9 	bl	8000288 <__aeabi_dsub>
 8006536:	f806 4b01 	strb.w	r4, [r6], #1
 800653a:	9d03      	ldr	r5, [sp, #12]
 800653c:	eba6 040a 	sub.w	r4, r6, sl
 8006540:	42a5      	cmp	r5, r4
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	d133      	bne.n	80065b0 <_dtoa_r+0x6e0>
 8006548:	f7f9 fea0 	bl	800028c <__adddf3>
 800654c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006550:	4604      	mov	r4, r0
 8006552:	460d      	mov	r5, r1
 8006554:	f7fa fae0 	bl	8000b18 <__aeabi_dcmpgt>
 8006558:	b9c0      	cbnz	r0, 800658c <_dtoa_r+0x6bc>
 800655a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800655e:	4620      	mov	r0, r4
 8006560:	4629      	mov	r1, r5
 8006562:	f7fa fab1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006566:	b110      	cbz	r0, 800656e <_dtoa_r+0x69e>
 8006568:	f018 0f01 	tst.w	r8, #1
 800656c:	d10e      	bne.n	800658c <_dtoa_r+0x6bc>
 800656e:	9902      	ldr	r1, [sp, #8]
 8006570:	4648      	mov	r0, r9
 8006572:	f000 fbbd 	bl	8006cf0 <_Bfree>
 8006576:	2300      	movs	r3, #0
 8006578:	7033      	strb	r3, [r6, #0]
 800657a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800657c:	3701      	adds	r7, #1
 800657e:	601f      	str	r7, [r3, #0]
 8006580:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 824b 	beq.w	8006a1e <_dtoa_r+0xb4e>
 8006588:	601e      	str	r6, [r3, #0]
 800658a:	e248      	b.n	8006a1e <_dtoa_r+0xb4e>
 800658c:	46b8      	mov	r8, r7
 800658e:	4633      	mov	r3, r6
 8006590:	461e      	mov	r6, r3
 8006592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006596:	2a39      	cmp	r2, #57	@ 0x39
 8006598:	d106      	bne.n	80065a8 <_dtoa_r+0x6d8>
 800659a:	459a      	cmp	sl, r3
 800659c:	d1f8      	bne.n	8006590 <_dtoa_r+0x6c0>
 800659e:	2230      	movs	r2, #48	@ 0x30
 80065a0:	f108 0801 	add.w	r8, r8, #1
 80065a4:	f88a 2000 	strb.w	r2, [sl]
 80065a8:	781a      	ldrb	r2, [r3, #0]
 80065aa:	3201      	adds	r2, #1
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	e7a0      	b.n	80064f2 <_dtoa_r+0x622>
 80065b0:	4b6f      	ldr	r3, [pc, #444]	@ (8006770 <_dtoa_r+0x8a0>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	f7fa f820 	bl	80005f8 <__aeabi_dmul>
 80065b8:	2200      	movs	r2, #0
 80065ba:	2300      	movs	r3, #0
 80065bc:	4604      	mov	r4, r0
 80065be:	460d      	mov	r5, r1
 80065c0:	f7fa fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d09f      	beq.n	8006508 <_dtoa_r+0x638>
 80065c8:	e7d1      	b.n	800656e <_dtoa_r+0x69e>
 80065ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065cc:	2a00      	cmp	r2, #0
 80065ce:	f000 80ea 	beq.w	80067a6 <_dtoa_r+0x8d6>
 80065d2:	9a07      	ldr	r2, [sp, #28]
 80065d4:	2a01      	cmp	r2, #1
 80065d6:	f300 80cd 	bgt.w	8006774 <_dtoa_r+0x8a4>
 80065da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80065dc:	2a00      	cmp	r2, #0
 80065de:	f000 80c1 	beq.w	8006764 <_dtoa_r+0x894>
 80065e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80065e6:	9c08      	ldr	r4, [sp, #32]
 80065e8:	9e00      	ldr	r6, [sp, #0]
 80065ea:	9a00      	ldr	r2, [sp, #0]
 80065ec:	441a      	add	r2, r3
 80065ee:	9200      	str	r2, [sp, #0]
 80065f0:	9a06      	ldr	r2, [sp, #24]
 80065f2:	2101      	movs	r1, #1
 80065f4:	441a      	add	r2, r3
 80065f6:	4648      	mov	r0, r9
 80065f8:	9206      	str	r2, [sp, #24]
 80065fa:	f000 fc2d 	bl	8006e58 <__i2b>
 80065fe:	4605      	mov	r5, r0
 8006600:	b166      	cbz	r6, 800661c <_dtoa_r+0x74c>
 8006602:	9b06      	ldr	r3, [sp, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	dd09      	ble.n	800661c <_dtoa_r+0x74c>
 8006608:	42b3      	cmp	r3, r6
 800660a:	9a00      	ldr	r2, [sp, #0]
 800660c:	bfa8      	it	ge
 800660e:	4633      	movge	r3, r6
 8006610:	1ad2      	subs	r2, r2, r3
 8006612:	9200      	str	r2, [sp, #0]
 8006614:	9a06      	ldr	r2, [sp, #24]
 8006616:	1af6      	subs	r6, r6, r3
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	9306      	str	r3, [sp, #24]
 800661c:	9b08      	ldr	r3, [sp, #32]
 800661e:	b30b      	cbz	r3, 8006664 <_dtoa_r+0x794>
 8006620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 80c6 	beq.w	80067b4 <_dtoa_r+0x8e4>
 8006628:	2c00      	cmp	r4, #0
 800662a:	f000 80c0 	beq.w	80067ae <_dtoa_r+0x8de>
 800662e:	4629      	mov	r1, r5
 8006630:	4622      	mov	r2, r4
 8006632:	4648      	mov	r0, r9
 8006634:	f000 fcc8 	bl	8006fc8 <__pow5mult>
 8006638:	9a02      	ldr	r2, [sp, #8]
 800663a:	4601      	mov	r1, r0
 800663c:	4605      	mov	r5, r0
 800663e:	4648      	mov	r0, r9
 8006640:	f000 fc20 	bl	8006e84 <__multiply>
 8006644:	9902      	ldr	r1, [sp, #8]
 8006646:	4680      	mov	r8, r0
 8006648:	4648      	mov	r0, r9
 800664a:	f000 fb51 	bl	8006cf0 <_Bfree>
 800664e:	9b08      	ldr	r3, [sp, #32]
 8006650:	1b1b      	subs	r3, r3, r4
 8006652:	9308      	str	r3, [sp, #32]
 8006654:	f000 80b1 	beq.w	80067ba <_dtoa_r+0x8ea>
 8006658:	9a08      	ldr	r2, [sp, #32]
 800665a:	4641      	mov	r1, r8
 800665c:	4648      	mov	r0, r9
 800665e:	f000 fcb3 	bl	8006fc8 <__pow5mult>
 8006662:	9002      	str	r0, [sp, #8]
 8006664:	2101      	movs	r1, #1
 8006666:	4648      	mov	r0, r9
 8006668:	f000 fbf6 	bl	8006e58 <__i2b>
 800666c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800666e:	4604      	mov	r4, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 81d8 	beq.w	8006a26 <_dtoa_r+0xb56>
 8006676:	461a      	mov	r2, r3
 8006678:	4601      	mov	r1, r0
 800667a:	4648      	mov	r0, r9
 800667c:	f000 fca4 	bl	8006fc8 <__pow5mult>
 8006680:	9b07      	ldr	r3, [sp, #28]
 8006682:	2b01      	cmp	r3, #1
 8006684:	4604      	mov	r4, r0
 8006686:	f300 809f 	bgt.w	80067c8 <_dtoa_r+0x8f8>
 800668a:	9b04      	ldr	r3, [sp, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	f040 8097 	bne.w	80067c0 <_dtoa_r+0x8f0>
 8006692:	9b05      	ldr	r3, [sp, #20]
 8006694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006698:	2b00      	cmp	r3, #0
 800669a:	f040 8093 	bne.w	80067c4 <_dtoa_r+0x8f4>
 800669e:	9b05      	ldr	r3, [sp, #20]
 80066a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066a4:	0d1b      	lsrs	r3, r3, #20
 80066a6:	051b      	lsls	r3, r3, #20
 80066a8:	b133      	cbz	r3, 80066b8 <_dtoa_r+0x7e8>
 80066aa:	9b00      	ldr	r3, [sp, #0]
 80066ac:	3301      	adds	r3, #1
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	9b06      	ldr	r3, [sp, #24]
 80066b2:	3301      	adds	r3, #1
 80066b4:	9306      	str	r3, [sp, #24]
 80066b6:	2301      	movs	r3, #1
 80066b8:	9308      	str	r3, [sp, #32]
 80066ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 81b8 	beq.w	8006a32 <_dtoa_r+0xb62>
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80066c8:	6918      	ldr	r0, [r3, #16]
 80066ca:	f000 fb79 	bl	8006dc0 <__hi0bits>
 80066ce:	f1c0 0020 	rsb	r0, r0, #32
 80066d2:	9b06      	ldr	r3, [sp, #24]
 80066d4:	4418      	add	r0, r3
 80066d6:	f010 001f 	ands.w	r0, r0, #31
 80066da:	f000 8082 	beq.w	80067e2 <_dtoa_r+0x912>
 80066de:	f1c0 0320 	rsb	r3, r0, #32
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	dd73      	ble.n	80067ce <_dtoa_r+0x8fe>
 80066e6:	9b00      	ldr	r3, [sp, #0]
 80066e8:	f1c0 001c 	rsb	r0, r0, #28
 80066ec:	4403      	add	r3, r0
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	9b06      	ldr	r3, [sp, #24]
 80066f2:	4403      	add	r3, r0
 80066f4:	4406      	add	r6, r0
 80066f6:	9306      	str	r3, [sp, #24]
 80066f8:	9b00      	ldr	r3, [sp, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	dd05      	ble.n	800670a <_dtoa_r+0x83a>
 80066fe:	9902      	ldr	r1, [sp, #8]
 8006700:	461a      	mov	r2, r3
 8006702:	4648      	mov	r0, r9
 8006704:	f000 fcba 	bl	800707c <__lshift>
 8006708:	9002      	str	r0, [sp, #8]
 800670a:	9b06      	ldr	r3, [sp, #24]
 800670c:	2b00      	cmp	r3, #0
 800670e:	dd05      	ble.n	800671c <_dtoa_r+0x84c>
 8006710:	4621      	mov	r1, r4
 8006712:	461a      	mov	r2, r3
 8006714:	4648      	mov	r0, r9
 8006716:	f000 fcb1 	bl	800707c <__lshift>
 800671a:	4604      	mov	r4, r0
 800671c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d061      	beq.n	80067e6 <_dtoa_r+0x916>
 8006722:	9802      	ldr	r0, [sp, #8]
 8006724:	4621      	mov	r1, r4
 8006726:	f000 fd15 	bl	8007154 <__mcmp>
 800672a:	2800      	cmp	r0, #0
 800672c:	da5b      	bge.n	80067e6 <_dtoa_r+0x916>
 800672e:	2300      	movs	r3, #0
 8006730:	9902      	ldr	r1, [sp, #8]
 8006732:	220a      	movs	r2, #10
 8006734:	4648      	mov	r0, r9
 8006736:	f000 fafd 	bl	8006d34 <__multadd>
 800673a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800673c:	9002      	str	r0, [sp, #8]
 800673e:	f107 38ff 	add.w	r8, r7, #4294967295
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8177 	beq.w	8006a36 <_dtoa_r+0xb66>
 8006748:	4629      	mov	r1, r5
 800674a:	2300      	movs	r3, #0
 800674c:	220a      	movs	r2, #10
 800674e:	4648      	mov	r0, r9
 8006750:	f000 faf0 	bl	8006d34 <__multadd>
 8006754:	f1bb 0f00 	cmp.w	fp, #0
 8006758:	4605      	mov	r5, r0
 800675a:	dc6f      	bgt.n	800683c <_dtoa_r+0x96c>
 800675c:	9b07      	ldr	r3, [sp, #28]
 800675e:	2b02      	cmp	r3, #2
 8006760:	dc49      	bgt.n	80067f6 <_dtoa_r+0x926>
 8006762:	e06b      	b.n	800683c <_dtoa_r+0x96c>
 8006764:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006766:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800676a:	e73c      	b.n	80065e6 <_dtoa_r+0x716>
 800676c:	3fe00000 	.word	0x3fe00000
 8006770:	40240000 	.word	0x40240000
 8006774:	9b03      	ldr	r3, [sp, #12]
 8006776:	1e5c      	subs	r4, r3, #1
 8006778:	9b08      	ldr	r3, [sp, #32]
 800677a:	42a3      	cmp	r3, r4
 800677c:	db09      	blt.n	8006792 <_dtoa_r+0x8c2>
 800677e:	1b1c      	subs	r4, r3, r4
 8006780:	9b03      	ldr	r3, [sp, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	f6bf af30 	bge.w	80065e8 <_dtoa_r+0x718>
 8006788:	9b00      	ldr	r3, [sp, #0]
 800678a:	9a03      	ldr	r2, [sp, #12]
 800678c:	1a9e      	subs	r6, r3, r2
 800678e:	2300      	movs	r3, #0
 8006790:	e72b      	b.n	80065ea <_dtoa_r+0x71a>
 8006792:	9b08      	ldr	r3, [sp, #32]
 8006794:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006796:	9408      	str	r4, [sp, #32]
 8006798:	1ae3      	subs	r3, r4, r3
 800679a:	441a      	add	r2, r3
 800679c:	9e00      	ldr	r6, [sp, #0]
 800679e:	9b03      	ldr	r3, [sp, #12]
 80067a0:	920d      	str	r2, [sp, #52]	@ 0x34
 80067a2:	2400      	movs	r4, #0
 80067a4:	e721      	b.n	80065ea <_dtoa_r+0x71a>
 80067a6:	9c08      	ldr	r4, [sp, #32]
 80067a8:	9e00      	ldr	r6, [sp, #0]
 80067aa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80067ac:	e728      	b.n	8006600 <_dtoa_r+0x730>
 80067ae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80067b2:	e751      	b.n	8006658 <_dtoa_r+0x788>
 80067b4:	9a08      	ldr	r2, [sp, #32]
 80067b6:	9902      	ldr	r1, [sp, #8]
 80067b8:	e750      	b.n	800665c <_dtoa_r+0x78c>
 80067ba:	f8cd 8008 	str.w	r8, [sp, #8]
 80067be:	e751      	b.n	8006664 <_dtoa_r+0x794>
 80067c0:	2300      	movs	r3, #0
 80067c2:	e779      	b.n	80066b8 <_dtoa_r+0x7e8>
 80067c4:	9b04      	ldr	r3, [sp, #16]
 80067c6:	e777      	b.n	80066b8 <_dtoa_r+0x7e8>
 80067c8:	2300      	movs	r3, #0
 80067ca:	9308      	str	r3, [sp, #32]
 80067cc:	e779      	b.n	80066c2 <_dtoa_r+0x7f2>
 80067ce:	d093      	beq.n	80066f8 <_dtoa_r+0x828>
 80067d0:	9a00      	ldr	r2, [sp, #0]
 80067d2:	331c      	adds	r3, #28
 80067d4:	441a      	add	r2, r3
 80067d6:	9200      	str	r2, [sp, #0]
 80067d8:	9a06      	ldr	r2, [sp, #24]
 80067da:	441a      	add	r2, r3
 80067dc:	441e      	add	r6, r3
 80067de:	9206      	str	r2, [sp, #24]
 80067e0:	e78a      	b.n	80066f8 <_dtoa_r+0x828>
 80067e2:	4603      	mov	r3, r0
 80067e4:	e7f4      	b.n	80067d0 <_dtoa_r+0x900>
 80067e6:	9b03      	ldr	r3, [sp, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	46b8      	mov	r8, r7
 80067ec:	dc20      	bgt.n	8006830 <_dtoa_r+0x960>
 80067ee:	469b      	mov	fp, r3
 80067f0:	9b07      	ldr	r3, [sp, #28]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	dd1e      	ble.n	8006834 <_dtoa_r+0x964>
 80067f6:	f1bb 0f00 	cmp.w	fp, #0
 80067fa:	f47f adb1 	bne.w	8006360 <_dtoa_r+0x490>
 80067fe:	4621      	mov	r1, r4
 8006800:	465b      	mov	r3, fp
 8006802:	2205      	movs	r2, #5
 8006804:	4648      	mov	r0, r9
 8006806:	f000 fa95 	bl	8006d34 <__multadd>
 800680a:	4601      	mov	r1, r0
 800680c:	4604      	mov	r4, r0
 800680e:	9802      	ldr	r0, [sp, #8]
 8006810:	f000 fca0 	bl	8007154 <__mcmp>
 8006814:	2800      	cmp	r0, #0
 8006816:	f77f ada3 	ble.w	8006360 <_dtoa_r+0x490>
 800681a:	4656      	mov	r6, sl
 800681c:	2331      	movs	r3, #49	@ 0x31
 800681e:	f806 3b01 	strb.w	r3, [r6], #1
 8006822:	f108 0801 	add.w	r8, r8, #1
 8006826:	e59f      	b.n	8006368 <_dtoa_r+0x498>
 8006828:	9c03      	ldr	r4, [sp, #12]
 800682a:	46b8      	mov	r8, r7
 800682c:	4625      	mov	r5, r4
 800682e:	e7f4      	b.n	800681a <_dtoa_r+0x94a>
 8006830:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 8101 	beq.w	8006a3e <_dtoa_r+0xb6e>
 800683c:	2e00      	cmp	r6, #0
 800683e:	dd05      	ble.n	800684c <_dtoa_r+0x97c>
 8006840:	4629      	mov	r1, r5
 8006842:	4632      	mov	r2, r6
 8006844:	4648      	mov	r0, r9
 8006846:	f000 fc19 	bl	800707c <__lshift>
 800684a:	4605      	mov	r5, r0
 800684c:	9b08      	ldr	r3, [sp, #32]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d05c      	beq.n	800690c <_dtoa_r+0xa3c>
 8006852:	6869      	ldr	r1, [r5, #4]
 8006854:	4648      	mov	r0, r9
 8006856:	f000 fa0b 	bl	8006c70 <_Balloc>
 800685a:	4606      	mov	r6, r0
 800685c:	b928      	cbnz	r0, 800686a <_dtoa_r+0x99a>
 800685e:	4b82      	ldr	r3, [pc, #520]	@ (8006a68 <_dtoa_r+0xb98>)
 8006860:	4602      	mov	r2, r0
 8006862:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006866:	f7ff bb4a 	b.w	8005efe <_dtoa_r+0x2e>
 800686a:	692a      	ldr	r2, [r5, #16]
 800686c:	3202      	adds	r2, #2
 800686e:	0092      	lsls	r2, r2, #2
 8006870:	f105 010c 	add.w	r1, r5, #12
 8006874:	300c      	adds	r0, #12
 8006876:	f7ff fa94 	bl	8005da2 <memcpy>
 800687a:	2201      	movs	r2, #1
 800687c:	4631      	mov	r1, r6
 800687e:	4648      	mov	r0, r9
 8006880:	f000 fbfc 	bl	800707c <__lshift>
 8006884:	f10a 0301 	add.w	r3, sl, #1
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	eb0a 030b 	add.w	r3, sl, fp
 800688e:	9308      	str	r3, [sp, #32]
 8006890:	9b04      	ldr	r3, [sp, #16]
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	462f      	mov	r7, r5
 8006898:	9306      	str	r3, [sp, #24]
 800689a:	4605      	mov	r5, r0
 800689c:	9b00      	ldr	r3, [sp, #0]
 800689e:	9802      	ldr	r0, [sp, #8]
 80068a0:	4621      	mov	r1, r4
 80068a2:	f103 3bff 	add.w	fp, r3, #4294967295
 80068a6:	f7ff fa8a 	bl	8005dbe <quorem>
 80068aa:	4603      	mov	r3, r0
 80068ac:	3330      	adds	r3, #48	@ 0x30
 80068ae:	9003      	str	r0, [sp, #12]
 80068b0:	4639      	mov	r1, r7
 80068b2:	9802      	ldr	r0, [sp, #8]
 80068b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80068b6:	f000 fc4d 	bl	8007154 <__mcmp>
 80068ba:	462a      	mov	r2, r5
 80068bc:	9004      	str	r0, [sp, #16]
 80068be:	4621      	mov	r1, r4
 80068c0:	4648      	mov	r0, r9
 80068c2:	f000 fc63 	bl	800718c <__mdiff>
 80068c6:	68c2      	ldr	r2, [r0, #12]
 80068c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ca:	4606      	mov	r6, r0
 80068cc:	bb02      	cbnz	r2, 8006910 <_dtoa_r+0xa40>
 80068ce:	4601      	mov	r1, r0
 80068d0:	9802      	ldr	r0, [sp, #8]
 80068d2:	f000 fc3f 	bl	8007154 <__mcmp>
 80068d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068d8:	4602      	mov	r2, r0
 80068da:	4631      	mov	r1, r6
 80068dc:	4648      	mov	r0, r9
 80068de:	920c      	str	r2, [sp, #48]	@ 0x30
 80068e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80068e2:	f000 fa05 	bl	8006cf0 <_Bfree>
 80068e6:	9b07      	ldr	r3, [sp, #28]
 80068e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80068ea:	9e00      	ldr	r6, [sp, #0]
 80068ec:	ea42 0103 	orr.w	r1, r2, r3
 80068f0:	9b06      	ldr	r3, [sp, #24]
 80068f2:	4319      	orrs	r1, r3
 80068f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f6:	d10d      	bne.n	8006914 <_dtoa_r+0xa44>
 80068f8:	2b39      	cmp	r3, #57	@ 0x39
 80068fa:	d027      	beq.n	800694c <_dtoa_r+0xa7c>
 80068fc:	9a04      	ldr	r2, [sp, #16]
 80068fe:	2a00      	cmp	r2, #0
 8006900:	dd01      	ble.n	8006906 <_dtoa_r+0xa36>
 8006902:	9b03      	ldr	r3, [sp, #12]
 8006904:	3331      	adds	r3, #49	@ 0x31
 8006906:	f88b 3000 	strb.w	r3, [fp]
 800690a:	e52e      	b.n	800636a <_dtoa_r+0x49a>
 800690c:	4628      	mov	r0, r5
 800690e:	e7b9      	b.n	8006884 <_dtoa_r+0x9b4>
 8006910:	2201      	movs	r2, #1
 8006912:	e7e2      	b.n	80068da <_dtoa_r+0xa0a>
 8006914:	9904      	ldr	r1, [sp, #16]
 8006916:	2900      	cmp	r1, #0
 8006918:	db04      	blt.n	8006924 <_dtoa_r+0xa54>
 800691a:	9807      	ldr	r0, [sp, #28]
 800691c:	4301      	orrs	r1, r0
 800691e:	9806      	ldr	r0, [sp, #24]
 8006920:	4301      	orrs	r1, r0
 8006922:	d120      	bne.n	8006966 <_dtoa_r+0xa96>
 8006924:	2a00      	cmp	r2, #0
 8006926:	ddee      	ble.n	8006906 <_dtoa_r+0xa36>
 8006928:	9902      	ldr	r1, [sp, #8]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	2201      	movs	r2, #1
 800692e:	4648      	mov	r0, r9
 8006930:	f000 fba4 	bl	800707c <__lshift>
 8006934:	4621      	mov	r1, r4
 8006936:	9002      	str	r0, [sp, #8]
 8006938:	f000 fc0c 	bl	8007154 <__mcmp>
 800693c:	2800      	cmp	r0, #0
 800693e:	9b00      	ldr	r3, [sp, #0]
 8006940:	dc02      	bgt.n	8006948 <_dtoa_r+0xa78>
 8006942:	d1e0      	bne.n	8006906 <_dtoa_r+0xa36>
 8006944:	07da      	lsls	r2, r3, #31
 8006946:	d5de      	bpl.n	8006906 <_dtoa_r+0xa36>
 8006948:	2b39      	cmp	r3, #57	@ 0x39
 800694a:	d1da      	bne.n	8006902 <_dtoa_r+0xa32>
 800694c:	2339      	movs	r3, #57	@ 0x39
 800694e:	f88b 3000 	strb.w	r3, [fp]
 8006952:	4633      	mov	r3, r6
 8006954:	461e      	mov	r6, r3
 8006956:	3b01      	subs	r3, #1
 8006958:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800695c:	2a39      	cmp	r2, #57	@ 0x39
 800695e:	d04e      	beq.n	80069fe <_dtoa_r+0xb2e>
 8006960:	3201      	adds	r2, #1
 8006962:	701a      	strb	r2, [r3, #0]
 8006964:	e501      	b.n	800636a <_dtoa_r+0x49a>
 8006966:	2a00      	cmp	r2, #0
 8006968:	dd03      	ble.n	8006972 <_dtoa_r+0xaa2>
 800696a:	2b39      	cmp	r3, #57	@ 0x39
 800696c:	d0ee      	beq.n	800694c <_dtoa_r+0xa7c>
 800696e:	3301      	adds	r3, #1
 8006970:	e7c9      	b.n	8006906 <_dtoa_r+0xa36>
 8006972:	9a00      	ldr	r2, [sp, #0]
 8006974:	9908      	ldr	r1, [sp, #32]
 8006976:	f802 3c01 	strb.w	r3, [r2, #-1]
 800697a:	428a      	cmp	r2, r1
 800697c:	d028      	beq.n	80069d0 <_dtoa_r+0xb00>
 800697e:	9902      	ldr	r1, [sp, #8]
 8006980:	2300      	movs	r3, #0
 8006982:	220a      	movs	r2, #10
 8006984:	4648      	mov	r0, r9
 8006986:	f000 f9d5 	bl	8006d34 <__multadd>
 800698a:	42af      	cmp	r7, r5
 800698c:	9002      	str	r0, [sp, #8]
 800698e:	f04f 0300 	mov.w	r3, #0
 8006992:	f04f 020a 	mov.w	r2, #10
 8006996:	4639      	mov	r1, r7
 8006998:	4648      	mov	r0, r9
 800699a:	d107      	bne.n	80069ac <_dtoa_r+0xadc>
 800699c:	f000 f9ca 	bl	8006d34 <__multadd>
 80069a0:	4607      	mov	r7, r0
 80069a2:	4605      	mov	r5, r0
 80069a4:	9b00      	ldr	r3, [sp, #0]
 80069a6:	3301      	adds	r3, #1
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	e777      	b.n	800689c <_dtoa_r+0x9cc>
 80069ac:	f000 f9c2 	bl	8006d34 <__multadd>
 80069b0:	4629      	mov	r1, r5
 80069b2:	4607      	mov	r7, r0
 80069b4:	2300      	movs	r3, #0
 80069b6:	220a      	movs	r2, #10
 80069b8:	4648      	mov	r0, r9
 80069ba:	f000 f9bb 	bl	8006d34 <__multadd>
 80069be:	4605      	mov	r5, r0
 80069c0:	e7f0      	b.n	80069a4 <_dtoa_r+0xad4>
 80069c2:	f1bb 0f00 	cmp.w	fp, #0
 80069c6:	bfcc      	ite	gt
 80069c8:	465e      	movgt	r6, fp
 80069ca:	2601      	movle	r6, #1
 80069cc:	4456      	add	r6, sl
 80069ce:	2700      	movs	r7, #0
 80069d0:	9902      	ldr	r1, [sp, #8]
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	2201      	movs	r2, #1
 80069d6:	4648      	mov	r0, r9
 80069d8:	f000 fb50 	bl	800707c <__lshift>
 80069dc:	4621      	mov	r1, r4
 80069de:	9002      	str	r0, [sp, #8]
 80069e0:	f000 fbb8 	bl	8007154 <__mcmp>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	dcb4      	bgt.n	8006952 <_dtoa_r+0xa82>
 80069e8:	d102      	bne.n	80069f0 <_dtoa_r+0xb20>
 80069ea:	9b00      	ldr	r3, [sp, #0]
 80069ec:	07db      	lsls	r3, r3, #31
 80069ee:	d4b0      	bmi.n	8006952 <_dtoa_r+0xa82>
 80069f0:	4633      	mov	r3, r6
 80069f2:	461e      	mov	r6, r3
 80069f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069f8:	2a30      	cmp	r2, #48	@ 0x30
 80069fa:	d0fa      	beq.n	80069f2 <_dtoa_r+0xb22>
 80069fc:	e4b5      	b.n	800636a <_dtoa_r+0x49a>
 80069fe:	459a      	cmp	sl, r3
 8006a00:	d1a8      	bne.n	8006954 <_dtoa_r+0xa84>
 8006a02:	2331      	movs	r3, #49	@ 0x31
 8006a04:	f108 0801 	add.w	r8, r8, #1
 8006a08:	f88a 3000 	strb.w	r3, [sl]
 8006a0c:	e4ad      	b.n	800636a <_dtoa_r+0x49a>
 8006a0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a10:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006a6c <_dtoa_r+0xb9c>
 8006a14:	b11b      	cbz	r3, 8006a1e <_dtoa_r+0xb4e>
 8006a16:	f10a 0308 	add.w	r3, sl, #8
 8006a1a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	4650      	mov	r0, sl
 8006a20:	b017      	add	sp, #92	@ 0x5c
 8006a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a26:	9b07      	ldr	r3, [sp, #28]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	f77f ae2e 	ble.w	800668a <_dtoa_r+0x7ba>
 8006a2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a30:	9308      	str	r3, [sp, #32]
 8006a32:	2001      	movs	r0, #1
 8006a34:	e64d      	b.n	80066d2 <_dtoa_r+0x802>
 8006a36:	f1bb 0f00 	cmp.w	fp, #0
 8006a3a:	f77f aed9 	ble.w	80067f0 <_dtoa_r+0x920>
 8006a3e:	4656      	mov	r6, sl
 8006a40:	9802      	ldr	r0, [sp, #8]
 8006a42:	4621      	mov	r1, r4
 8006a44:	f7ff f9bb 	bl	8005dbe <quorem>
 8006a48:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006a4c:	f806 3b01 	strb.w	r3, [r6], #1
 8006a50:	eba6 020a 	sub.w	r2, r6, sl
 8006a54:	4593      	cmp	fp, r2
 8006a56:	ddb4      	ble.n	80069c2 <_dtoa_r+0xaf2>
 8006a58:	9902      	ldr	r1, [sp, #8]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	220a      	movs	r2, #10
 8006a5e:	4648      	mov	r0, r9
 8006a60:	f000 f968 	bl	8006d34 <__multadd>
 8006a64:	9002      	str	r0, [sp, #8]
 8006a66:	e7eb      	b.n	8006a40 <_dtoa_r+0xb70>
 8006a68:	08008605 	.word	0x08008605
 8006a6c:	08008589 	.word	0x08008589

08006a70 <_free_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4605      	mov	r5, r0
 8006a74:	2900      	cmp	r1, #0
 8006a76:	d041      	beq.n	8006afc <_free_r+0x8c>
 8006a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a7c:	1f0c      	subs	r4, r1, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	bfb8      	it	lt
 8006a82:	18e4      	addlt	r4, r4, r3
 8006a84:	f000 f8e8 	bl	8006c58 <__malloc_lock>
 8006a88:	4a1d      	ldr	r2, [pc, #116]	@ (8006b00 <_free_r+0x90>)
 8006a8a:	6813      	ldr	r3, [r2, #0]
 8006a8c:	b933      	cbnz	r3, 8006a9c <_free_r+0x2c>
 8006a8e:	6063      	str	r3, [r4, #4]
 8006a90:	6014      	str	r4, [r2, #0]
 8006a92:	4628      	mov	r0, r5
 8006a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a98:	f000 b8e4 	b.w	8006c64 <__malloc_unlock>
 8006a9c:	42a3      	cmp	r3, r4
 8006a9e:	d908      	bls.n	8006ab2 <_free_r+0x42>
 8006aa0:	6820      	ldr	r0, [r4, #0]
 8006aa2:	1821      	adds	r1, r4, r0
 8006aa4:	428b      	cmp	r3, r1
 8006aa6:	bf01      	itttt	eq
 8006aa8:	6819      	ldreq	r1, [r3, #0]
 8006aaa:	685b      	ldreq	r3, [r3, #4]
 8006aac:	1809      	addeq	r1, r1, r0
 8006aae:	6021      	streq	r1, [r4, #0]
 8006ab0:	e7ed      	b.n	8006a8e <_free_r+0x1e>
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	b10b      	cbz	r3, 8006abc <_free_r+0x4c>
 8006ab8:	42a3      	cmp	r3, r4
 8006aba:	d9fa      	bls.n	8006ab2 <_free_r+0x42>
 8006abc:	6811      	ldr	r1, [r2, #0]
 8006abe:	1850      	adds	r0, r2, r1
 8006ac0:	42a0      	cmp	r0, r4
 8006ac2:	d10b      	bne.n	8006adc <_free_r+0x6c>
 8006ac4:	6820      	ldr	r0, [r4, #0]
 8006ac6:	4401      	add	r1, r0
 8006ac8:	1850      	adds	r0, r2, r1
 8006aca:	4283      	cmp	r3, r0
 8006acc:	6011      	str	r1, [r2, #0]
 8006ace:	d1e0      	bne.n	8006a92 <_free_r+0x22>
 8006ad0:	6818      	ldr	r0, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	6053      	str	r3, [r2, #4]
 8006ad6:	4408      	add	r0, r1
 8006ad8:	6010      	str	r0, [r2, #0]
 8006ada:	e7da      	b.n	8006a92 <_free_r+0x22>
 8006adc:	d902      	bls.n	8006ae4 <_free_r+0x74>
 8006ade:	230c      	movs	r3, #12
 8006ae0:	602b      	str	r3, [r5, #0]
 8006ae2:	e7d6      	b.n	8006a92 <_free_r+0x22>
 8006ae4:	6820      	ldr	r0, [r4, #0]
 8006ae6:	1821      	adds	r1, r4, r0
 8006ae8:	428b      	cmp	r3, r1
 8006aea:	bf04      	itt	eq
 8006aec:	6819      	ldreq	r1, [r3, #0]
 8006aee:	685b      	ldreq	r3, [r3, #4]
 8006af0:	6063      	str	r3, [r4, #4]
 8006af2:	bf04      	itt	eq
 8006af4:	1809      	addeq	r1, r1, r0
 8006af6:	6021      	streq	r1, [r4, #0]
 8006af8:	6054      	str	r4, [r2, #4]
 8006afa:	e7ca      	b.n	8006a92 <_free_r+0x22>
 8006afc:	bd38      	pop	{r3, r4, r5, pc}
 8006afe:	bf00      	nop
 8006b00:	200008b4 	.word	0x200008b4

08006b04 <malloc>:
 8006b04:	4b02      	ldr	r3, [pc, #8]	@ (8006b10 <malloc+0xc>)
 8006b06:	4601      	mov	r1, r0
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	f000 b825 	b.w	8006b58 <_malloc_r>
 8006b0e:	bf00      	nop
 8006b10:	20000130 	.word	0x20000130

08006b14 <sbrk_aligned>:
 8006b14:	b570      	push	{r4, r5, r6, lr}
 8006b16:	4e0f      	ldr	r6, [pc, #60]	@ (8006b54 <sbrk_aligned+0x40>)
 8006b18:	460c      	mov	r4, r1
 8006b1a:	6831      	ldr	r1, [r6, #0]
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	b911      	cbnz	r1, 8006b26 <sbrk_aligned+0x12>
 8006b20:	f000 fe3e 	bl	80077a0 <_sbrk_r>
 8006b24:	6030      	str	r0, [r6, #0]
 8006b26:	4621      	mov	r1, r4
 8006b28:	4628      	mov	r0, r5
 8006b2a:	f000 fe39 	bl	80077a0 <_sbrk_r>
 8006b2e:	1c43      	adds	r3, r0, #1
 8006b30:	d103      	bne.n	8006b3a <sbrk_aligned+0x26>
 8006b32:	f04f 34ff 	mov.w	r4, #4294967295
 8006b36:	4620      	mov	r0, r4
 8006b38:	bd70      	pop	{r4, r5, r6, pc}
 8006b3a:	1cc4      	adds	r4, r0, #3
 8006b3c:	f024 0403 	bic.w	r4, r4, #3
 8006b40:	42a0      	cmp	r0, r4
 8006b42:	d0f8      	beq.n	8006b36 <sbrk_aligned+0x22>
 8006b44:	1a21      	subs	r1, r4, r0
 8006b46:	4628      	mov	r0, r5
 8006b48:	f000 fe2a 	bl	80077a0 <_sbrk_r>
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d1f2      	bne.n	8006b36 <sbrk_aligned+0x22>
 8006b50:	e7ef      	b.n	8006b32 <sbrk_aligned+0x1e>
 8006b52:	bf00      	nop
 8006b54:	200008b0 	.word	0x200008b0

08006b58 <_malloc_r>:
 8006b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b5c:	1ccd      	adds	r5, r1, #3
 8006b5e:	f025 0503 	bic.w	r5, r5, #3
 8006b62:	3508      	adds	r5, #8
 8006b64:	2d0c      	cmp	r5, #12
 8006b66:	bf38      	it	cc
 8006b68:	250c      	movcc	r5, #12
 8006b6a:	2d00      	cmp	r5, #0
 8006b6c:	4606      	mov	r6, r0
 8006b6e:	db01      	blt.n	8006b74 <_malloc_r+0x1c>
 8006b70:	42a9      	cmp	r1, r5
 8006b72:	d904      	bls.n	8006b7e <_malloc_r+0x26>
 8006b74:	230c      	movs	r3, #12
 8006b76:	6033      	str	r3, [r6, #0]
 8006b78:	2000      	movs	r0, #0
 8006b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c54 <_malloc_r+0xfc>
 8006b82:	f000 f869 	bl	8006c58 <__malloc_lock>
 8006b86:	f8d8 3000 	ldr.w	r3, [r8]
 8006b8a:	461c      	mov	r4, r3
 8006b8c:	bb44      	cbnz	r4, 8006be0 <_malloc_r+0x88>
 8006b8e:	4629      	mov	r1, r5
 8006b90:	4630      	mov	r0, r6
 8006b92:	f7ff ffbf 	bl	8006b14 <sbrk_aligned>
 8006b96:	1c43      	adds	r3, r0, #1
 8006b98:	4604      	mov	r4, r0
 8006b9a:	d158      	bne.n	8006c4e <_malloc_r+0xf6>
 8006b9c:	f8d8 4000 	ldr.w	r4, [r8]
 8006ba0:	4627      	mov	r7, r4
 8006ba2:	2f00      	cmp	r7, #0
 8006ba4:	d143      	bne.n	8006c2e <_malloc_r+0xd6>
 8006ba6:	2c00      	cmp	r4, #0
 8006ba8:	d04b      	beq.n	8006c42 <_malloc_r+0xea>
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	4639      	mov	r1, r7
 8006bae:	4630      	mov	r0, r6
 8006bb0:	eb04 0903 	add.w	r9, r4, r3
 8006bb4:	f000 fdf4 	bl	80077a0 <_sbrk_r>
 8006bb8:	4581      	cmp	r9, r0
 8006bba:	d142      	bne.n	8006c42 <_malloc_r+0xea>
 8006bbc:	6821      	ldr	r1, [r4, #0]
 8006bbe:	1a6d      	subs	r5, r5, r1
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	f7ff ffa6 	bl	8006b14 <sbrk_aligned>
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d03a      	beq.n	8006c42 <_malloc_r+0xea>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	442b      	add	r3, r5
 8006bd0:	6023      	str	r3, [r4, #0]
 8006bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	bb62      	cbnz	r2, 8006c34 <_malloc_r+0xdc>
 8006bda:	f8c8 7000 	str.w	r7, [r8]
 8006bde:	e00f      	b.n	8006c00 <_malloc_r+0xa8>
 8006be0:	6822      	ldr	r2, [r4, #0]
 8006be2:	1b52      	subs	r2, r2, r5
 8006be4:	d420      	bmi.n	8006c28 <_malloc_r+0xd0>
 8006be6:	2a0b      	cmp	r2, #11
 8006be8:	d917      	bls.n	8006c1a <_malloc_r+0xc2>
 8006bea:	1961      	adds	r1, r4, r5
 8006bec:	42a3      	cmp	r3, r4
 8006bee:	6025      	str	r5, [r4, #0]
 8006bf0:	bf18      	it	ne
 8006bf2:	6059      	strne	r1, [r3, #4]
 8006bf4:	6863      	ldr	r3, [r4, #4]
 8006bf6:	bf08      	it	eq
 8006bf8:	f8c8 1000 	streq.w	r1, [r8]
 8006bfc:	5162      	str	r2, [r4, r5]
 8006bfe:	604b      	str	r3, [r1, #4]
 8006c00:	4630      	mov	r0, r6
 8006c02:	f000 f82f 	bl	8006c64 <__malloc_unlock>
 8006c06:	f104 000b 	add.w	r0, r4, #11
 8006c0a:	1d23      	adds	r3, r4, #4
 8006c0c:	f020 0007 	bic.w	r0, r0, #7
 8006c10:	1ac2      	subs	r2, r0, r3
 8006c12:	bf1c      	itt	ne
 8006c14:	1a1b      	subne	r3, r3, r0
 8006c16:	50a3      	strne	r3, [r4, r2]
 8006c18:	e7af      	b.n	8006b7a <_malloc_r+0x22>
 8006c1a:	6862      	ldr	r2, [r4, #4]
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	bf0c      	ite	eq
 8006c20:	f8c8 2000 	streq.w	r2, [r8]
 8006c24:	605a      	strne	r2, [r3, #4]
 8006c26:	e7eb      	b.n	8006c00 <_malloc_r+0xa8>
 8006c28:	4623      	mov	r3, r4
 8006c2a:	6864      	ldr	r4, [r4, #4]
 8006c2c:	e7ae      	b.n	8006b8c <_malloc_r+0x34>
 8006c2e:	463c      	mov	r4, r7
 8006c30:	687f      	ldr	r7, [r7, #4]
 8006c32:	e7b6      	b.n	8006ba2 <_malloc_r+0x4a>
 8006c34:	461a      	mov	r2, r3
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	42a3      	cmp	r3, r4
 8006c3a:	d1fb      	bne.n	8006c34 <_malloc_r+0xdc>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	6053      	str	r3, [r2, #4]
 8006c40:	e7de      	b.n	8006c00 <_malloc_r+0xa8>
 8006c42:	230c      	movs	r3, #12
 8006c44:	6033      	str	r3, [r6, #0]
 8006c46:	4630      	mov	r0, r6
 8006c48:	f000 f80c 	bl	8006c64 <__malloc_unlock>
 8006c4c:	e794      	b.n	8006b78 <_malloc_r+0x20>
 8006c4e:	6005      	str	r5, [r0, #0]
 8006c50:	e7d6      	b.n	8006c00 <_malloc_r+0xa8>
 8006c52:	bf00      	nop
 8006c54:	200008b4 	.word	0x200008b4

08006c58 <__malloc_lock>:
 8006c58:	4801      	ldr	r0, [pc, #4]	@ (8006c60 <__malloc_lock+0x8>)
 8006c5a:	f7ff b8a0 	b.w	8005d9e <__retarget_lock_acquire_recursive>
 8006c5e:	bf00      	nop
 8006c60:	200008ac 	.word	0x200008ac

08006c64 <__malloc_unlock>:
 8006c64:	4801      	ldr	r0, [pc, #4]	@ (8006c6c <__malloc_unlock+0x8>)
 8006c66:	f7ff b89b 	b.w	8005da0 <__retarget_lock_release_recursive>
 8006c6a:	bf00      	nop
 8006c6c:	200008ac 	.word	0x200008ac

08006c70 <_Balloc>:
 8006c70:	b570      	push	{r4, r5, r6, lr}
 8006c72:	69c6      	ldr	r6, [r0, #28]
 8006c74:	4604      	mov	r4, r0
 8006c76:	460d      	mov	r5, r1
 8006c78:	b976      	cbnz	r6, 8006c98 <_Balloc+0x28>
 8006c7a:	2010      	movs	r0, #16
 8006c7c:	f7ff ff42 	bl	8006b04 <malloc>
 8006c80:	4602      	mov	r2, r0
 8006c82:	61e0      	str	r0, [r4, #28]
 8006c84:	b920      	cbnz	r0, 8006c90 <_Balloc+0x20>
 8006c86:	4b18      	ldr	r3, [pc, #96]	@ (8006ce8 <_Balloc+0x78>)
 8006c88:	4818      	ldr	r0, [pc, #96]	@ (8006cec <_Balloc+0x7c>)
 8006c8a:	216b      	movs	r1, #107	@ 0x6b
 8006c8c:	f000 fd98 	bl	80077c0 <__assert_func>
 8006c90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c94:	6006      	str	r6, [r0, #0]
 8006c96:	60c6      	str	r6, [r0, #12]
 8006c98:	69e6      	ldr	r6, [r4, #28]
 8006c9a:	68f3      	ldr	r3, [r6, #12]
 8006c9c:	b183      	cbz	r3, 8006cc0 <_Balloc+0x50>
 8006c9e:	69e3      	ldr	r3, [r4, #28]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ca6:	b9b8      	cbnz	r0, 8006cd8 <_Balloc+0x68>
 8006ca8:	2101      	movs	r1, #1
 8006caa:	fa01 f605 	lsl.w	r6, r1, r5
 8006cae:	1d72      	adds	r2, r6, #5
 8006cb0:	0092      	lsls	r2, r2, #2
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 fda2 	bl	80077fc <_calloc_r>
 8006cb8:	b160      	cbz	r0, 8006cd4 <_Balloc+0x64>
 8006cba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006cbe:	e00e      	b.n	8006cde <_Balloc+0x6e>
 8006cc0:	2221      	movs	r2, #33	@ 0x21
 8006cc2:	2104      	movs	r1, #4
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f000 fd99 	bl	80077fc <_calloc_r>
 8006cca:	69e3      	ldr	r3, [r4, #28]
 8006ccc:	60f0      	str	r0, [r6, #12]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1e4      	bne.n	8006c9e <_Balloc+0x2e>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	bd70      	pop	{r4, r5, r6, pc}
 8006cd8:	6802      	ldr	r2, [r0, #0]
 8006cda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ce4:	e7f7      	b.n	8006cd6 <_Balloc+0x66>
 8006ce6:	bf00      	nop
 8006ce8:	08008596 	.word	0x08008596
 8006cec:	08008616 	.word	0x08008616

08006cf0 <_Bfree>:
 8006cf0:	b570      	push	{r4, r5, r6, lr}
 8006cf2:	69c6      	ldr	r6, [r0, #28]
 8006cf4:	4605      	mov	r5, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	b976      	cbnz	r6, 8006d18 <_Bfree+0x28>
 8006cfa:	2010      	movs	r0, #16
 8006cfc:	f7ff ff02 	bl	8006b04 <malloc>
 8006d00:	4602      	mov	r2, r0
 8006d02:	61e8      	str	r0, [r5, #28]
 8006d04:	b920      	cbnz	r0, 8006d10 <_Bfree+0x20>
 8006d06:	4b09      	ldr	r3, [pc, #36]	@ (8006d2c <_Bfree+0x3c>)
 8006d08:	4809      	ldr	r0, [pc, #36]	@ (8006d30 <_Bfree+0x40>)
 8006d0a:	218f      	movs	r1, #143	@ 0x8f
 8006d0c:	f000 fd58 	bl	80077c0 <__assert_func>
 8006d10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d14:	6006      	str	r6, [r0, #0]
 8006d16:	60c6      	str	r6, [r0, #12]
 8006d18:	b13c      	cbz	r4, 8006d2a <_Bfree+0x3a>
 8006d1a:	69eb      	ldr	r3, [r5, #28]
 8006d1c:	6862      	ldr	r2, [r4, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d24:	6021      	str	r1, [r4, #0]
 8006d26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	08008596 	.word	0x08008596
 8006d30:	08008616 	.word	0x08008616

08006d34 <__multadd>:
 8006d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d38:	690d      	ldr	r5, [r1, #16]
 8006d3a:	4607      	mov	r7, r0
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	461e      	mov	r6, r3
 8006d40:	f101 0c14 	add.w	ip, r1, #20
 8006d44:	2000      	movs	r0, #0
 8006d46:	f8dc 3000 	ldr.w	r3, [ip]
 8006d4a:	b299      	uxth	r1, r3
 8006d4c:	fb02 6101 	mla	r1, r2, r1, r6
 8006d50:	0c1e      	lsrs	r6, r3, #16
 8006d52:	0c0b      	lsrs	r3, r1, #16
 8006d54:	fb02 3306 	mla	r3, r2, r6, r3
 8006d58:	b289      	uxth	r1, r1
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d60:	4285      	cmp	r5, r0
 8006d62:	f84c 1b04 	str.w	r1, [ip], #4
 8006d66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d6a:	dcec      	bgt.n	8006d46 <__multadd+0x12>
 8006d6c:	b30e      	cbz	r6, 8006db2 <__multadd+0x7e>
 8006d6e:	68a3      	ldr	r3, [r4, #8]
 8006d70:	42ab      	cmp	r3, r5
 8006d72:	dc19      	bgt.n	8006da8 <__multadd+0x74>
 8006d74:	6861      	ldr	r1, [r4, #4]
 8006d76:	4638      	mov	r0, r7
 8006d78:	3101      	adds	r1, #1
 8006d7a:	f7ff ff79 	bl	8006c70 <_Balloc>
 8006d7e:	4680      	mov	r8, r0
 8006d80:	b928      	cbnz	r0, 8006d8e <__multadd+0x5a>
 8006d82:	4602      	mov	r2, r0
 8006d84:	4b0c      	ldr	r3, [pc, #48]	@ (8006db8 <__multadd+0x84>)
 8006d86:	480d      	ldr	r0, [pc, #52]	@ (8006dbc <__multadd+0x88>)
 8006d88:	21ba      	movs	r1, #186	@ 0xba
 8006d8a:	f000 fd19 	bl	80077c0 <__assert_func>
 8006d8e:	6922      	ldr	r2, [r4, #16]
 8006d90:	3202      	adds	r2, #2
 8006d92:	f104 010c 	add.w	r1, r4, #12
 8006d96:	0092      	lsls	r2, r2, #2
 8006d98:	300c      	adds	r0, #12
 8006d9a:	f7ff f802 	bl	8005da2 <memcpy>
 8006d9e:	4621      	mov	r1, r4
 8006da0:	4638      	mov	r0, r7
 8006da2:	f7ff ffa5 	bl	8006cf0 <_Bfree>
 8006da6:	4644      	mov	r4, r8
 8006da8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006dac:	3501      	adds	r5, #1
 8006dae:	615e      	str	r6, [r3, #20]
 8006db0:	6125      	str	r5, [r4, #16]
 8006db2:	4620      	mov	r0, r4
 8006db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db8:	08008605 	.word	0x08008605
 8006dbc:	08008616 	.word	0x08008616

08006dc0 <__hi0bits>:
 8006dc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	bf36      	itet	cc
 8006dc8:	0403      	lslcc	r3, r0, #16
 8006dca:	2000      	movcs	r0, #0
 8006dcc:	2010      	movcc	r0, #16
 8006dce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dd2:	bf3c      	itt	cc
 8006dd4:	021b      	lslcc	r3, r3, #8
 8006dd6:	3008      	addcc	r0, #8
 8006dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ddc:	bf3c      	itt	cc
 8006dde:	011b      	lslcc	r3, r3, #4
 8006de0:	3004      	addcc	r0, #4
 8006de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006de6:	bf3c      	itt	cc
 8006de8:	009b      	lslcc	r3, r3, #2
 8006dea:	3002      	addcc	r0, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	db05      	blt.n	8006dfc <__hi0bits+0x3c>
 8006df0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006df4:	f100 0001 	add.w	r0, r0, #1
 8006df8:	bf08      	it	eq
 8006dfa:	2020      	moveq	r0, #32
 8006dfc:	4770      	bx	lr

08006dfe <__lo0bits>:
 8006dfe:	6803      	ldr	r3, [r0, #0]
 8006e00:	4602      	mov	r2, r0
 8006e02:	f013 0007 	ands.w	r0, r3, #7
 8006e06:	d00b      	beq.n	8006e20 <__lo0bits+0x22>
 8006e08:	07d9      	lsls	r1, r3, #31
 8006e0a:	d421      	bmi.n	8006e50 <__lo0bits+0x52>
 8006e0c:	0798      	lsls	r0, r3, #30
 8006e0e:	bf49      	itett	mi
 8006e10:	085b      	lsrmi	r3, r3, #1
 8006e12:	089b      	lsrpl	r3, r3, #2
 8006e14:	2001      	movmi	r0, #1
 8006e16:	6013      	strmi	r3, [r2, #0]
 8006e18:	bf5c      	itt	pl
 8006e1a:	6013      	strpl	r3, [r2, #0]
 8006e1c:	2002      	movpl	r0, #2
 8006e1e:	4770      	bx	lr
 8006e20:	b299      	uxth	r1, r3
 8006e22:	b909      	cbnz	r1, 8006e28 <__lo0bits+0x2a>
 8006e24:	0c1b      	lsrs	r3, r3, #16
 8006e26:	2010      	movs	r0, #16
 8006e28:	b2d9      	uxtb	r1, r3
 8006e2a:	b909      	cbnz	r1, 8006e30 <__lo0bits+0x32>
 8006e2c:	3008      	adds	r0, #8
 8006e2e:	0a1b      	lsrs	r3, r3, #8
 8006e30:	0719      	lsls	r1, r3, #28
 8006e32:	bf04      	itt	eq
 8006e34:	091b      	lsreq	r3, r3, #4
 8006e36:	3004      	addeq	r0, #4
 8006e38:	0799      	lsls	r1, r3, #30
 8006e3a:	bf04      	itt	eq
 8006e3c:	089b      	lsreq	r3, r3, #2
 8006e3e:	3002      	addeq	r0, #2
 8006e40:	07d9      	lsls	r1, r3, #31
 8006e42:	d403      	bmi.n	8006e4c <__lo0bits+0x4e>
 8006e44:	085b      	lsrs	r3, r3, #1
 8006e46:	f100 0001 	add.w	r0, r0, #1
 8006e4a:	d003      	beq.n	8006e54 <__lo0bits+0x56>
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	4770      	bx	lr
 8006e50:	2000      	movs	r0, #0
 8006e52:	4770      	bx	lr
 8006e54:	2020      	movs	r0, #32
 8006e56:	4770      	bx	lr

08006e58 <__i2b>:
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	f7ff ff07 	bl	8006c70 <_Balloc>
 8006e62:	4602      	mov	r2, r0
 8006e64:	b928      	cbnz	r0, 8006e72 <__i2b+0x1a>
 8006e66:	4b05      	ldr	r3, [pc, #20]	@ (8006e7c <__i2b+0x24>)
 8006e68:	4805      	ldr	r0, [pc, #20]	@ (8006e80 <__i2b+0x28>)
 8006e6a:	f240 1145 	movw	r1, #325	@ 0x145
 8006e6e:	f000 fca7 	bl	80077c0 <__assert_func>
 8006e72:	2301      	movs	r3, #1
 8006e74:	6144      	str	r4, [r0, #20]
 8006e76:	6103      	str	r3, [r0, #16]
 8006e78:	bd10      	pop	{r4, pc}
 8006e7a:	bf00      	nop
 8006e7c:	08008605 	.word	0x08008605
 8006e80:	08008616 	.word	0x08008616

08006e84 <__multiply>:
 8006e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e88:	4617      	mov	r7, r2
 8006e8a:	690a      	ldr	r2, [r1, #16]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	bfa8      	it	ge
 8006e92:	463b      	movge	r3, r7
 8006e94:	4689      	mov	r9, r1
 8006e96:	bfa4      	itt	ge
 8006e98:	460f      	movge	r7, r1
 8006e9a:	4699      	movge	r9, r3
 8006e9c:	693d      	ldr	r5, [r7, #16]
 8006e9e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6879      	ldr	r1, [r7, #4]
 8006ea6:	eb05 060a 	add.w	r6, r5, sl
 8006eaa:	42b3      	cmp	r3, r6
 8006eac:	b085      	sub	sp, #20
 8006eae:	bfb8      	it	lt
 8006eb0:	3101      	addlt	r1, #1
 8006eb2:	f7ff fedd 	bl	8006c70 <_Balloc>
 8006eb6:	b930      	cbnz	r0, 8006ec6 <__multiply+0x42>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	4b41      	ldr	r3, [pc, #260]	@ (8006fc0 <__multiply+0x13c>)
 8006ebc:	4841      	ldr	r0, [pc, #260]	@ (8006fc4 <__multiply+0x140>)
 8006ebe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006ec2:	f000 fc7d 	bl	80077c0 <__assert_func>
 8006ec6:	f100 0414 	add.w	r4, r0, #20
 8006eca:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006ece:	4623      	mov	r3, r4
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4573      	cmp	r3, lr
 8006ed4:	d320      	bcc.n	8006f18 <__multiply+0x94>
 8006ed6:	f107 0814 	add.w	r8, r7, #20
 8006eda:	f109 0114 	add.w	r1, r9, #20
 8006ede:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006ee2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006ee6:	9302      	str	r3, [sp, #8]
 8006ee8:	1beb      	subs	r3, r5, r7
 8006eea:	3b15      	subs	r3, #21
 8006eec:	f023 0303 	bic.w	r3, r3, #3
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	3715      	adds	r7, #21
 8006ef4:	42bd      	cmp	r5, r7
 8006ef6:	bf38      	it	cc
 8006ef8:	2304      	movcc	r3, #4
 8006efa:	9301      	str	r3, [sp, #4]
 8006efc:	9b02      	ldr	r3, [sp, #8]
 8006efe:	9103      	str	r1, [sp, #12]
 8006f00:	428b      	cmp	r3, r1
 8006f02:	d80c      	bhi.n	8006f1e <__multiply+0x9a>
 8006f04:	2e00      	cmp	r6, #0
 8006f06:	dd03      	ble.n	8006f10 <__multiply+0x8c>
 8006f08:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d055      	beq.n	8006fbc <__multiply+0x138>
 8006f10:	6106      	str	r6, [r0, #16]
 8006f12:	b005      	add	sp, #20
 8006f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f18:	f843 2b04 	str.w	r2, [r3], #4
 8006f1c:	e7d9      	b.n	8006ed2 <__multiply+0x4e>
 8006f1e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006f22:	f1ba 0f00 	cmp.w	sl, #0
 8006f26:	d01f      	beq.n	8006f68 <__multiply+0xe4>
 8006f28:	46c4      	mov	ip, r8
 8006f2a:	46a1      	mov	r9, r4
 8006f2c:	2700      	movs	r7, #0
 8006f2e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f32:	f8d9 3000 	ldr.w	r3, [r9]
 8006f36:	fa1f fb82 	uxth.w	fp, r2
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006f40:	443b      	add	r3, r7
 8006f42:	f8d9 7000 	ldr.w	r7, [r9]
 8006f46:	0c12      	lsrs	r2, r2, #16
 8006f48:	0c3f      	lsrs	r7, r7, #16
 8006f4a:	fb0a 7202 	mla	r2, sl, r2, r7
 8006f4e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f58:	4565      	cmp	r5, ip
 8006f5a:	f849 3b04 	str.w	r3, [r9], #4
 8006f5e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006f62:	d8e4      	bhi.n	8006f2e <__multiply+0xaa>
 8006f64:	9b01      	ldr	r3, [sp, #4]
 8006f66:	50e7      	str	r7, [r4, r3]
 8006f68:	9b03      	ldr	r3, [sp, #12]
 8006f6a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006f6e:	3104      	adds	r1, #4
 8006f70:	f1b9 0f00 	cmp.w	r9, #0
 8006f74:	d020      	beq.n	8006fb8 <__multiply+0x134>
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	4647      	mov	r7, r8
 8006f7a:	46a4      	mov	ip, r4
 8006f7c:	f04f 0a00 	mov.w	sl, #0
 8006f80:	f8b7 b000 	ldrh.w	fp, [r7]
 8006f84:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006f88:	fb09 220b 	mla	r2, r9, fp, r2
 8006f8c:	4452      	add	r2, sl
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f94:	f84c 3b04 	str.w	r3, [ip], #4
 8006f98:	f857 3b04 	ldr.w	r3, [r7], #4
 8006f9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fa0:	f8bc 3000 	ldrh.w	r3, [ip]
 8006fa4:	fb09 330a 	mla	r3, r9, sl, r3
 8006fa8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006fac:	42bd      	cmp	r5, r7
 8006fae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fb2:	d8e5      	bhi.n	8006f80 <__multiply+0xfc>
 8006fb4:	9a01      	ldr	r2, [sp, #4]
 8006fb6:	50a3      	str	r3, [r4, r2]
 8006fb8:	3404      	adds	r4, #4
 8006fba:	e79f      	b.n	8006efc <__multiply+0x78>
 8006fbc:	3e01      	subs	r6, #1
 8006fbe:	e7a1      	b.n	8006f04 <__multiply+0x80>
 8006fc0:	08008605 	.word	0x08008605
 8006fc4:	08008616 	.word	0x08008616

08006fc8 <__pow5mult>:
 8006fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fcc:	4615      	mov	r5, r2
 8006fce:	f012 0203 	ands.w	r2, r2, #3
 8006fd2:	4607      	mov	r7, r0
 8006fd4:	460e      	mov	r6, r1
 8006fd6:	d007      	beq.n	8006fe8 <__pow5mult+0x20>
 8006fd8:	4c25      	ldr	r4, [pc, #148]	@ (8007070 <__pow5mult+0xa8>)
 8006fda:	3a01      	subs	r2, #1
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fe2:	f7ff fea7 	bl	8006d34 <__multadd>
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	10ad      	asrs	r5, r5, #2
 8006fea:	d03d      	beq.n	8007068 <__pow5mult+0xa0>
 8006fec:	69fc      	ldr	r4, [r7, #28]
 8006fee:	b97c      	cbnz	r4, 8007010 <__pow5mult+0x48>
 8006ff0:	2010      	movs	r0, #16
 8006ff2:	f7ff fd87 	bl	8006b04 <malloc>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	61f8      	str	r0, [r7, #28]
 8006ffa:	b928      	cbnz	r0, 8007008 <__pow5mult+0x40>
 8006ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8007074 <__pow5mult+0xac>)
 8006ffe:	481e      	ldr	r0, [pc, #120]	@ (8007078 <__pow5mult+0xb0>)
 8007000:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007004:	f000 fbdc 	bl	80077c0 <__assert_func>
 8007008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800700c:	6004      	str	r4, [r0, #0]
 800700e:	60c4      	str	r4, [r0, #12]
 8007010:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007018:	b94c      	cbnz	r4, 800702e <__pow5mult+0x66>
 800701a:	f240 2171 	movw	r1, #625	@ 0x271
 800701e:	4638      	mov	r0, r7
 8007020:	f7ff ff1a 	bl	8006e58 <__i2b>
 8007024:	2300      	movs	r3, #0
 8007026:	f8c8 0008 	str.w	r0, [r8, #8]
 800702a:	4604      	mov	r4, r0
 800702c:	6003      	str	r3, [r0, #0]
 800702e:	f04f 0900 	mov.w	r9, #0
 8007032:	07eb      	lsls	r3, r5, #31
 8007034:	d50a      	bpl.n	800704c <__pow5mult+0x84>
 8007036:	4631      	mov	r1, r6
 8007038:	4622      	mov	r2, r4
 800703a:	4638      	mov	r0, r7
 800703c:	f7ff ff22 	bl	8006e84 <__multiply>
 8007040:	4631      	mov	r1, r6
 8007042:	4680      	mov	r8, r0
 8007044:	4638      	mov	r0, r7
 8007046:	f7ff fe53 	bl	8006cf0 <_Bfree>
 800704a:	4646      	mov	r6, r8
 800704c:	106d      	asrs	r5, r5, #1
 800704e:	d00b      	beq.n	8007068 <__pow5mult+0xa0>
 8007050:	6820      	ldr	r0, [r4, #0]
 8007052:	b938      	cbnz	r0, 8007064 <__pow5mult+0x9c>
 8007054:	4622      	mov	r2, r4
 8007056:	4621      	mov	r1, r4
 8007058:	4638      	mov	r0, r7
 800705a:	f7ff ff13 	bl	8006e84 <__multiply>
 800705e:	6020      	str	r0, [r4, #0]
 8007060:	f8c0 9000 	str.w	r9, [r0]
 8007064:	4604      	mov	r4, r0
 8007066:	e7e4      	b.n	8007032 <__pow5mult+0x6a>
 8007068:	4630      	mov	r0, r6
 800706a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800706e:	bf00      	nop
 8007070:	080086c8 	.word	0x080086c8
 8007074:	08008596 	.word	0x08008596
 8007078:	08008616 	.word	0x08008616

0800707c <__lshift>:
 800707c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007080:	460c      	mov	r4, r1
 8007082:	6849      	ldr	r1, [r1, #4]
 8007084:	6923      	ldr	r3, [r4, #16]
 8007086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800708a:	68a3      	ldr	r3, [r4, #8]
 800708c:	4607      	mov	r7, r0
 800708e:	4691      	mov	r9, r2
 8007090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007094:	f108 0601 	add.w	r6, r8, #1
 8007098:	42b3      	cmp	r3, r6
 800709a:	db0b      	blt.n	80070b4 <__lshift+0x38>
 800709c:	4638      	mov	r0, r7
 800709e:	f7ff fde7 	bl	8006c70 <_Balloc>
 80070a2:	4605      	mov	r5, r0
 80070a4:	b948      	cbnz	r0, 80070ba <__lshift+0x3e>
 80070a6:	4602      	mov	r2, r0
 80070a8:	4b28      	ldr	r3, [pc, #160]	@ (800714c <__lshift+0xd0>)
 80070aa:	4829      	ldr	r0, [pc, #164]	@ (8007150 <__lshift+0xd4>)
 80070ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80070b0:	f000 fb86 	bl	80077c0 <__assert_func>
 80070b4:	3101      	adds	r1, #1
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	e7ee      	b.n	8007098 <__lshift+0x1c>
 80070ba:	2300      	movs	r3, #0
 80070bc:	f100 0114 	add.w	r1, r0, #20
 80070c0:	f100 0210 	add.w	r2, r0, #16
 80070c4:	4618      	mov	r0, r3
 80070c6:	4553      	cmp	r3, sl
 80070c8:	db33      	blt.n	8007132 <__lshift+0xb6>
 80070ca:	6920      	ldr	r0, [r4, #16]
 80070cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070d0:	f104 0314 	add.w	r3, r4, #20
 80070d4:	f019 091f 	ands.w	r9, r9, #31
 80070d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070e0:	d02b      	beq.n	800713a <__lshift+0xbe>
 80070e2:	f1c9 0e20 	rsb	lr, r9, #32
 80070e6:	468a      	mov	sl, r1
 80070e8:	2200      	movs	r2, #0
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	fa00 f009 	lsl.w	r0, r0, r9
 80070f0:	4310      	orrs	r0, r2
 80070f2:	f84a 0b04 	str.w	r0, [sl], #4
 80070f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80070fa:	459c      	cmp	ip, r3
 80070fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007100:	d8f3      	bhi.n	80070ea <__lshift+0x6e>
 8007102:	ebac 0304 	sub.w	r3, ip, r4
 8007106:	3b15      	subs	r3, #21
 8007108:	f023 0303 	bic.w	r3, r3, #3
 800710c:	3304      	adds	r3, #4
 800710e:	f104 0015 	add.w	r0, r4, #21
 8007112:	4560      	cmp	r0, ip
 8007114:	bf88      	it	hi
 8007116:	2304      	movhi	r3, #4
 8007118:	50ca      	str	r2, [r1, r3]
 800711a:	b10a      	cbz	r2, 8007120 <__lshift+0xa4>
 800711c:	f108 0602 	add.w	r6, r8, #2
 8007120:	3e01      	subs	r6, #1
 8007122:	4638      	mov	r0, r7
 8007124:	612e      	str	r6, [r5, #16]
 8007126:	4621      	mov	r1, r4
 8007128:	f7ff fde2 	bl	8006cf0 <_Bfree>
 800712c:	4628      	mov	r0, r5
 800712e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007132:	f842 0f04 	str.w	r0, [r2, #4]!
 8007136:	3301      	adds	r3, #1
 8007138:	e7c5      	b.n	80070c6 <__lshift+0x4a>
 800713a:	3904      	subs	r1, #4
 800713c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007140:	f841 2f04 	str.w	r2, [r1, #4]!
 8007144:	459c      	cmp	ip, r3
 8007146:	d8f9      	bhi.n	800713c <__lshift+0xc0>
 8007148:	e7ea      	b.n	8007120 <__lshift+0xa4>
 800714a:	bf00      	nop
 800714c:	08008605 	.word	0x08008605
 8007150:	08008616 	.word	0x08008616

08007154 <__mcmp>:
 8007154:	690a      	ldr	r2, [r1, #16]
 8007156:	4603      	mov	r3, r0
 8007158:	6900      	ldr	r0, [r0, #16]
 800715a:	1a80      	subs	r0, r0, r2
 800715c:	b530      	push	{r4, r5, lr}
 800715e:	d10e      	bne.n	800717e <__mcmp+0x2a>
 8007160:	3314      	adds	r3, #20
 8007162:	3114      	adds	r1, #20
 8007164:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007168:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800716c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007170:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007174:	4295      	cmp	r5, r2
 8007176:	d003      	beq.n	8007180 <__mcmp+0x2c>
 8007178:	d205      	bcs.n	8007186 <__mcmp+0x32>
 800717a:	f04f 30ff 	mov.w	r0, #4294967295
 800717e:	bd30      	pop	{r4, r5, pc}
 8007180:	42a3      	cmp	r3, r4
 8007182:	d3f3      	bcc.n	800716c <__mcmp+0x18>
 8007184:	e7fb      	b.n	800717e <__mcmp+0x2a>
 8007186:	2001      	movs	r0, #1
 8007188:	e7f9      	b.n	800717e <__mcmp+0x2a>
	...

0800718c <__mdiff>:
 800718c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	4689      	mov	r9, r1
 8007192:	4606      	mov	r6, r0
 8007194:	4611      	mov	r1, r2
 8007196:	4648      	mov	r0, r9
 8007198:	4614      	mov	r4, r2
 800719a:	f7ff ffdb 	bl	8007154 <__mcmp>
 800719e:	1e05      	subs	r5, r0, #0
 80071a0:	d112      	bne.n	80071c8 <__mdiff+0x3c>
 80071a2:	4629      	mov	r1, r5
 80071a4:	4630      	mov	r0, r6
 80071a6:	f7ff fd63 	bl	8006c70 <_Balloc>
 80071aa:	4602      	mov	r2, r0
 80071ac:	b928      	cbnz	r0, 80071ba <__mdiff+0x2e>
 80071ae:	4b3f      	ldr	r3, [pc, #252]	@ (80072ac <__mdiff+0x120>)
 80071b0:	f240 2137 	movw	r1, #567	@ 0x237
 80071b4:	483e      	ldr	r0, [pc, #248]	@ (80072b0 <__mdiff+0x124>)
 80071b6:	f000 fb03 	bl	80077c0 <__assert_func>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071c0:	4610      	mov	r0, r2
 80071c2:	b003      	add	sp, #12
 80071c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c8:	bfbc      	itt	lt
 80071ca:	464b      	movlt	r3, r9
 80071cc:	46a1      	movlt	r9, r4
 80071ce:	4630      	mov	r0, r6
 80071d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80071d4:	bfba      	itte	lt
 80071d6:	461c      	movlt	r4, r3
 80071d8:	2501      	movlt	r5, #1
 80071da:	2500      	movge	r5, #0
 80071dc:	f7ff fd48 	bl	8006c70 <_Balloc>
 80071e0:	4602      	mov	r2, r0
 80071e2:	b918      	cbnz	r0, 80071ec <__mdiff+0x60>
 80071e4:	4b31      	ldr	r3, [pc, #196]	@ (80072ac <__mdiff+0x120>)
 80071e6:	f240 2145 	movw	r1, #581	@ 0x245
 80071ea:	e7e3      	b.n	80071b4 <__mdiff+0x28>
 80071ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80071f0:	6926      	ldr	r6, [r4, #16]
 80071f2:	60c5      	str	r5, [r0, #12]
 80071f4:	f109 0310 	add.w	r3, r9, #16
 80071f8:	f109 0514 	add.w	r5, r9, #20
 80071fc:	f104 0e14 	add.w	lr, r4, #20
 8007200:	f100 0b14 	add.w	fp, r0, #20
 8007204:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007208:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800720c:	9301      	str	r3, [sp, #4]
 800720e:	46d9      	mov	r9, fp
 8007210:	f04f 0c00 	mov.w	ip, #0
 8007214:	9b01      	ldr	r3, [sp, #4]
 8007216:	f85e 0b04 	ldr.w	r0, [lr], #4
 800721a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800721e:	9301      	str	r3, [sp, #4]
 8007220:	fa1f f38a 	uxth.w	r3, sl
 8007224:	4619      	mov	r1, r3
 8007226:	b283      	uxth	r3, r0
 8007228:	1acb      	subs	r3, r1, r3
 800722a:	0c00      	lsrs	r0, r0, #16
 800722c:	4463      	add	r3, ip
 800722e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007232:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007236:	b29b      	uxth	r3, r3
 8007238:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800723c:	4576      	cmp	r6, lr
 800723e:	f849 3b04 	str.w	r3, [r9], #4
 8007242:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007246:	d8e5      	bhi.n	8007214 <__mdiff+0x88>
 8007248:	1b33      	subs	r3, r6, r4
 800724a:	3b15      	subs	r3, #21
 800724c:	f023 0303 	bic.w	r3, r3, #3
 8007250:	3415      	adds	r4, #21
 8007252:	3304      	adds	r3, #4
 8007254:	42a6      	cmp	r6, r4
 8007256:	bf38      	it	cc
 8007258:	2304      	movcc	r3, #4
 800725a:	441d      	add	r5, r3
 800725c:	445b      	add	r3, fp
 800725e:	461e      	mov	r6, r3
 8007260:	462c      	mov	r4, r5
 8007262:	4544      	cmp	r4, r8
 8007264:	d30e      	bcc.n	8007284 <__mdiff+0xf8>
 8007266:	f108 0103 	add.w	r1, r8, #3
 800726a:	1b49      	subs	r1, r1, r5
 800726c:	f021 0103 	bic.w	r1, r1, #3
 8007270:	3d03      	subs	r5, #3
 8007272:	45a8      	cmp	r8, r5
 8007274:	bf38      	it	cc
 8007276:	2100      	movcc	r1, #0
 8007278:	440b      	add	r3, r1
 800727a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800727e:	b191      	cbz	r1, 80072a6 <__mdiff+0x11a>
 8007280:	6117      	str	r7, [r2, #16]
 8007282:	e79d      	b.n	80071c0 <__mdiff+0x34>
 8007284:	f854 1b04 	ldr.w	r1, [r4], #4
 8007288:	46e6      	mov	lr, ip
 800728a:	0c08      	lsrs	r0, r1, #16
 800728c:	fa1c fc81 	uxtah	ip, ip, r1
 8007290:	4471      	add	r1, lr
 8007292:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007296:	b289      	uxth	r1, r1
 8007298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800729c:	f846 1b04 	str.w	r1, [r6], #4
 80072a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072a4:	e7dd      	b.n	8007262 <__mdiff+0xd6>
 80072a6:	3f01      	subs	r7, #1
 80072a8:	e7e7      	b.n	800727a <__mdiff+0xee>
 80072aa:	bf00      	nop
 80072ac:	08008605 	.word	0x08008605
 80072b0:	08008616 	.word	0x08008616

080072b4 <__d2b>:
 80072b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072b8:	460f      	mov	r7, r1
 80072ba:	2101      	movs	r1, #1
 80072bc:	ec59 8b10 	vmov	r8, r9, d0
 80072c0:	4616      	mov	r6, r2
 80072c2:	f7ff fcd5 	bl	8006c70 <_Balloc>
 80072c6:	4604      	mov	r4, r0
 80072c8:	b930      	cbnz	r0, 80072d8 <__d2b+0x24>
 80072ca:	4602      	mov	r2, r0
 80072cc:	4b23      	ldr	r3, [pc, #140]	@ (800735c <__d2b+0xa8>)
 80072ce:	4824      	ldr	r0, [pc, #144]	@ (8007360 <__d2b+0xac>)
 80072d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80072d4:	f000 fa74 	bl	80077c0 <__assert_func>
 80072d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072e0:	b10d      	cbz	r5, 80072e6 <__d2b+0x32>
 80072e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	f1b8 0300 	subs.w	r3, r8, #0
 80072ec:	d023      	beq.n	8007336 <__d2b+0x82>
 80072ee:	4668      	mov	r0, sp
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	f7ff fd84 	bl	8006dfe <__lo0bits>
 80072f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072fa:	b1d0      	cbz	r0, 8007332 <__d2b+0x7e>
 80072fc:	f1c0 0320 	rsb	r3, r0, #32
 8007300:	fa02 f303 	lsl.w	r3, r2, r3
 8007304:	430b      	orrs	r3, r1
 8007306:	40c2      	lsrs	r2, r0
 8007308:	6163      	str	r3, [r4, #20]
 800730a:	9201      	str	r2, [sp, #4]
 800730c:	9b01      	ldr	r3, [sp, #4]
 800730e:	61a3      	str	r3, [r4, #24]
 8007310:	2b00      	cmp	r3, #0
 8007312:	bf0c      	ite	eq
 8007314:	2201      	moveq	r2, #1
 8007316:	2202      	movne	r2, #2
 8007318:	6122      	str	r2, [r4, #16]
 800731a:	b1a5      	cbz	r5, 8007346 <__d2b+0x92>
 800731c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007320:	4405      	add	r5, r0
 8007322:	603d      	str	r5, [r7, #0]
 8007324:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007328:	6030      	str	r0, [r6, #0]
 800732a:	4620      	mov	r0, r4
 800732c:	b003      	add	sp, #12
 800732e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007332:	6161      	str	r1, [r4, #20]
 8007334:	e7ea      	b.n	800730c <__d2b+0x58>
 8007336:	a801      	add	r0, sp, #4
 8007338:	f7ff fd61 	bl	8006dfe <__lo0bits>
 800733c:	9b01      	ldr	r3, [sp, #4]
 800733e:	6163      	str	r3, [r4, #20]
 8007340:	3020      	adds	r0, #32
 8007342:	2201      	movs	r2, #1
 8007344:	e7e8      	b.n	8007318 <__d2b+0x64>
 8007346:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800734a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800734e:	6038      	str	r0, [r7, #0]
 8007350:	6918      	ldr	r0, [r3, #16]
 8007352:	f7ff fd35 	bl	8006dc0 <__hi0bits>
 8007356:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800735a:	e7e5      	b.n	8007328 <__d2b+0x74>
 800735c:	08008605 	.word	0x08008605
 8007360:	08008616 	.word	0x08008616

08007364 <__ssputs_r>:
 8007364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007368:	688e      	ldr	r6, [r1, #8]
 800736a:	461f      	mov	r7, r3
 800736c:	42be      	cmp	r6, r7
 800736e:	680b      	ldr	r3, [r1, #0]
 8007370:	4682      	mov	sl, r0
 8007372:	460c      	mov	r4, r1
 8007374:	4690      	mov	r8, r2
 8007376:	d82d      	bhi.n	80073d4 <__ssputs_r+0x70>
 8007378:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800737c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007380:	d026      	beq.n	80073d0 <__ssputs_r+0x6c>
 8007382:	6965      	ldr	r5, [r4, #20]
 8007384:	6909      	ldr	r1, [r1, #16]
 8007386:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800738a:	eba3 0901 	sub.w	r9, r3, r1
 800738e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007392:	1c7b      	adds	r3, r7, #1
 8007394:	444b      	add	r3, r9
 8007396:	106d      	asrs	r5, r5, #1
 8007398:	429d      	cmp	r5, r3
 800739a:	bf38      	it	cc
 800739c:	461d      	movcc	r5, r3
 800739e:	0553      	lsls	r3, r2, #21
 80073a0:	d527      	bpl.n	80073f2 <__ssputs_r+0x8e>
 80073a2:	4629      	mov	r1, r5
 80073a4:	f7ff fbd8 	bl	8006b58 <_malloc_r>
 80073a8:	4606      	mov	r6, r0
 80073aa:	b360      	cbz	r0, 8007406 <__ssputs_r+0xa2>
 80073ac:	6921      	ldr	r1, [r4, #16]
 80073ae:	464a      	mov	r2, r9
 80073b0:	f7fe fcf7 	bl	8005da2 <memcpy>
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80073ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073be:	81a3      	strh	r3, [r4, #12]
 80073c0:	6126      	str	r6, [r4, #16]
 80073c2:	6165      	str	r5, [r4, #20]
 80073c4:	444e      	add	r6, r9
 80073c6:	eba5 0509 	sub.w	r5, r5, r9
 80073ca:	6026      	str	r6, [r4, #0]
 80073cc:	60a5      	str	r5, [r4, #8]
 80073ce:	463e      	mov	r6, r7
 80073d0:	42be      	cmp	r6, r7
 80073d2:	d900      	bls.n	80073d6 <__ssputs_r+0x72>
 80073d4:	463e      	mov	r6, r7
 80073d6:	6820      	ldr	r0, [r4, #0]
 80073d8:	4632      	mov	r2, r6
 80073da:	4641      	mov	r1, r8
 80073dc:	f000 f9c6 	bl	800776c <memmove>
 80073e0:	68a3      	ldr	r3, [r4, #8]
 80073e2:	1b9b      	subs	r3, r3, r6
 80073e4:	60a3      	str	r3, [r4, #8]
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	4433      	add	r3, r6
 80073ea:	6023      	str	r3, [r4, #0]
 80073ec:	2000      	movs	r0, #0
 80073ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f2:	462a      	mov	r2, r5
 80073f4:	f000 fa28 	bl	8007848 <_realloc_r>
 80073f8:	4606      	mov	r6, r0
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d1e0      	bne.n	80073c0 <__ssputs_r+0x5c>
 80073fe:	6921      	ldr	r1, [r4, #16]
 8007400:	4650      	mov	r0, sl
 8007402:	f7ff fb35 	bl	8006a70 <_free_r>
 8007406:	230c      	movs	r3, #12
 8007408:	f8ca 3000 	str.w	r3, [sl]
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007412:	81a3      	strh	r3, [r4, #12]
 8007414:	f04f 30ff 	mov.w	r0, #4294967295
 8007418:	e7e9      	b.n	80073ee <__ssputs_r+0x8a>
	...

0800741c <_svfiprintf_r>:
 800741c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007420:	4698      	mov	r8, r3
 8007422:	898b      	ldrh	r3, [r1, #12]
 8007424:	061b      	lsls	r3, r3, #24
 8007426:	b09d      	sub	sp, #116	@ 0x74
 8007428:	4607      	mov	r7, r0
 800742a:	460d      	mov	r5, r1
 800742c:	4614      	mov	r4, r2
 800742e:	d510      	bpl.n	8007452 <_svfiprintf_r+0x36>
 8007430:	690b      	ldr	r3, [r1, #16]
 8007432:	b973      	cbnz	r3, 8007452 <_svfiprintf_r+0x36>
 8007434:	2140      	movs	r1, #64	@ 0x40
 8007436:	f7ff fb8f 	bl	8006b58 <_malloc_r>
 800743a:	6028      	str	r0, [r5, #0]
 800743c:	6128      	str	r0, [r5, #16]
 800743e:	b930      	cbnz	r0, 800744e <_svfiprintf_r+0x32>
 8007440:	230c      	movs	r3, #12
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	f04f 30ff 	mov.w	r0, #4294967295
 8007448:	b01d      	add	sp, #116	@ 0x74
 800744a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744e:	2340      	movs	r3, #64	@ 0x40
 8007450:	616b      	str	r3, [r5, #20]
 8007452:	2300      	movs	r3, #0
 8007454:	9309      	str	r3, [sp, #36]	@ 0x24
 8007456:	2320      	movs	r3, #32
 8007458:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800745c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007460:	2330      	movs	r3, #48	@ 0x30
 8007462:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007600 <_svfiprintf_r+0x1e4>
 8007466:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800746a:	f04f 0901 	mov.w	r9, #1
 800746e:	4623      	mov	r3, r4
 8007470:	469a      	mov	sl, r3
 8007472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007476:	b10a      	cbz	r2, 800747c <_svfiprintf_r+0x60>
 8007478:	2a25      	cmp	r2, #37	@ 0x25
 800747a:	d1f9      	bne.n	8007470 <_svfiprintf_r+0x54>
 800747c:	ebba 0b04 	subs.w	fp, sl, r4
 8007480:	d00b      	beq.n	800749a <_svfiprintf_r+0x7e>
 8007482:	465b      	mov	r3, fp
 8007484:	4622      	mov	r2, r4
 8007486:	4629      	mov	r1, r5
 8007488:	4638      	mov	r0, r7
 800748a:	f7ff ff6b 	bl	8007364 <__ssputs_r>
 800748e:	3001      	adds	r0, #1
 8007490:	f000 80a7 	beq.w	80075e2 <_svfiprintf_r+0x1c6>
 8007494:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007496:	445a      	add	r2, fp
 8007498:	9209      	str	r2, [sp, #36]	@ 0x24
 800749a:	f89a 3000 	ldrb.w	r3, [sl]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 809f 	beq.w	80075e2 <_svfiprintf_r+0x1c6>
 80074a4:	2300      	movs	r3, #0
 80074a6:	f04f 32ff 	mov.w	r2, #4294967295
 80074aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ae:	f10a 0a01 	add.w	sl, sl, #1
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	9307      	str	r3, [sp, #28]
 80074b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80074bc:	4654      	mov	r4, sl
 80074be:	2205      	movs	r2, #5
 80074c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c4:	484e      	ldr	r0, [pc, #312]	@ (8007600 <_svfiprintf_r+0x1e4>)
 80074c6:	f7f8 fe83 	bl	80001d0 <memchr>
 80074ca:	9a04      	ldr	r2, [sp, #16]
 80074cc:	b9d8      	cbnz	r0, 8007506 <_svfiprintf_r+0xea>
 80074ce:	06d0      	lsls	r0, r2, #27
 80074d0:	bf44      	itt	mi
 80074d2:	2320      	movmi	r3, #32
 80074d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074d8:	0711      	lsls	r1, r2, #28
 80074da:	bf44      	itt	mi
 80074dc:	232b      	movmi	r3, #43	@ 0x2b
 80074de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074e2:	f89a 3000 	ldrb.w	r3, [sl]
 80074e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80074e8:	d015      	beq.n	8007516 <_svfiprintf_r+0xfa>
 80074ea:	9a07      	ldr	r2, [sp, #28]
 80074ec:	4654      	mov	r4, sl
 80074ee:	2000      	movs	r0, #0
 80074f0:	f04f 0c0a 	mov.w	ip, #10
 80074f4:	4621      	mov	r1, r4
 80074f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074fa:	3b30      	subs	r3, #48	@ 0x30
 80074fc:	2b09      	cmp	r3, #9
 80074fe:	d94b      	bls.n	8007598 <_svfiprintf_r+0x17c>
 8007500:	b1b0      	cbz	r0, 8007530 <_svfiprintf_r+0x114>
 8007502:	9207      	str	r2, [sp, #28]
 8007504:	e014      	b.n	8007530 <_svfiprintf_r+0x114>
 8007506:	eba0 0308 	sub.w	r3, r0, r8
 800750a:	fa09 f303 	lsl.w	r3, r9, r3
 800750e:	4313      	orrs	r3, r2
 8007510:	9304      	str	r3, [sp, #16]
 8007512:	46a2      	mov	sl, r4
 8007514:	e7d2      	b.n	80074bc <_svfiprintf_r+0xa0>
 8007516:	9b03      	ldr	r3, [sp, #12]
 8007518:	1d19      	adds	r1, r3, #4
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	9103      	str	r1, [sp, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	bfbb      	ittet	lt
 8007522:	425b      	neglt	r3, r3
 8007524:	f042 0202 	orrlt.w	r2, r2, #2
 8007528:	9307      	strge	r3, [sp, #28]
 800752a:	9307      	strlt	r3, [sp, #28]
 800752c:	bfb8      	it	lt
 800752e:	9204      	strlt	r2, [sp, #16]
 8007530:	7823      	ldrb	r3, [r4, #0]
 8007532:	2b2e      	cmp	r3, #46	@ 0x2e
 8007534:	d10a      	bne.n	800754c <_svfiprintf_r+0x130>
 8007536:	7863      	ldrb	r3, [r4, #1]
 8007538:	2b2a      	cmp	r3, #42	@ 0x2a
 800753a:	d132      	bne.n	80075a2 <_svfiprintf_r+0x186>
 800753c:	9b03      	ldr	r3, [sp, #12]
 800753e:	1d1a      	adds	r2, r3, #4
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	9203      	str	r2, [sp, #12]
 8007544:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007548:	3402      	adds	r4, #2
 800754a:	9305      	str	r3, [sp, #20]
 800754c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007610 <_svfiprintf_r+0x1f4>
 8007550:	7821      	ldrb	r1, [r4, #0]
 8007552:	2203      	movs	r2, #3
 8007554:	4650      	mov	r0, sl
 8007556:	f7f8 fe3b 	bl	80001d0 <memchr>
 800755a:	b138      	cbz	r0, 800756c <_svfiprintf_r+0x150>
 800755c:	9b04      	ldr	r3, [sp, #16]
 800755e:	eba0 000a 	sub.w	r0, r0, sl
 8007562:	2240      	movs	r2, #64	@ 0x40
 8007564:	4082      	lsls	r2, r0
 8007566:	4313      	orrs	r3, r2
 8007568:	3401      	adds	r4, #1
 800756a:	9304      	str	r3, [sp, #16]
 800756c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007570:	4824      	ldr	r0, [pc, #144]	@ (8007604 <_svfiprintf_r+0x1e8>)
 8007572:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007576:	2206      	movs	r2, #6
 8007578:	f7f8 fe2a 	bl	80001d0 <memchr>
 800757c:	2800      	cmp	r0, #0
 800757e:	d036      	beq.n	80075ee <_svfiprintf_r+0x1d2>
 8007580:	4b21      	ldr	r3, [pc, #132]	@ (8007608 <_svfiprintf_r+0x1ec>)
 8007582:	bb1b      	cbnz	r3, 80075cc <_svfiprintf_r+0x1b0>
 8007584:	9b03      	ldr	r3, [sp, #12]
 8007586:	3307      	adds	r3, #7
 8007588:	f023 0307 	bic.w	r3, r3, #7
 800758c:	3308      	adds	r3, #8
 800758e:	9303      	str	r3, [sp, #12]
 8007590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007592:	4433      	add	r3, r6
 8007594:	9309      	str	r3, [sp, #36]	@ 0x24
 8007596:	e76a      	b.n	800746e <_svfiprintf_r+0x52>
 8007598:	fb0c 3202 	mla	r2, ip, r2, r3
 800759c:	460c      	mov	r4, r1
 800759e:	2001      	movs	r0, #1
 80075a0:	e7a8      	b.n	80074f4 <_svfiprintf_r+0xd8>
 80075a2:	2300      	movs	r3, #0
 80075a4:	3401      	adds	r4, #1
 80075a6:	9305      	str	r3, [sp, #20]
 80075a8:	4619      	mov	r1, r3
 80075aa:	f04f 0c0a 	mov.w	ip, #10
 80075ae:	4620      	mov	r0, r4
 80075b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075b4:	3a30      	subs	r2, #48	@ 0x30
 80075b6:	2a09      	cmp	r2, #9
 80075b8:	d903      	bls.n	80075c2 <_svfiprintf_r+0x1a6>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0c6      	beq.n	800754c <_svfiprintf_r+0x130>
 80075be:	9105      	str	r1, [sp, #20]
 80075c0:	e7c4      	b.n	800754c <_svfiprintf_r+0x130>
 80075c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80075c6:	4604      	mov	r4, r0
 80075c8:	2301      	movs	r3, #1
 80075ca:	e7f0      	b.n	80075ae <_svfiprintf_r+0x192>
 80075cc:	ab03      	add	r3, sp, #12
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	462a      	mov	r2, r5
 80075d2:	4b0e      	ldr	r3, [pc, #56]	@ (800760c <_svfiprintf_r+0x1f0>)
 80075d4:	a904      	add	r1, sp, #16
 80075d6:	4638      	mov	r0, r7
 80075d8:	f7fd fe86 	bl	80052e8 <_printf_float>
 80075dc:	1c42      	adds	r2, r0, #1
 80075de:	4606      	mov	r6, r0
 80075e0:	d1d6      	bne.n	8007590 <_svfiprintf_r+0x174>
 80075e2:	89ab      	ldrh	r3, [r5, #12]
 80075e4:	065b      	lsls	r3, r3, #25
 80075e6:	f53f af2d 	bmi.w	8007444 <_svfiprintf_r+0x28>
 80075ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075ec:	e72c      	b.n	8007448 <_svfiprintf_r+0x2c>
 80075ee:	ab03      	add	r3, sp, #12
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	462a      	mov	r2, r5
 80075f4:	4b05      	ldr	r3, [pc, #20]	@ (800760c <_svfiprintf_r+0x1f0>)
 80075f6:	a904      	add	r1, sp, #16
 80075f8:	4638      	mov	r0, r7
 80075fa:	f7fe f90d 	bl	8005818 <_printf_i>
 80075fe:	e7ed      	b.n	80075dc <_svfiprintf_r+0x1c0>
 8007600:	0800866f 	.word	0x0800866f
 8007604:	08008679 	.word	0x08008679
 8007608:	080052e9 	.word	0x080052e9
 800760c:	08007365 	.word	0x08007365
 8007610:	08008675 	.word	0x08008675

08007614 <__sflush_r>:
 8007614:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800761c:	0716      	lsls	r6, r2, #28
 800761e:	4605      	mov	r5, r0
 8007620:	460c      	mov	r4, r1
 8007622:	d454      	bmi.n	80076ce <__sflush_r+0xba>
 8007624:	684b      	ldr	r3, [r1, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	dc02      	bgt.n	8007630 <__sflush_r+0x1c>
 800762a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800762c:	2b00      	cmp	r3, #0
 800762e:	dd48      	ble.n	80076c2 <__sflush_r+0xae>
 8007630:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007632:	2e00      	cmp	r6, #0
 8007634:	d045      	beq.n	80076c2 <__sflush_r+0xae>
 8007636:	2300      	movs	r3, #0
 8007638:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800763c:	682f      	ldr	r7, [r5, #0]
 800763e:	6a21      	ldr	r1, [r4, #32]
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	d030      	beq.n	80076a6 <__sflush_r+0x92>
 8007644:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	0759      	lsls	r1, r3, #29
 800764a:	d505      	bpl.n	8007658 <__sflush_r+0x44>
 800764c:	6863      	ldr	r3, [r4, #4]
 800764e:	1ad2      	subs	r2, r2, r3
 8007650:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007652:	b10b      	cbz	r3, 8007658 <__sflush_r+0x44>
 8007654:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007656:	1ad2      	subs	r2, r2, r3
 8007658:	2300      	movs	r3, #0
 800765a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800765c:	6a21      	ldr	r1, [r4, #32]
 800765e:	4628      	mov	r0, r5
 8007660:	47b0      	blx	r6
 8007662:	1c43      	adds	r3, r0, #1
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	d106      	bne.n	8007676 <__sflush_r+0x62>
 8007668:	6829      	ldr	r1, [r5, #0]
 800766a:	291d      	cmp	r1, #29
 800766c:	d82b      	bhi.n	80076c6 <__sflush_r+0xb2>
 800766e:	4a2a      	ldr	r2, [pc, #168]	@ (8007718 <__sflush_r+0x104>)
 8007670:	40ca      	lsrs	r2, r1
 8007672:	07d6      	lsls	r6, r2, #31
 8007674:	d527      	bpl.n	80076c6 <__sflush_r+0xb2>
 8007676:	2200      	movs	r2, #0
 8007678:	6062      	str	r2, [r4, #4]
 800767a:	04d9      	lsls	r1, r3, #19
 800767c:	6922      	ldr	r2, [r4, #16]
 800767e:	6022      	str	r2, [r4, #0]
 8007680:	d504      	bpl.n	800768c <__sflush_r+0x78>
 8007682:	1c42      	adds	r2, r0, #1
 8007684:	d101      	bne.n	800768a <__sflush_r+0x76>
 8007686:	682b      	ldr	r3, [r5, #0]
 8007688:	b903      	cbnz	r3, 800768c <__sflush_r+0x78>
 800768a:	6560      	str	r0, [r4, #84]	@ 0x54
 800768c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800768e:	602f      	str	r7, [r5, #0]
 8007690:	b1b9      	cbz	r1, 80076c2 <__sflush_r+0xae>
 8007692:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007696:	4299      	cmp	r1, r3
 8007698:	d002      	beq.n	80076a0 <__sflush_r+0x8c>
 800769a:	4628      	mov	r0, r5
 800769c:	f7ff f9e8 	bl	8006a70 <_free_r>
 80076a0:	2300      	movs	r3, #0
 80076a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80076a4:	e00d      	b.n	80076c2 <__sflush_r+0xae>
 80076a6:	2301      	movs	r3, #1
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b0      	blx	r6
 80076ac:	4602      	mov	r2, r0
 80076ae:	1c50      	adds	r0, r2, #1
 80076b0:	d1c9      	bne.n	8007646 <__sflush_r+0x32>
 80076b2:	682b      	ldr	r3, [r5, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0c6      	beq.n	8007646 <__sflush_r+0x32>
 80076b8:	2b1d      	cmp	r3, #29
 80076ba:	d001      	beq.n	80076c0 <__sflush_r+0xac>
 80076bc:	2b16      	cmp	r3, #22
 80076be:	d11e      	bne.n	80076fe <__sflush_r+0xea>
 80076c0:	602f      	str	r7, [r5, #0]
 80076c2:	2000      	movs	r0, #0
 80076c4:	e022      	b.n	800770c <__sflush_r+0xf8>
 80076c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076ca:	b21b      	sxth	r3, r3
 80076cc:	e01b      	b.n	8007706 <__sflush_r+0xf2>
 80076ce:	690f      	ldr	r7, [r1, #16]
 80076d0:	2f00      	cmp	r7, #0
 80076d2:	d0f6      	beq.n	80076c2 <__sflush_r+0xae>
 80076d4:	0793      	lsls	r3, r2, #30
 80076d6:	680e      	ldr	r6, [r1, #0]
 80076d8:	bf08      	it	eq
 80076da:	694b      	ldreq	r3, [r1, #20]
 80076dc:	600f      	str	r7, [r1, #0]
 80076de:	bf18      	it	ne
 80076e0:	2300      	movne	r3, #0
 80076e2:	eba6 0807 	sub.w	r8, r6, r7
 80076e6:	608b      	str	r3, [r1, #8]
 80076e8:	f1b8 0f00 	cmp.w	r8, #0
 80076ec:	dde9      	ble.n	80076c2 <__sflush_r+0xae>
 80076ee:	6a21      	ldr	r1, [r4, #32]
 80076f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80076f2:	4643      	mov	r3, r8
 80076f4:	463a      	mov	r2, r7
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b0      	blx	r6
 80076fa:	2800      	cmp	r0, #0
 80076fc:	dc08      	bgt.n	8007710 <__sflush_r+0xfc>
 80076fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007706:	81a3      	strh	r3, [r4, #12]
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
 800770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007710:	4407      	add	r7, r0
 8007712:	eba8 0800 	sub.w	r8, r8, r0
 8007716:	e7e7      	b.n	80076e8 <__sflush_r+0xd4>
 8007718:	20400001 	.word	0x20400001

0800771c <_fflush_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	690b      	ldr	r3, [r1, #16]
 8007720:	4605      	mov	r5, r0
 8007722:	460c      	mov	r4, r1
 8007724:	b913      	cbnz	r3, 800772c <_fflush_r+0x10>
 8007726:	2500      	movs	r5, #0
 8007728:	4628      	mov	r0, r5
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	b118      	cbz	r0, 8007736 <_fflush_r+0x1a>
 800772e:	6a03      	ldr	r3, [r0, #32]
 8007730:	b90b      	cbnz	r3, 8007736 <_fflush_r+0x1a>
 8007732:	f7fe fa1b 	bl	8005b6c <__sinit>
 8007736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0f3      	beq.n	8007726 <_fflush_r+0xa>
 800773e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007740:	07d0      	lsls	r0, r2, #31
 8007742:	d404      	bmi.n	800774e <_fflush_r+0x32>
 8007744:	0599      	lsls	r1, r3, #22
 8007746:	d402      	bmi.n	800774e <_fflush_r+0x32>
 8007748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800774a:	f7fe fb28 	bl	8005d9e <__retarget_lock_acquire_recursive>
 800774e:	4628      	mov	r0, r5
 8007750:	4621      	mov	r1, r4
 8007752:	f7ff ff5f 	bl	8007614 <__sflush_r>
 8007756:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007758:	07da      	lsls	r2, r3, #31
 800775a:	4605      	mov	r5, r0
 800775c:	d4e4      	bmi.n	8007728 <_fflush_r+0xc>
 800775e:	89a3      	ldrh	r3, [r4, #12]
 8007760:	059b      	lsls	r3, r3, #22
 8007762:	d4e1      	bmi.n	8007728 <_fflush_r+0xc>
 8007764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007766:	f7fe fb1b 	bl	8005da0 <__retarget_lock_release_recursive>
 800776a:	e7dd      	b.n	8007728 <_fflush_r+0xc>

0800776c <memmove>:
 800776c:	4288      	cmp	r0, r1
 800776e:	b510      	push	{r4, lr}
 8007770:	eb01 0402 	add.w	r4, r1, r2
 8007774:	d902      	bls.n	800777c <memmove+0x10>
 8007776:	4284      	cmp	r4, r0
 8007778:	4623      	mov	r3, r4
 800777a:	d807      	bhi.n	800778c <memmove+0x20>
 800777c:	1e43      	subs	r3, r0, #1
 800777e:	42a1      	cmp	r1, r4
 8007780:	d008      	beq.n	8007794 <memmove+0x28>
 8007782:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007786:	f803 2f01 	strb.w	r2, [r3, #1]!
 800778a:	e7f8      	b.n	800777e <memmove+0x12>
 800778c:	4402      	add	r2, r0
 800778e:	4601      	mov	r1, r0
 8007790:	428a      	cmp	r2, r1
 8007792:	d100      	bne.n	8007796 <memmove+0x2a>
 8007794:	bd10      	pop	{r4, pc}
 8007796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800779a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800779e:	e7f7      	b.n	8007790 <memmove+0x24>

080077a0 <_sbrk_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4d06      	ldr	r5, [pc, #24]	@ (80077bc <_sbrk_r+0x1c>)
 80077a4:	2300      	movs	r3, #0
 80077a6:	4604      	mov	r4, r0
 80077a8:	4608      	mov	r0, r1
 80077aa:	602b      	str	r3, [r5, #0]
 80077ac:	f7fa f916 	bl	80019dc <_sbrk>
 80077b0:	1c43      	adds	r3, r0, #1
 80077b2:	d102      	bne.n	80077ba <_sbrk_r+0x1a>
 80077b4:	682b      	ldr	r3, [r5, #0]
 80077b6:	b103      	cbz	r3, 80077ba <_sbrk_r+0x1a>
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	bd38      	pop	{r3, r4, r5, pc}
 80077bc:	200008a8 	.word	0x200008a8

080077c0 <__assert_func>:
 80077c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077c2:	4614      	mov	r4, r2
 80077c4:	461a      	mov	r2, r3
 80077c6:	4b09      	ldr	r3, [pc, #36]	@ (80077ec <__assert_func+0x2c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4605      	mov	r5, r0
 80077cc:	68d8      	ldr	r0, [r3, #12]
 80077ce:	b14c      	cbz	r4, 80077e4 <__assert_func+0x24>
 80077d0:	4b07      	ldr	r3, [pc, #28]	@ (80077f0 <__assert_func+0x30>)
 80077d2:	9100      	str	r1, [sp, #0]
 80077d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077d8:	4906      	ldr	r1, [pc, #24]	@ (80077f4 <__assert_func+0x34>)
 80077da:	462b      	mov	r3, r5
 80077dc:	f000 f870 	bl	80078c0 <fiprintf>
 80077e0:	f000 f880 	bl	80078e4 <abort>
 80077e4:	4b04      	ldr	r3, [pc, #16]	@ (80077f8 <__assert_func+0x38>)
 80077e6:	461c      	mov	r4, r3
 80077e8:	e7f3      	b.n	80077d2 <__assert_func+0x12>
 80077ea:	bf00      	nop
 80077ec:	20000130 	.word	0x20000130
 80077f0:	0800868a 	.word	0x0800868a
 80077f4:	08008697 	.word	0x08008697
 80077f8:	080086c5 	.word	0x080086c5

080077fc <_calloc_r>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	fba1 5402 	umull	r5, r4, r1, r2
 8007802:	b934      	cbnz	r4, 8007812 <_calloc_r+0x16>
 8007804:	4629      	mov	r1, r5
 8007806:	f7ff f9a7 	bl	8006b58 <_malloc_r>
 800780a:	4606      	mov	r6, r0
 800780c:	b928      	cbnz	r0, 800781a <_calloc_r+0x1e>
 800780e:	4630      	mov	r0, r6
 8007810:	bd70      	pop	{r4, r5, r6, pc}
 8007812:	220c      	movs	r2, #12
 8007814:	6002      	str	r2, [r0, #0]
 8007816:	2600      	movs	r6, #0
 8007818:	e7f9      	b.n	800780e <_calloc_r+0x12>
 800781a:	462a      	mov	r2, r5
 800781c:	4621      	mov	r1, r4
 800781e:	f7fe fa40 	bl	8005ca2 <memset>
 8007822:	e7f4      	b.n	800780e <_calloc_r+0x12>

08007824 <__ascii_mbtowc>:
 8007824:	b082      	sub	sp, #8
 8007826:	b901      	cbnz	r1, 800782a <__ascii_mbtowc+0x6>
 8007828:	a901      	add	r1, sp, #4
 800782a:	b142      	cbz	r2, 800783e <__ascii_mbtowc+0x1a>
 800782c:	b14b      	cbz	r3, 8007842 <__ascii_mbtowc+0x1e>
 800782e:	7813      	ldrb	r3, [r2, #0]
 8007830:	600b      	str	r3, [r1, #0]
 8007832:	7812      	ldrb	r2, [r2, #0]
 8007834:	1e10      	subs	r0, r2, #0
 8007836:	bf18      	it	ne
 8007838:	2001      	movne	r0, #1
 800783a:	b002      	add	sp, #8
 800783c:	4770      	bx	lr
 800783e:	4610      	mov	r0, r2
 8007840:	e7fb      	b.n	800783a <__ascii_mbtowc+0x16>
 8007842:	f06f 0001 	mvn.w	r0, #1
 8007846:	e7f8      	b.n	800783a <__ascii_mbtowc+0x16>

08007848 <_realloc_r>:
 8007848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784c:	4607      	mov	r7, r0
 800784e:	4614      	mov	r4, r2
 8007850:	460d      	mov	r5, r1
 8007852:	b921      	cbnz	r1, 800785e <_realloc_r+0x16>
 8007854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007858:	4611      	mov	r1, r2
 800785a:	f7ff b97d 	b.w	8006b58 <_malloc_r>
 800785e:	b92a      	cbnz	r2, 800786c <_realloc_r+0x24>
 8007860:	f7ff f906 	bl	8006a70 <_free_r>
 8007864:	4625      	mov	r5, r4
 8007866:	4628      	mov	r0, r5
 8007868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800786c:	f000 f841 	bl	80078f2 <_malloc_usable_size_r>
 8007870:	4284      	cmp	r4, r0
 8007872:	4606      	mov	r6, r0
 8007874:	d802      	bhi.n	800787c <_realloc_r+0x34>
 8007876:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800787a:	d8f4      	bhi.n	8007866 <_realloc_r+0x1e>
 800787c:	4621      	mov	r1, r4
 800787e:	4638      	mov	r0, r7
 8007880:	f7ff f96a 	bl	8006b58 <_malloc_r>
 8007884:	4680      	mov	r8, r0
 8007886:	b908      	cbnz	r0, 800788c <_realloc_r+0x44>
 8007888:	4645      	mov	r5, r8
 800788a:	e7ec      	b.n	8007866 <_realloc_r+0x1e>
 800788c:	42b4      	cmp	r4, r6
 800788e:	4622      	mov	r2, r4
 8007890:	4629      	mov	r1, r5
 8007892:	bf28      	it	cs
 8007894:	4632      	movcs	r2, r6
 8007896:	f7fe fa84 	bl	8005da2 <memcpy>
 800789a:	4629      	mov	r1, r5
 800789c:	4638      	mov	r0, r7
 800789e:	f7ff f8e7 	bl	8006a70 <_free_r>
 80078a2:	e7f1      	b.n	8007888 <_realloc_r+0x40>

080078a4 <__ascii_wctomb>:
 80078a4:	4603      	mov	r3, r0
 80078a6:	4608      	mov	r0, r1
 80078a8:	b141      	cbz	r1, 80078bc <__ascii_wctomb+0x18>
 80078aa:	2aff      	cmp	r2, #255	@ 0xff
 80078ac:	d904      	bls.n	80078b8 <__ascii_wctomb+0x14>
 80078ae:	228a      	movs	r2, #138	@ 0x8a
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	f04f 30ff 	mov.w	r0, #4294967295
 80078b6:	4770      	bx	lr
 80078b8:	700a      	strb	r2, [r1, #0]
 80078ba:	2001      	movs	r0, #1
 80078bc:	4770      	bx	lr
	...

080078c0 <fiprintf>:
 80078c0:	b40e      	push	{r1, r2, r3}
 80078c2:	b503      	push	{r0, r1, lr}
 80078c4:	4601      	mov	r1, r0
 80078c6:	ab03      	add	r3, sp, #12
 80078c8:	4805      	ldr	r0, [pc, #20]	@ (80078e0 <fiprintf+0x20>)
 80078ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ce:	6800      	ldr	r0, [r0, #0]
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	f000 f83f 	bl	8007954 <_vfiprintf_r>
 80078d6:	b002      	add	sp, #8
 80078d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078dc:	b003      	add	sp, #12
 80078de:	4770      	bx	lr
 80078e0:	20000130 	.word	0x20000130

080078e4 <abort>:
 80078e4:	b508      	push	{r3, lr}
 80078e6:	2006      	movs	r0, #6
 80078e8:	f000 fa08 	bl	8007cfc <raise>
 80078ec:	2001      	movs	r0, #1
 80078ee:	f7f9 fffc 	bl	80018ea <_exit>

080078f2 <_malloc_usable_size_r>:
 80078f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078f6:	1f18      	subs	r0, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	bfbc      	itt	lt
 80078fc:	580b      	ldrlt	r3, [r1, r0]
 80078fe:	18c0      	addlt	r0, r0, r3
 8007900:	4770      	bx	lr

08007902 <__sfputc_r>:
 8007902:	6893      	ldr	r3, [r2, #8]
 8007904:	3b01      	subs	r3, #1
 8007906:	2b00      	cmp	r3, #0
 8007908:	b410      	push	{r4}
 800790a:	6093      	str	r3, [r2, #8]
 800790c:	da08      	bge.n	8007920 <__sfputc_r+0x1e>
 800790e:	6994      	ldr	r4, [r2, #24]
 8007910:	42a3      	cmp	r3, r4
 8007912:	db01      	blt.n	8007918 <__sfputc_r+0x16>
 8007914:	290a      	cmp	r1, #10
 8007916:	d103      	bne.n	8007920 <__sfputc_r+0x1e>
 8007918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800791c:	f000 b932 	b.w	8007b84 <__swbuf_r>
 8007920:	6813      	ldr	r3, [r2, #0]
 8007922:	1c58      	adds	r0, r3, #1
 8007924:	6010      	str	r0, [r2, #0]
 8007926:	7019      	strb	r1, [r3, #0]
 8007928:	4608      	mov	r0, r1
 800792a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800792e:	4770      	bx	lr

08007930 <__sfputs_r>:
 8007930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007932:	4606      	mov	r6, r0
 8007934:	460f      	mov	r7, r1
 8007936:	4614      	mov	r4, r2
 8007938:	18d5      	adds	r5, r2, r3
 800793a:	42ac      	cmp	r4, r5
 800793c:	d101      	bne.n	8007942 <__sfputs_r+0x12>
 800793e:	2000      	movs	r0, #0
 8007940:	e007      	b.n	8007952 <__sfputs_r+0x22>
 8007942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007946:	463a      	mov	r2, r7
 8007948:	4630      	mov	r0, r6
 800794a:	f7ff ffda 	bl	8007902 <__sfputc_r>
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	d1f3      	bne.n	800793a <__sfputs_r+0xa>
 8007952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007954 <_vfiprintf_r>:
 8007954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007958:	460d      	mov	r5, r1
 800795a:	b09d      	sub	sp, #116	@ 0x74
 800795c:	4614      	mov	r4, r2
 800795e:	4698      	mov	r8, r3
 8007960:	4606      	mov	r6, r0
 8007962:	b118      	cbz	r0, 800796c <_vfiprintf_r+0x18>
 8007964:	6a03      	ldr	r3, [r0, #32]
 8007966:	b90b      	cbnz	r3, 800796c <_vfiprintf_r+0x18>
 8007968:	f7fe f900 	bl	8005b6c <__sinit>
 800796c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800796e:	07d9      	lsls	r1, r3, #31
 8007970:	d405      	bmi.n	800797e <_vfiprintf_r+0x2a>
 8007972:	89ab      	ldrh	r3, [r5, #12]
 8007974:	059a      	lsls	r2, r3, #22
 8007976:	d402      	bmi.n	800797e <_vfiprintf_r+0x2a>
 8007978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800797a:	f7fe fa10 	bl	8005d9e <__retarget_lock_acquire_recursive>
 800797e:	89ab      	ldrh	r3, [r5, #12]
 8007980:	071b      	lsls	r3, r3, #28
 8007982:	d501      	bpl.n	8007988 <_vfiprintf_r+0x34>
 8007984:	692b      	ldr	r3, [r5, #16]
 8007986:	b99b      	cbnz	r3, 80079b0 <_vfiprintf_r+0x5c>
 8007988:	4629      	mov	r1, r5
 800798a:	4630      	mov	r0, r6
 800798c:	f000 f938 	bl	8007c00 <__swsetup_r>
 8007990:	b170      	cbz	r0, 80079b0 <_vfiprintf_r+0x5c>
 8007992:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007994:	07dc      	lsls	r4, r3, #31
 8007996:	d504      	bpl.n	80079a2 <_vfiprintf_r+0x4e>
 8007998:	f04f 30ff 	mov.w	r0, #4294967295
 800799c:	b01d      	add	sp, #116	@ 0x74
 800799e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a2:	89ab      	ldrh	r3, [r5, #12]
 80079a4:	0598      	lsls	r0, r3, #22
 80079a6:	d4f7      	bmi.n	8007998 <_vfiprintf_r+0x44>
 80079a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079aa:	f7fe f9f9 	bl	8005da0 <__retarget_lock_release_recursive>
 80079ae:	e7f3      	b.n	8007998 <_vfiprintf_r+0x44>
 80079b0:	2300      	movs	r3, #0
 80079b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80079b4:	2320      	movs	r3, #32
 80079b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80079be:	2330      	movs	r3, #48	@ 0x30
 80079c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007b70 <_vfiprintf_r+0x21c>
 80079c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079c8:	f04f 0901 	mov.w	r9, #1
 80079cc:	4623      	mov	r3, r4
 80079ce:	469a      	mov	sl, r3
 80079d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079d4:	b10a      	cbz	r2, 80079da <_vfiprintf_r+0x86>
 80079d6:	2a25      	cmp	r2, #37	@ 0x25
 80079d8:	d1f9      	bne.n	80079ce <_vfiprintf_r+0x7a>
 80079da:	ebba 0b04 	subs.w	fp, sl, r4
 80079de:	d00b      	beq.n	80079f8 <_vfiprintf_r+0xa4>
 80079e0:	465b      	mov	r3, fp
 80079e2:	4622      	mov	r2, r4
 80079e4:	4629      	mov	r1, r5
 80079e6:	4630      	mov	r0, r6
 80079e8:	f7ff ffa2 	bl	8007930 <__sfputs_r>
 80079ec:	3001      	adds	r0, #1
 80079ee:	f000 80a7 	beq.w	8007b40 <_vfiprintf_r+0x1ec>
 80079f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079f4:	445a      	add	r2, fp
 80079f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80079f8:	f89a 3000 	ldrb.w	r3, [sl]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 809f 	beq.w	8007b40 <_vfiprintf_r+0x1ec>
 8007a02:	2300      	movs	r3, #0
 8007a04:	f04f 32ff 	mov.w	r2, #4294967295
 8007a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a0c:	f10a 0a01 	add.w	sl, sl, #1
 8007a10:	9304      	str	r3, [sp, #16]
 8007a12:	9307      	str	r3, [sp, #28]
 8007a14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a18:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a1a:	4654      	mov	r4, sl
 8007a1c:	2205      	movs	r2, #5
 8007a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a22:	4853      	ldr	r0, [pc, #332]	@ (8007b70 <_vfiprintf_r+0x21c>)
 8007a24:	f7f8 fbd4 	bl	80001d0 <memchr>
 8007a28:	9a04      	ldr	r2, [sp, #16]
 8007a2a:	b9d8      	cbnz	r0, 8007a64 <_vfiprintf_r+0x110>
 8007a2c:	06d1      	lsls	r1, r2, #27
 8007a2e:	bf44      	itt	mi
 8007a30:	2320      	movmi	r3, #32
 8007a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a36:	0713      	lsls	r3, r2, #28
 8007a38:	bf44      	itt	mi
 8007a3a:	232b      	movmi	r3, #43	@ 0x2b
 8007a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a40:	f89a 3000 	ldrb.w	r3, [sl]
 8007a44:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a46:	d015      	beq.n	8007a74 <_vfiprintf_r+0x120>
 8007a48:	9a07      	ldr	r2, [sp, #28]
 8007a4a:	4654      	mov	r4, sl
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	f04f 0c0a 	mov.w	ip, #10
 8007a52:	4621      	mov	r1, r4
 8007a54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a58:	3b30      	subs	r3, #48	@ 0x30
 8007a5a:	2b09      	cmp	r3, #9
 8007a5c:	d94b      	bls.n	8007af6 <_vfiprintf_r+0x1a2>
 8007a5e:	b1b0      	cbz	r0, 8007a8e <_vfiprintf_r+0x13a>
 8007a60:	9207      	str	r2, [sp, #28]
 8007a62:	e014      	b.n	8007a8e <_vfiprintf_r+0x13a>
 8007a64:	eba0 0308 	sub.w	r3, r0, r8
 8007a68:	fa09 f303 	lsl.w	r3, r9, r3
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	9304      	str	r3, [sp, #16]
 8007a70:	46a2      	mov	sl, r4
 8007a72:	e7d2      	b.n	8007a1a <_vfiprintf_r+0xc6>
 8007a74:	9b03      	ldr	r3, [sp, #12]
 8007a76:	1d19      	adds	r1, r3, #4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	9103      	str	r1, [sp, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	bfbb      	ittet	lt
 8007a80:	425b      	neglt	r3, r3
 8007a82:	f042 0202 	orrlt.w	r2, r2, #2
 8007a86:	9307      	strge	r3, [sp, #28]
 8007a88:	9307      	strlt	r3, [sp, #28]
 8007a8a:	bfb8      	it	lt
 8007a8c:	9204      	strlt	r2, [sp, #16]
 8007a8e:	7823      	ldrb	r3, [r4, #0]
 8007a90:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a92:	d10a      	bne.n	8007aaa <_vfiprintf_r+0x156>
 8007a94:	7863      	ldrb	r3, [r4, #1]
 8007a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a98:	d132      	bne.n	8007b00 <_vfiprintf_r+0x1ac>
 8007a9a:	9b03      	ldr	r3, [sp, #12]
 8007a9c:	1d1a      	adds	r2, r3, #4
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	9203      	str	r2, [sp, #12]
 8007aa2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007aa6:	3402      	adds	r4, #2
 8007aa8:	9305      	str	r3, [sp, #20]
 8007aaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007b80 <_vfiprintf_r+0x22c>
 8007aae:	7821      	ldrb	r1, [r4, #0]
 8007ab0:	2203      	movs	r2, #3
 8007ab2:	4650      	mov	r0, sl
 8007ab4:	f7f8 fb8c 	bl	80001d0 <memchr>
 8007ab8:	b138      	cbz	r0, 8007aca <_vfiprintf_r+0x176>
 8007aba:	9b04      	ldr	r3, [sp, #16]
 8007abc:	eba0 000a 	sub.w	r0, r0, sl
 8007ac0:	2240      	movs	r2, #64	@ 0x40
 8007ac2:	4082      	lsls	r2, r0
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	3401      	adds	r4, #1
 8007ac8:	9304      	str	r3, [sp, #16]
 8007aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ace:	4829      	ldr	r0, [pc, #164]	@ (8007b74 <_vfiprintf_r+0x220>)
 8007ad0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ad4:	2206      	movs	r2, #6
 8007ad6:	f7f8 fb7b 	bl	80001d0 <memchr>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d03f      	beq.n	8007b5e <_vfiprintf_r+0x20a>
 8007ade:	4b26      	ldr	r3, [pc, #152]	@ (8007b78 <_vfiprintf_r+0x224>)
 8007ae0:	bb1b      	cbnz	r3, 8007b2a <_vfiprintf_r+0x1d6>
 8007ae2:	9b03      	ldr	r3, [sp, #12]
 8007ae4:	3307      	adds	r3, #7
 8007ae6:	f023 0307 	bic.w	r3, r3, #7
 8007aea:	3308      	adds	r3, #8
 8007aec:	9303      	str	r3, [sp, #12]
 8007aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af0:	443b      	add	r3, r7
 8007af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007af4:	e76a      	b.n	80079cc <_vfiprintf_r+0x78>
 8007af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007afa:	460c      	mov	r4, r1
 8007afc:	2001      	movs	r0, #1
 8007afe:	e7a8      	b.n	8007a52 <_vfiprintf_r+0xfe>
 8007b00:	2300      	movs	r3, #0
 8007b02:	3401      	adds	r4, #1
 8007b04:	9305      	str	r3, [sp, #20]
 8007b06:	4619      	mov	r1, r3
 8007b08:	f04f 0c0a 	mov.w	ip, #10
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b12:	3a30      	subs	r2, #48	@ 0x30
 8007b14:	2a09      	cmp	r2, #9
 8007b16:	d903      	bls.n	8007b20 <_vfiprintf_r+0x1cc>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0c6      	beq.n	8007aaa <_vfiprintf_r+0x156>
 8007b1c:	9105      	str	r1, [sp, #20]
 8007b1e:	e7c4      	b.n	8007aaa <_vfiprintf_r+0x156>
 8007b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b24:	4604      	mov	r4, r0
 8007b26:	2301      	movs	r3, #1
 8007b28:	e7f0      	b.n	8007b0c <_vfiprintf_r+0x1b8>
 8007b2a:	ab03      	add	r3, sp, #12
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	462a      	mov	r2, r5
 8007b30:	4b12      	ldr	r3, [pc, #72]	@ (8007b7c <_vfiprintf_r+0x228>)
 8007b32:	a904      	add	r1, sp, #16
 8007b34:	4630      	mov	r0, r6
 8007b36:	f7fd fbd7 	bl	80052e8 <_printf_float>
 8007b3a:	4607      	mov	r7, r0
 8007b3c:	1c78      	adds	r0, r7, #1
 8007b3e:	d1d6      	bne.n	8007aee <_vfiprintf_r+0x19a>
 8007b40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b42:	07d9      	lsls	r1, r3, #31
 8007b44:	d405      	bmi.n	8007b52 <_vfiprintf_r+0x1fe>
 8007b46:	89ab      	ldrh	r3, [r5, #12]
 8007b48:	059a      	lsls	r2, r3, #22
 8007b4a:	d402      	bmi.n	8007b52 <_vfiprintf_r+0x1fe>
 8007b4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b4e:	f7fe f927 	bl	8005da0 <__retarget_lock_release_recursive>
 8007b52:	89ab      	ldrh	r3, [r5, #12]
 8007b54:	065b      	lsls	r3, r3, #25
 8007b56:	f53f af1f 	bmi.w	8007998 <_vfiprintf_r+0x44>
 8007b5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b5c:	e71e      	b.n	800799c <_vfiprintf_r+0x48>
 8007b5e:	ab03      	add	r3, sp, #12
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	462a      	mov	r2, r5
 8007b64:	4b05      	ldr	r3, [pc, #20]	@ (8007b7c <_vfiprintf_r+0x228>)
 8007b66:	a904      	add	r1, sp, #16
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f7fd fe55 	bl	8005818 <_printf_i>
 8007b6e:	e7e4      	b.n	8007b3a <_vfiprintf_r+0x1e6>
 8007b70:	0800866f 	.word	0x0800866f
 8007b74:	08008679 	.word	0x08008679
 8007b78:	080052e9 	.word	0x080052e9
 8007b7c:	08007931 	.word	0x08007931
 8007b80:	08008675 	.word	0x08008675

08007b84 <__swbuf_r>:
 8007b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b86:	460e      	mov	r6, r1
 8007b88:	4614      	mov	r4, r2
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	b118      	cbz	r0, 8007b96 <__swbuf_r+0x12>
 8007b8e:	6a03      	ldr	r3, [r0, #32]
 8007b90:	b90b      	cbnz	r3, 8007b96 <__swbuf_r+0x12>
 8007b92:	f7fd ffeb 	bl	8005b6c <__sinit>
 8007b96:	69a3      	ldr	r3, [r4, #24]
 8007b98:	60a3      	str	r3, [r4, #8]
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	071a      	lsls	r2, r3, #28
 8007b9e:	d501      	bpl.n	8007ba4 <__swbuf_r+0x20>
 8007ba0:	6923      	ldr	r3, [r4, #16]
 8007ba2:	b943      	cbnz	r3, 8007bb6 <__swbuf_r+0x32>
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f000 f82a 	bl	8007c00 <__swsetup_r>
 8007bac:	b118      	cbz	r0, 8007bb6 <__swbuf_r+0x32>
 8007bae:	f04f 37ff 	mov.w	r7, #4294967295
 8007bb2:	4638      	mov	r0, r7
 8007bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	6922      	ldr	r2, [r4, #16]
 8007bba:	1a98      	subs	r0, r3, r2
 8007bbc:	6963      	ldr	r3, [r4, #20]
 8007bbe:	b2f6      	uxtb	r6, r6
 8007bc0:	4283      	cmp	r3, r0
 8007bc2:	4637      	mov	r7, r6
 8007bc4:	dc05      	bgt.n	8007bd2 <__swbuf_r+0x4e>
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	4628      	mov	r0, r5
 8007bca:	f7ff fda7 	bl	800771c <_fflush_r>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	d1ed      	bne.n	8007bae <__swbuf_r+0x2a>
 8007bd2:	68a3      	ldr	r3, [r4, #8]
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	60a3      	str	r3, [r4, #8]
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	6022      	str	r2, [r4, #0]
 8007bde:	701e      	strb	r6, [r3, #0]
 8007be0:	6962      	ldr	r2, [r4, #20]
 8007be2:	1c43      	adds	r3, r0, #1
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d004      	beq.n	8007bf2 <__swbuf_r+0x6e>
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	07db      	lsls	r3, r3, #31
 8007bec:	d5e1      	bpl.n	8007bb2 <__swbuf_r+0x2e>
 8007bee:	2e0a      	cmp	r6, #10
 8007bf0:	d1df      	bne.n	8007bb2 <__swbuf_r+0x2e>
 8007bf2:	4621      	mov	r1, r4
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	f7ff fd91 	bl	800771c <_fflush_r>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d0d9      	beq.n	8007bb2 <__swbuf_r+0x2e>
 8007bfe:	e7d6      	b.n	8007bae <__swbuf_r+0x2a>

08007c00 <__swsetup_r>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	4b29      	ldr	r3, [pc, #164]	@ (8007ca8 <__swsetup_r+0xa8>)
 8007c04:	4605      	mov	r5, r0
 8007c06:	6818      	ldr	r0, [r3, #0]
 8007c08:	460c      	mov	r4, r1
 8007c0a:	b118      	cbz	r0, 8007c14 <__swsetup_r+0x14>
 8007c0c:	6a03      	ldr	r3, [r0, #32]
 8007c0e:	b90b      	cbnz	r3, 8007c14 <__swsetup_r+0x14>
 8007c10:	f7fd ffac 	bl	8005b6c <__sinit>
 8007c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c18:	0719      	lsls	r1, r3, #28
 8007c1a:	d422      	bmi.n	8007c62 <__swsetup_r+0x62>
 8007c1c:	06da      	lsls	r2, r3, #27
 8007c1e:	d407      	bmi.n	8007c30 <__swsetup_r+0x30>
 8007c20:	2209      	movs	r2, #9
 8007c22:	602a      	str	r2, [r5, #0]
 8007c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c28:	81a3      	strh	r3, [r4, #12]
 8007c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2e:	e033      	b.n	8007c98 <__swsetup_r+0x98>
 8007c30:	0758      	lsls	r0, r3, #29
 8007c32:	d512      	bpl.n	8007c5a <__swsetup_r+0x5a>
 8007c34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c36:	b141      	cbz	r1, 8007c4a <__swsetup_r+0x4a>
 8007c38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c3c:	4299      	cmp	r1, r3
 8007c3e:	d002      	beq.n	8007c46 <__swsetup_r+0x46>
 8007c40:	4628      	mov	r0, r5
 8007c42:	f7fe ff15 	bl	8006a70 <_free_r>
 8007c46:	2300      	movs	r3, #0
 8007c48:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c50:	81a3      	strh	r3, [r4, #12]
 8007c52:	2300      	movs	r3, #0
 8007c54:	6063      	str	r3, [r4, #4]
 8007c56:	6923      	ldr	r3, [r4, #16]
 8007c58:	6023      	str	r3, [r4, #0]
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	f043 0308 	orr.w	r3, r3, #8
 8007c60:	81a3      	strh	r3, [r4, #12]
 8007c62:	6923      	ldr	r3, [r4, #16]
 8007c64:	b94b      	cbnz	r3, 8007c7a <__swsetup_r+0x7a>
 8007c66:	89a3      	ldrh	r3, [r4, #12]
 8007c68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c70:	d003      	beq.n	8007c7a <__swsetup_r+0x7a>
 8007c72:	4621      	mov	r1, r4
 8007c74:	4628      	mov	r0, r5
 8007c76:	f000 f883 	bl	8007d80 <__smakebuf_r>
 8007c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c7e:	f013 0201 	ands.w	r2, r3, #1
 8007c82:	d00a      	beq.n	8007c9a <__swsetup_r+0x9a>
 8007c84:	2200      	movs	r2, #0
 8007c86:	60a2      	str	r2, [r4, #8]
 8007c88:	6962      	ldr	r2, [r4, #20]
 8007c8a:	4252      	negs	r2, r2
 8007c8c:	61a2      	str	r2, [r4, #24]
 8007c8e:	6922      	ldr	r2, [r4, #16]
 8007c90:	b942      	cbnz	r2, 8007ca4 <__swsetup_r+0xa4>
 8007c92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c96:	d1c5      	bne.n	8007c24 <__swsetup_r+0x24>
 8007c98:	bd38      	pop	{r3, r4, r5, pc}
 8007c9a:	0799      	lsls	r1, r3, #30
 8007c9c:	bf58      	it	pl
 8007c9e:	6962      	ldrpl	r2, [r4, #20]
 8007ca0:	60a2      	str	r2, [r4, #8]
 8007ca2:	e7f4      	b.n	8007c8e <__swsetup_r+0x8e>
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	e7f7      	b.n	8007c98 <__swsetup_r+0x98>
 8007ca8:	20000130 	.word	0x20000130

08007cac <_raise_r>:
 8007cac:	291f      	cmp	r1, #31
 8007cae:	b538      	push	{r3, r4, r5, lr}
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	460c      	mov	r4, r1
 8007cb4:	d904      	bls.n	8007cc0 <_raise_r+0x14>
 8007cb6:	2316      	movs	r3, #22
 8007cb8:	6003      	str	r3, [r0, #0]
 8007cba:	f04f 30ff 	mov.w	r0, #4294967295
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007cc2:	b112      	cbz	r2, 8007cca <_raise_r+0x1e>
 8007cc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cc8:	b94b      	cbnz	r3, 8007cde <_raise_r+0x32>
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f000 f830 	bl	8007d30 <_getpid_r>
 8007cd0:	4622      	mov	r2, r4
 8007cd2:	4601      	mov	r1, r0
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cda:	f000 b817 	b.w	8007d0c <_kill_r>
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d00a      	beq.n	8007cf8 <_raise_r+0x4c>
 8007ce2:	1c59      	adds	r1, r3, #1
 8007ce4:	d103      	bne.n	8007cee <_raise_r+0x42>
 8007ce6:	2316      	movs	r3, #22
 8007ce8:	6003      	str	r3, [r0, #0]
 8007cea:	2001      	movs	r0, #1
 8007cec:	e7e7      	b.n	8007cbe <_raise_r+0x12>
 8007cee:	2100      	movs	r1, #0
 8007cf0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	4798      	blx	r3
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	e7e0      	b.n	8007cbe <_raise_r+0x12>

08007cfc <raise>:
 8007cfc:	4b02      	ldr	r3, [pc, #8]	@ (8007d08 <raise+0xc>)
 8007cfe:	4601      	mov	r1, r0
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	f7ff bfd3 	b.w	8007cac <_raise_r>
 8007d06:	bf00      	nop
 8007d08:	20000130 	.word	0x20000130

08007d0c <_kill_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4d07      	ldr	r5, [pc, #28]	@ (8007d2c <_kill_r+0x20>)
 8007d10:	2300      	movs	r3, #0
 8007d12:	4604      	mov	r4, r0
 8007d14:	4608      	mov	r0, r1
 8007d16:	4611      	mov	r1, r2
 8007d18:	602b      	str	r3, [r5, #0]
 8007d1a:	f7f9 fdd6 	bl	80018ca <_kill>
 8007d1e:	1c43      	adds	r3, r0, #1
 8007d20:	d102      	bne.n	8007d28 <_kill_r+0x1c>
 8007d22:	682b      	ldr	r3, [r5, #0]
 8007d24:	b103      	cbz	r3, 8007d28 <_kill_r+0x1c>
 8007d26:	6023      	str	r3, [r4, #0]
 8007d28:	bd38      	pop	{r3, r4, r5, pc}
 8007d2a:	bf00      	nop
 8007d2c:	200008a8 	.word	0x200008a8

08007d30 <_getpid_r>:
 8007d30:	f7f9 bdc3 	b.w	80018ba <_getpid>

08007d34 <__swhatbuf_r>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	460c      	mov	r4, r1
 8007d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3c:	2900      	cmp	r1, #0
 8007d3e:	b096      	sub	sp, #88	@ 0x58
 8007d40:	4615      	mov	r5, r2
 8007d42:	461e      	mov	r6, r3
 8007d44:	da0d      	bge.n	8007d62 <__swhatbuf_r+0x2e>
 8007d46:	89a3      	ldrh	r3, [r4, #12]
 8007d48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d4c:	f04f 0100 	mov.w	r1, #0
 8007d50:	bf14      	ite	ne
 8007d52:	2340      	movne	r3, #64	@ 0x40
 8007d54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d58:	2000      	movs	r0, #0
 8007d5a:	6031      	str	r1, [r6, #0]
 8007d5c:	602b      	str	r3, [r5, #0]
 8007d5e:	b016      	add	sp, #88	@ 0x58
 8007d60:	bd70      	pop	{r4, r5, r6, pc}
 8007d62:	466a      	mov	r2, sp
 8007d64:	f000 f848 	bl	8007df8 <_fstat_r>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	dbec      	blt.n	8007d46 <__swhatbuf_r+0x12>
 8007d6c:	9901      	ldr	r1, [sp, #4]
 8007d6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d76:	4259      	negs	r1, r3
 8007d78:	4159      	adcs	r1, r3
 8007d7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d7e:	e7eb      	b.n	8007d58 <__swhatbuf_r+0x24>

08007d80 <__smakebuf_r>:
 8007d80:	898b      	ldrh	r3, [r1, #12]
 8007d82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d84:	079d      	lsls	r5, r3, #30
 8007d86:	4606      	mov	r6, r0
 8007d88:	460c      	mov	r4, r1
 8007d8a:	d507      	bpl.n	8007d9c <__smakebuf_r+0x1c>
 8007d8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	6123      	str	r3, [r4, #16]
 8007d94:	2301      	movs	r3, #1
 8007d96:	6163      	str	r3, [r4, #20]
 8007d98:	b003      	add	sp, #12
 8007d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d9c:	ab01      	add	r3, sp, #4
 8007d9e:	466a      	mov	r2, sp
 8007da0:	f7ff ffc8 	bl	8007d34 <__swhatbuf_r>
 8007da4:	9f00      	ldr	r7, [sp, #0]
 8007da6:	4605      	mov	r5, r0
 8007da8:	4639      	mov	r1, r7
 8007daa:	4630      	mov	r0, r6
 8007dac:	f7fe fed4 	bl	8006b58 <_malloc_r>
 8007db0:	b948      	cbnz	r0, 8007dc6 <__smakebuf_r+0x46>
 8007db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007db6:	059a      	lsls	r2, r3, #22
 8007db8:	d4ee      	bmi.n	8007d98 <__smakebuf_r+0x18>
 8007dba:	f023 0303 	bic.w	r3, r3, #3
 8007dbe:	f043 0302 	orr.w	r3, r3, #2
 8007dc2:	81a3      	strh	r3, [r4, #12]
 8007dc4:	e7e2      	b.n	8007d8c <__smakebuf_r+0xc>
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	6020      	str	r0, [r4, #0]
 8007dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dce:	81a3      	strh	r3, [r4, #12]
 8007dd0:	9b01      	ldr	r3, [sp, #4]
 8007dd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007dd6:	b15b      	cbz	r3, 8007df0 <__smakebuf_r+0x70>
 8007dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f000 f81d 	bl	8007e1c <_isatty_r>
 8007de2:	b128      	cbz	r0, 8007df0 <__smakebuf_r+0x70>
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	f023 0303 	bic.w	r3, r3, #3
 8007dea:	f043 0301 	orr.w	r3, r3, #1
 8007dee:	81a3      	strh	r3, [r4, #12]
 8007df0:	89a3      	ldrh	r3, [r4, #12]
 8007df2:	431d      	orrs	r5, r3
 8007df4:	81a5      	strh	r5, [r4, #12]
 8007df6:	e7cf      	b.n	8007d98 <__smakebuf_r+0x18>

08007df8 <_fstat_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	4d07      	ldr	r5, [pc, #28]	@ (8007e18 <_fstat_r+0x20>)
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	4604      	mov	r4, r0
 8007e00:	4608      	mov	r0, r1
 8007e02:	4611      	mov	r1, r2
 8007e04:	602b      	str	r3, [r5, #0]
 8007e06:	f7f9 fdc0 	bl	800198a <_fstat>
 8007e0a:	1c43      	adds	r3, r0, #1
 8007e0c:	d102      	bne.n	8007e14 <_fstat_r+0x1c>
 8007e0e:	682b      	ldr	r3, [r5, #0]
 8007e10:	b103      	cbz	r3, 8007e14 <_fstat_r+0x1c>
 8007e12:	6023      	str	r3, [r4, #0]
 8007e14:	bd38      	pop	{r3, r4, r5, pc}
 8007e16:	bf00      	nop
 8007e18:	200008a8 	.word	0x200008a8

08007e1c <_isatty_r>:
 8007e1c:	b538      	push	{r3, r4, r5, lr}
 8007e1e:	4d06      	ldr	r5, [pc, #24]	@ (8007e38 <_isatty_r+0x1c>)
 8007e20:	2300      	movs	r3, #0
 8007e22:	4604      	mov	r4, r0
 8007e24:	4608      	mov	r0, r1
 8007e26:	602b      	str	r3, [r5, #0]
 8007e28:	f7f9 fdbf 	bl	80019aa <_isatty>
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d102      	bne.n	8007e36 <_isatty_r+0x1a>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	b103      	cbz	r3, 8007e36 <_isatty_r+0x1a>
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	200008a8 	.word	0x200008a8

08007e3c <atan2>:
 8007e3c:	f000 b904 	b.w	8008048 <__ieee754_atan2>

08007e40 <sqrt>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	ed2d 8b02 	vpush	{d8}
 8007e46:	ec55 4b10 	vmov	r4, r5, d0
 8007e4a:	f000 f825 	bl	8007e98 <__ieee754_sqrt>
 8007e4e:	4622      	mov	r2, r4
 8007e50:	462b      	mov	r3, r5
 8007e52:	4620      	mov	r0, r4
 8007e54:	4629      	mov	r1, r5
 8007e56:	eeb0 8a40 	vmov.f32	s16, s0
 8007e5a:	eef0 8a60 	vmov.f32	s17, s1
 8007e5e:	f7f8 fe65 	bl	8000b2c <__aeabi_dcmpun>
 8007e62:	b990      	cbnz	r0, 8007e8a <sqrt+0x4a>
 8007e64:	2200      	movs	r2, #0
 8007e66:	2300      	movs	r3, #0
 8007e68:	4620      	mov	r0, r4
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	f7f8 fe36 	bl	8000adc <__aeabi_dcmplt>
 8007e70:	b158      	cbz	r0, 8007e8a <sqrt+0x4a>
 8007e72:	f7fd ff69 	bl	8005d48 <__errno>
 8007e76:	2321      	movs	r3, #33	@ 0x21
 8007e78:	6003      	str	r3, [r0, #0]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4610      	mov	r0, r2
 8007e80:	4619      	mov	r1, r3
 8007e82:	f7f8 fce3 	bl	800084c <__aeabi_ddiv>
 8007e86:	ec41 0b18 	vmov	d8, r0, r1
 8007e8a:	eeb0 0a48 	vmov.f32	s0, s16
 8007e8e:	eef0 0a68 	vmov.f32	s1, s17
 8007e92:	ecbd 8b02 	vpop	{d8}
 8007e96:	bd38      	pop	{r3, r4, r5, pc}

08007e98 <__ieee754_sqrt>:
 8007e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9c:	4a66      	ldr	r2, [pc, #408]	@ (8008038 <__ieee754_sqrt+0x1a0>)
 8007e9e:	ec55 4b10 	vmov	r4, r5, d0
 8007ea2:	43aa      	bics	r2, r5
 8007ea4:	462b      	mov	r3, r5
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	d110      	bne.n	8007ecc <__ieee754_sqrt+0x34>
 8007eaa:	4622      	mov	r2, r4
 8007eac:	4620      	mov	r0, r4
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f7f8 fba2 	bl	80005f8 <__aeabi_dmul>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4620      	mov	r0, r4
 8007eba:	4629      	mov	r1, r5
 8007ebc:	f7f8 f9e6 	bl	800028c <__adddf3>
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	460d      	mov	r5, r1
 8007ec4:	ec45 4b10 	vmov	d0, r4, r5
 8007ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ecc:	2d00      	cmp	r5, #0
 8007ece:	dc0e      	bgt.n	8007eee <__ieee754_sqrt+0x56>
 8007ed0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007ed4:	4322      	orrs	r2, r4
 8007ed6:	d0f5      	beq.n	8007ec4 <__ieee754_sqrt+0x2c>
 8007ed8:	b19d      	cbz	r5, 8007f02 <__ieee754_sqrt+0x6a>
 8007eda:	4622      	mov	r2, r4
 8007edc:	4620      	mov	r0, r4
 8007ede:	4629      	mov	r1, r5
 8007ee0:	f7f8 f9d2 	bl	8000288 <__aeabi_dsub>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	f7f8 fcb0 	bl	800084c <__aeabi_ddiv>
 8007eec:	e7e8      	b.n	8007ec0 <__ieee754_sqrt+0x28>
 8007eee:	152a      	asrs	r2, r5, #20
 8007ef0:	d115      	bne.n	8007f1e <__ieee754_sqrt+0x86>
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	e009      	b.n	8007f0a <__ieee754_sqrt+0x72>
 8007ef6:	0acb      	lsrs	r3, r1, #11
 8007ef8:	3a15      	subs	r2, #21
 8007efa:	0549      	lsls	r1, r1, #21
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d0fa      	beq.n	8007ef6 <__ieee754_sqrt+0x5e>
 8007f00:	e7f7      	b.n	8007ef2 <__ieee754_sqrt+0x5a>
 8007f02:	462a      	mov	r2, r5
 8007f04:	e7fa      	b.n	8007efc <__ieee754_sqrt+0x64>
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	3001      	adds	r0, #1
 8007f0a:	02dc      	lsls	r4, r3, #11
 8007f0c:	d5fb      	bpl.n	8007f06 <__ieee754_sqrt+0x6e>
 8007f0e:	1e44      	subs	r4, r0, #1
 8007f10:	1b12      	subs	r2, r2, r4
 8007f12:	f1c0 0420 	rsb	r4, r0, #32
 8007f16:	fa21 f404 	lsr.w	r4, r1, r4
 8007f1a:	4323      	orrs	r3, r4
 8007f1c:	4081      	lsls	r1, r0
 8007f1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f22:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8007f26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f2a:	07d2      	lsls	r2, r2, #31
 8007f2c:	bf5c      	itt	pl
 8007f2e:	005b      	lslpl	r3, r3, #1
 8007f30:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007f34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007f38:	bf58      	it	pl
 8007f3a:	0049      	lslpl	r1, r1, #1
 8007f3c:	2600      	movs	r6, #0
 8007f3e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007f42:	107f      	asrs	r7, r7, #1
 8007f44:	0049      	lsls	r1, r1, #1
 8007f46:	2016      	movs	r0, #22
 8007f48:	4632      	mov	r2, r6
 8007f4a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007f4e:	1915      	adds	r5, r2, r4
 8007f50:	429d      	cmp	r5, r3
 8007f52:	bfde      	ittt	le
 8007f54:	192a      	addle	r2, r5, r4
 8007f56:	1b5b      	suble	r3, r3, r5
 8007f58:	1936      	addle	r6, r6, r4
 8007f5a:	0fcd      	lsrs	r5, r1, #31
 8007f5c:	3801      	subs	r0, #1
 8007f5e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8007f62:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007f66:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007f6a:	d1f0      	bne.n	8007f4e <__ieee754_sqrt+0xb6>
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	2420      	movs	r4, #32
 8007f70:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007f74:	4293      	cmp	r3, r2
 8007f76:	eb0c 0e00 	add.w	lr, ip, r0
 8007f7a:	dc02      	bgt.n	8007f82 <__ieee754_sqrt+0xea>
 8007f7c:	d113      	bne.n	8007fa6 <__ieee754_sqrt+0x10e>
 8007f7e:	458e      	cmp	lr, r1
 8007f80:	d811      	bhi.n	8007fa6 <__ieee754_sqrt+0x10e>
 8007f82:	f1be 0f00 	cmp.w	lr, #0
 8007f86:	eb0e 000c 	add.w	r0, lr, ip
 8007f8a:	da3f      	bge.n	800800c <__ieee754_sqrt+0x174>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	db3d      	blt.n	800800c <__ieee754_sqrt+0x174>
 8007f90:	f102 0801 	add.w	r8, r2, #1
 8007f94:	1a9b      	subs	r3, r3, r2
 8007f96:	458e      	cmp	lr, r1
 8007f98:	bf88      	it	hi
 8007f9a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007f9e:	eba1 010e 	sub.w	r1, r1, lr
 8007fa2:	4465      	add	r5, ip
 8007fa4:	4642      	mov	r2, r8
 8007fa6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007faa:	3c01      	subs	r4, #1
 8007fac:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007fb0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007fb4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007fb8:	d1dc      	bne.n	8007f74 <__ieee754_sqrt+0xdc>
 8007fba:	4319      	orrs	r1, r3
 8007fbc:	d01b      	beq.n	8007ff6 <__ieee754_sqrt+0x15e>
 8007fbe:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800803c <__ieee754_sqrt+0x1a4>
 8007fc2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8008040 <__ieee754_sqrt+0x1a8>
 8007fc6:	e9da 0100 	ldrd	r0, r1, [sl]
 8007fca:	e9db 2300 	ldrd	r2, r3, [fp]
 8007fce:	f7f8 f95b 	bl	8000288 <__aeabi_dsub>
 8007fd2:	e9da 8900 	ldrd	r8, r9, [sl]
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4640      	mov	r0, r8
 8007fdc:	4649      	mov	r1, r9
 8007fde:	f7f8 fd87 	bl	8000af0 <__aeabi_dcmple>
 8007fe2:	b140      	cbz	r0, 8007ff6 <__ieee754_sqrt+0x15e>
 8007fe4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007fe8:	e9da 0100 	ldrd	r0, r1, [sl]
 8007fec:	e9db 2300 	ldrd	r2, r3, [fp]
 8007ff0:	d10e      	bne.n	8008010 <__ieee754_sqrt+0x178>
 8007ff2:	3601      	adds	r6, #1
 8007ff4:	4625      	mov	r5, r4
 8007ff6:	1073      	asrs	r3, r6, #1
 8007ff8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ffc:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8008000:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8008004:	086b      	lsrs	r3, r5, #1
 8008006:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800800a:	e759      	b.n	8007ec0 <__ieee754_sqrt+0x28>
 800800c:	4690      	mov	r8, r2
 800800e:	e7c1      	b.n	8007f94 <__ieee754_sqrt+0xfc>
 8008010:	f7f8 f93c 	bl	800028c <__adddf3>
 8008014:	e9da 8900 	ldrd	r8, r9, [sl]
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4640      	mov	r0, r8
 800801e:	4649      	mov	r1, r9
 8008020:	f7f8 fd5c 	bl	8000adc <__aeabi_dcmplt>
 8008024:	b120      	cbz	r0, 8008030 <__ieee754_sqrt+0x198>
 8008026:	1cab      	adds	r3, r5, #2
 8008028:	bf08      	it	eq
 800802a:	3601      	addeq	r6, #1
 800802c:	3502      	adds	r5, #2
 800802e:	e7e2      	b.n	8007ff6 <__ieee754_sqrt+0x15e>
 8008030:	1c6b      	adds	r3, r5, #1
 8008032:	f023 0501 	bic.w	r5, r3, #1
 8008036:	e7de      	b.n	8007ff6 <__ieee754_sqrt+0x15e>
 8008038:	7ff00000 	.word	0x7ff00000
 800803c:	080088d8 	.word	0x080088d8
 8008040:	080088d0 	.word	0x080088d0
 8008044:	00000000 	.word	0x00000000

08008048 <__ieee754_atan2>:
 8008048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800804c:	ec57 6b11 	vmov	r6, r7, d1
 8008050:	4273      	negs	r3, r6
 8008052:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80081d0 <__ieee754_atan2+0x188>
 8008056:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800805a:	4333      	orrs	r3, r6
 800805c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008060:	4543      	cmp	r3, r8
 8008062:	ec51 0b10 	vmov	r0, r1, d0
 8008066:	4635      	mov	r5, r6
 8008068:	d809      	bhi.n	800807e <__ieee754_atan2+0x36>
 800806a:	4244      	negs	r4, r0
 800806c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008070:	4304      	orrs	r4, r0
 8008072:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008076:	4544      	cmp	r4, r8
 8008078:	468e      	mov	lr, r1
 800807a:	4681      	mov	r9, r0
 800807c:	d907      	bls.n	800808e <__ieee754_atan2+0x46>
 800807e:	4632      	mov	r2, r6
 8008080:	463b      	mov	r3, r7
 8008082:	f7f8 f903 	bl	800028c <__adddf3>
 8008086:	ec41 0b10 	vmov	d0, r0, r1
 800808a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800808e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8008092:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8008096:	4334      	orrs	r4, r6
 8008098:	d103      	bne.n	80080a2 <__ieee754_atan2+0x5a>
 800809a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800809e:	f000 b89b 	b.w	80081d8 <atan>
 80080a2:	17bc      	asrs	r4, r7, #30
 80080a4:	f004 0402 	and.w	r4, r4, #2
 80080a8:	ea53 0909 	orrs.w	r9, r3, r9
 80080ac:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80080b0:	d107      	bne.n	80080c2 <__ieee754_atan2+0x7a>
 80080b2:	2c02      	cmp	r4, #2
 80080b4:	d05f      	beq.n	8008176 <__ieee754_atan2+0x12e>
 80080b6:	2c03      	cmp	r4, #3
 80080b8:	d1e5      	bne.n	8008086 <__ieee754_atan2+0x3e>
 80080ba:	a143      	add	r1, pc, #268	@ (adr r1, 80081c8 <__ieee754_atan2+0x180>)
 80080bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080c0:	e7e1      	b.n	8008086 <__ieee754_atan2+0x3e>
 80080c2:	4315      	orrs	r5, r2
 80080c4:	d106      	bne.n	80080d4 <__ieee754_atan2+0x8c>
 80080c6:	f1be 0f00 	cmp.w	lr, #0
 80080ca:	db5f      	blt.n	800818c <__ieee754_atan2+0x144>
 80080cc:	a136      	add	r1, pc, #216	@ (adr r1, 80081a8 <__ieee754_atan2+0x160>)
 80080ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080d2:	e7d8      	b.n	8008086 <__ieee754_atan2+0x3e>
 80080d4:	4542      	cmp	r2, r8
 80080d6:	d10f      	bne.n	80080f8 <__ieee754_atan2+0xb0>
 80080d8:	4293      	cmp	r3, r2
 80080da:	f104 34ff 	add.w	r4, r4, #4294967295
 80080de:	d107      	bne.n	80080f0 <__ieee754_atan2+0xa8>
 80080e0:	2c02      	cmp	r4, #2
 80080e2:	d84c      	bhi.n	800817e <__ieee754_atan2+0x136>
 80080e4:	4b36      	ldr	r3, [pc, #216]	@ (80081c0 <__ieee754_atan2+0x178>)
 80080e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080ee:	e7ca      	b.n	8008086 <__ieee754_atan2+0x3e>
 80080f0:	2c02      	cmp	r4, #2
 80080f2:	d848      	bhi.n	8008186 <__ieee754_atan2+0x13e>
 80080f4:	4b33      	ldr	r3, [pc, #204]	@ (80081c4 <__ieee754_atan2+0x17c>)
 80080f6:	e7f6      	b.n	80080e6 <__ieee754_atan2+0x9e>
 80080f8:	4543      	cmp	r3, r8
 80080fa:	d0e4      	beq.n	80080c6 <__ieee754_atan2+0x7e>
 80080fc:	1a9b      	subs	r3, r3, r2
 80080fe:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8008102:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008106:	da1e      	bge.n	8008146 <__ieee754_atan2+0xfe>
 8008108:	2f00      	cmp	r7, #0
 800810a:	da01      	bge.n	8008110 <__ieee754_atan2+0xc8>
 800810c:	323c      	adds	r2, #60	@ 0x3c
 800810e:	db1e      	blt.n	800814e <__ieee754_atan2+0x106>
 8008110:	4632      	mov	r2, r6
 8008112:	463b      	mov	r3, r7
 8008114:	f7f8 fb9a 	bl	800084c <__aeabi_ddiv>
 8008118:	ec41 0b10 	vmov	d0, r0, r1
 800811c:	f000 f9f4 	bl	8008508 <fabs>
 8008120:	f000 f85a 	bl	80081d8 <atan>
 8008124:	ec51 0b10 	vmov	r0, r1, d0
 8008128:	2c01      	cmp	r4, #1
 800812a:	d013      	beq.n	8008154 <__ieee754_atan2+0x10c>
 800812c:	2c02      	cmp	r4, #2
 800812e:	d015      	beq.n	800815c <__ieee754_atan2+0x114>
 8008130:	2c00      	cmp	r4, #0
 8008132:	d0a8      	beq.n	8008086 <__ieee754_atan2+0x3e>
 8008134:	a318      	add	r3, pc, #96	@ (adr r3, 8008198 <__ieee754_atan2+0x150>)
 8008136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813a:	f7f8 f8a5 	bl	8000288 <__aeabi_dsub>
 800813e:	a318      	add	r3, pc, #96	@ (adr r3, 80081a0 <__ieee754_atan2+0x158>)
 8008140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008144:	e014      	b.n	8008170 <__ieee754_atan2+0x128>
 8008146:	a118      	add	r1, pc, #96	@ (adr r1, 80081a8 <__ieee754_atan2+0x160>)
 8008148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800814c:	e7ec      	b.n	8008128 <__ieee754_atan2+0xe0>
 800814e:	2000      	movs	r0, #0
 8008150:	2100      	movs	r1, #0
 8008152:	e7e9      	b.n	8008128 <__ieee754_atan2+0xe0>
 8008154:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008158:	4619      	mov	r1, r3
 800815a:	e794      	b.n	8008086 <__ieee754_atan2+0x3e>
 800815c:	a30e      	add	r3, pc, #56	@ (adr r3, 8008198 <__ieee754_atan2+0x150>)
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f7f8 f891 	bl	8000288 <__aeabi_dsub>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	a10d      	add	r1, pc, #52	@ (adr r1, 80081a0 <__ieee754_atan2+0x158>)
 800816c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008170:	f7f8 f88a 	bl	8000288 <__aeabi_dsub>
 8008174:	e787      	b.n	8008086 <__ieee754_atan2+0x3e>
 8008176:	a10a      	add	r1, pc, #40	@ (adr r1, 80081a0 <__ieee754_atan2+0x158>)
 8008178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800817c:	e783      	b.n	8008086 <__ieee754_atan2+0x3e>
 800817e:	a10c      	add	r1, pc, #48	@ (adr r1, 80081b0 <__ieee754_atan2+0x168>)
 8008180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008184:	e77f      	b.n	8008086 <__ieee754_atan2+0x3e>
 8008186:	2000      	movs	r0, #0
 8008188:	2100      	movs	r1, #0
 800818a:	e77c      	b.n	8008086 <__ieee754_atan2+0x3e>
 800818c:	a10a      	add	r1, pc, #40	@ (adr r1, 80081b8 <__ieee754_atan2+0x170>)
 800818e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008192:	e778      	b.n	8008086 <__ieee754_atan2+0x3e>
 8008194:	f3af 8000 	nop.w
 8008198:	33145c07 	.word	0x33145c07
 800819c:	3ca1a626 	.word	0x3ca1a626
 80081a0:	54442d18 	.word	0x54442d18
 80081a4:	400921fb 	.word	0x400921fb
 80081a8:	54442d18 	.word	0x54442d18
 80081ac:	3ff921fb 	.word	0x3ff921fb
 80081b0:	54442d18 	.word	0x54442d18
 80081b4:	3fe921fb 	.word	0x3fe921fb
 80081b8:	54442d18 	.word	0x54442d18
 80081bc:	bff921fb 	.word	0xbff921fb
 80081c0:	080088f8 	.word	0x080088f8
 80081c4:	080088e0 	.word	0x080088e0
 80081c8:	54442d18 	.word	0x54442d18
 80081cc:	c00921fb 	.word	0xc00921fb
 80081d0:	7ff00000 	.word	0x7ff00000
 80081d4:	00000000 	.word	0x00000000

080081d8 <atan>:
 80081d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	ec55 4b10 	vmov	r4, r5, d0
 80081e0:	4bbf      	ldr	r3, [pc, #764]	@ (80084e0 <atan+0x308>)
 80081e2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80081e6:	429e      	cmp	r6, r3
 80081e8:	46ab      	mov	fp, r5
 80081ea:	d918      	bls.n	800821e <atan+0x46>
 80081ec:	4bbd      	ldr	r3, [pc, #756]	@ (80084e4 <atan+0x30c>)
 80081ee:	429e      	cmp	r6, r3
 80081f0:	d801      	bhi.n	80081f6 <atan+0x1e>
 80081f2:	d109      	bne.n	8008208 <atan+0x30>
 80081f4:	b144      	cbz	r4, 8008208 <atan+0x30>
 80081f6:	4622      	mov	r2, r4
 80081f8:	462b      	mov	r3, r5
 80081fa:	4620      	mov	r0, r4
 80081fc:	4629      	mov	r1, r5
 80081fe:	f7f8 f845 	bl	800028c <__adddf3>
 8008202:	4604      	mov	r4, r0
 8008204:	460d      	mov	r5, r1
 8008206:	e006      	b.n	8008216 <atan+0x3e>
 8008208:	f1bb 0f00 	cmp.w	fp, #0
 800820c:	f340 812b 	ble.w	8008466 <atan+0x28e>
 8008210:	a597      	add	r5, pc, #604	@ (adr r5, 8008470 <atan+0x298>)
 8008212:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008216:	ec45 4b10 	vmov	d0, r4, r5
 800821a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821e:	4bb2      	ldr	r3, [pc, #712]	@ (80084e8 <atan+0x310>)
 8008220:	429e      	cmp	r6, r3
 8008222:	d813      	bhi.n	800824c <atan+0x74>
 8008224:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8008228:	429e      	cmp	r6, r3
 800822a:	d80c      	bhi.n	8008246 <atan+0x6e>
 800822c:	a392      	add	r3, pc, #584	@ (adr r3, 8008478 <atan+0x2a0>)
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	4620      	mov	r0, r4
 8008234:	4629      	mov	r1, r5
 8008236:	f7f8 f829 	bl	800028c <__adddf3>
 800823a:	4bac      	ldr	r3, [pc, #688]	@ (80084ec <atan+0x314>)
 800823c:	2200      	movs	r2, #0
 800823e:	f7f8 fc6b 	bl	8000b18 <__aeabi_dcmpgt>
 8008242:	2800      	cmp	r0, #0
 8008244:	d1e7      	bne.n	8008216 <atan+0x3e>
 8008246:	f04f 3aff 	mov.w	sl, #4294967295
 800824a:	e029      	b.n	80082a0 <atan+0xc8>
 800824c:	f000 f95c 	bl	8008508 <fabs>
 8008250:	4ba7      	ldr	r3, [pc, #668]	@ (80084f0 <atan+0x318>)
 8008252:	429e      	cmp	r6, r3
 8008254:	ec55 4b10 	vmov	r4, r5, d0
 8008258:	f200 80bc 	bhi.w	80083d4 <atan+0x1fc>
 800825c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8008260:	429e      	cmp	r6, r3
 8008262:	f200 809e 	bhi.w	80083a2 <atan+0x1ca>
 8008266:	4622      	mov	r2, r4
 8008268:	462b      	mov	r3, r5
 800826a:	4620      	mov	r0, r4
 800826c:	4629      	mov	r1, r5
 800826e:	f7f8 f80d 	bl	800028c <__adddf3>
 8008272:	4b9e      	ldr	r3, [pc, #632]	@ (80084ec <atan+0x314>)
 8008274:	2200      	movs	r2, #0
 8008276:	f7f8 f807 	bl	8000288 <__aeabi_dsub>
 800827a:	2200      	movs	r2, #0
 800827c:	4606      	mov	r6, r0
 800827e:	460f      	mov	r7, r1
 8008280:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008284:	4620      	mov	r0, r4
 8008286:	4629      	mov	r1, r5
 8008288:	f7f8 f800 	bl	800028c <__adddf3>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4630      	mov	r0, r6
 8008292:	4639      	mov	r1, r7
 8008294:	f7f8 fada 	bl	800084c <__aeabi_ddiv>
 8008298:	f04f 0a00 	mov.w	sl, #0
 800829c:	4604      	mov	r4, r0
 800829e:	460d      	mov	r5, r1
 80082a0:	4622      	mov	r2, r4
 80082a2:	462b      	mov	r3, r5
 80082a4:	4620      	mov	r0, r4
 80082a6:	4629      	mov	r1, r5
 80082a8:	f7f8 f9a6 	bl	80005f8 <__aeabi_dmul>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4680      	mov	r8, r0
 80082b2:	4689      	mov	r9, r1
 80082b4:	f7f8 f9a0 	bl	80005f8 <__aeabi_dmul>
 80082b8:	a371      	add	r3, pc, #452	@ (adr r3, 8008480 <atan+0x2a8>)
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	4606      	mov	r6, r0
 80082c0:	460f      	mov	r7, r1
 80082c2:	f7f8 f999 	bl	80005f8 <__aeabi_dmul>
 80082c6:	a370      	add	r3, pc, #448	@ (adr r3, 8008488 <atan+0x2b0>)
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	f7f7 ffde 	bl	800028c <__adddf3>
 80082d0:	4632      	mov	r2, r6
 80082d2:	463b      	mov	r3, r7
 80082d4:	f7f8 f990 	bl	80005f8 <__aeabi_dmul>
 80082d8:	a36d      	add	r3, pc, #436	@ (adr r3, 8008490 <atan+0x2b8>)
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	f7f7 ffd5 	bl	800028c <__adddf3>
 80082e2:	4632      	mov	r2, r6
 80082e4:	463b      	mov	r3, r7
 80082e6:	f7f8 f987 	bl	80005f8 <__aeabi_dmul>
 80082ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8008498 <atan+0x2c0>)
 80082ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f0:	f7f7 ffcc 	bl	800028c <__adddf3>
 80082f4:	4632      	mov	r2, r6
 80082f6:	463b      	mov	r3, r7
 80082f8:	f7f8 f97e 	bl	80005f8 <__aeabi_dmul>
 80082fc:	a368      	add	r3, pc, #416	@ (adr r3, 80084a0 <atan+0x2c8>)
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	f7f7 ffc3 	bl	800028c <__adddf3>
 8008306:	4632      	mov	r2, r6
 8008308:	463b      	mov	r3, r7
 800830a:	f7f8 f975 	bl	80005f8 <__aeabi_dmul>
 800830e:	a366      	add	r3, pc, #408	@ (adr r3, 80084a8 <atan+0x2d0>)
 8008310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008314:	f7f7 ffba 	bl	800028c <__adddf3>
 8008318:	4642      	mov	r2, r8
 800831a:	464b      	mov	r3, r9
 800831c:	f7f8 f96c 	bl	80005f8 <__aeabi_dmul>
 8008320:	a363      	add	r3, pc, #396	@ (adr r3, 80084b0 <atan+0x2d8>)
 8008322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008326:	4680      	mov	r8, r0
 8008328:	4689      	mov	r9, r1
 800832a:	4630      	mov	r0, r6
 800832c:	4639      	mov	r1, r7
 800832e:	f7f8 f963 	bl	80005f8 <__aeabi_dmul>
 8008332:	a361      	add	r3, pc, #388	@ (adr r3, 80084b8 <atan+0x2e0>)
 8008334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008338:	f7f7 ffa6 	bl	8000288 <__aeabi_dsub>
 800833c:	4632      	mov	r2, r6
 800833e:	463b      	mov	r3, r7
 8008340:	f7f8 f95a 	bl	80005f8 <__aeabi_dmul>
 8008344:	a35e      	add	r3, pc, #376	@ (adr r3, 80084c0 <atan+0x2e8>)
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	f7f7 ff9d 	bl	8000288 <__aeabi_dsub>
 800834e:	4632      	mov	r2, r6
 8008350:	463b      	mov	r3, r7
 8008352:	f7f8 f951 	bl	80005f8 <__aeabi_dmul>
 8008356:	a35c      	add	r3, pc, #368	@ (adr r3, 80084c8 <atan+0x2f0>)
 8008358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835c:	f7f7 ff94 	bl	8000288 <__aeabi_dsub>
 8008360:	4632      	mov	r2, r6
 8008362:	463b      	mov	r3, r7
 8008364:	f7f8 f948 	bl	80005f8 <__aeabi_dmul>
 8008368:	a359      	add	r3, pc, #356	@ (adr r3, 80084d0 <atan+0x2f8>)
 800836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836e:	f7f7 ff8b 	bl	8000288 <__aeabi_dsub>
 8008372:	4632      	mov	r2, r6
 8008374:	463b      	mov	r3, r7
 8008376:	f7f8 f93f 	bl	80005f8 <__aeabi_dmul>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	4640      	mov	r0, r8
 8008380:	4649      	mov	r1, r9
 8008382:	f7f7 ff83 	bl	800028c <__adddf3>
 8008386:	4622      	mov	r2, r4
 8008388:	462b      	mov	r3, r5
 800838a:	f7f8 f935 	bl	80005f8 <__aeabi_dmul>
 800838e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008392:	4602      	mov	r2, r0
 8008394:	460b      	mov	r3, r1
 8008396:	d148      	bne.n	800842a <atan+0x252>
 8008398:	4620      	mov	r0, r4
 800839a:	4629      	mov	r1, r5
 800839c:	f7f7 ff74 	bl	8000288 <__aeabi_dsub>
 80083a0:	e72f      	b.n	8008202 <atan+0x2a>
 80083a2:	4b52      	ldr	r3, [pc, #328]	@ (80084ec <atan+0x314>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	4620      	mov	r0, r4
 80083a8:	4629      	mov	r1, r5
 80083aa:	f7f7 ff6d 	bl	8000288 <__aeabi_dsub>
 80083ae:	4b4f      	ldr	r3, [pc, #316]	@ (80084ec <atan+0x314>)
 80083b0:	4606      	mov	r6, r0
 80083b2:	460f      	mov	r7, r1
 80083b4:	2200      	movs	r2, #0
 80083b6:	4620      	mov	r0, r4
 80083b8:	4629      	mov	r1, r5
 80083ba:	f7f7 ff67 	bl	800028c <__adddf3>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	4630      	mov	r0, r6
 80083c4:	4639      	mov	r1, r7
 80083c6:	f7f8 fa41 	bl	800084c <__aeabi_ddiv>
 80083ca:	f04f 0a01 	mov.w	sl, #1
 80083ce:	4604      	mov	r4, r0
 80083d0:	460d      	mov	r5, r1
 80083d2:	e765      	b.n	80082a0 <atan+0xc8>
 80083d4:	4b47      	ldr	r3, [pc, #284]	@ (80084f4 <atan+0x31c>)
 80083d6:	429e      	cmp	r6, r3
 80083d8:	d21c      	bcs.n	8008414 <atan+0x23c>
 80083da:	4b47      	ldr	r3, [pc, #284]	@ (80084f8 <atan+0x320>)
 80083dc:	2200      	movs	r2, #0
 80083de:	4620      	mov	r0, r4
 80083e0:	4629      	mov	r1, r5
 80083e2:	f7f7 ff51 	bl	8000288 <__aeabi_dsub>
 80083e6:	4b44      	ldr	r3, [pc, #272]	@ (80084f8 <atan+0x320>)
 80083e8:	4606      	mov	r6, r0
 80083ea:	460f      	mov	r7, r1
 80083ec:	2200      	movs	r2, #0
 80083ee:	4620      	mov	r0, r4
 80083f0:	4629      	mov	r1, r5
 80083f2:	f7f8 f901 	bl	80005f8 <__aeabi_dmul>
 80083f6:	4b3d      	ldr	r3, [pc, #244]	@ (80084ec <atan+0x314>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	f7f7 ff47 	bl	800028c <__adddf3>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4630      	mov	r0, r6
 8008404:	4639      	mov	r1, r7
 8008406:	f7f8 fa21 	bl	800084c <__aeabi_ddiv>
 800840a:	f04f 0a02 	mov.w	sl, #2
 800840e:	4604      	mov	r4, r0
 8008410:	460d      	mov	r5, r1
 8008412:	e745      	b.n	80082a0 <atan+0xc8>
 8008414:	4622      	mov	r2, r4
 8008416:	462b      	mov	r3, r5
 8008418:	4938      	ldr	r1, [pc, #224]	@ (80084fc <atan+0x324>)
 800841a:	2000      	movs	r0, #0
 800841c:	f7f8 fa16 	bl	800084c <__aeabi_ddiv>
 8008420:	f04f 0a03 	mov.w	sl, #3
 8008424:	4604      	mov	r4, r0
 8008426:	460d      	mov	r5, r1
 8008428:	e73a      	b.n	80082a0 <atan+0xc8>
 800842a:	4b35      	ldr	r3, [pc, #212]	@ (8008500 <atan+0x328>)
 800842c:	4e35      	ldr	r6, [pc, #212]	@ (8008504 <atan+0x32c>)
 800842e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008436:	f7f7 ff27 	bl	8000288 <__aeabi_dsub>
 800843a:	4622      	mov	r2, r4
 800843c:	462b      	mov	r3, r5
 800843e:	f7f7 ff23 	bl	8000288 <__aeabi_dsub>
 8008442:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800844e:	f7f7 ff1b 	bl	8000288 <__aeabi_dsub>
 8008452:	f1bb 0f00 	cmp.w	fp, #0
 8008456:	4604      	mov	r4, r0
 8008458:	460d      	mov	r5, r1
 800845a:	f6bf aedc 	bge.w	8008216 <atan+0x3e>
 800845e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008462:	461d      	mov	r5, r3
 8008464:	e6d7      	b.n	8008216 <atan+0x3e>
 8008466:	a51c      	add	r5, pc, #112	@ (adr r5, 80084d8 <atan+0x300>)
 8008468:	e9d5 4500 	ldrd	r4, r5, [r5]
 800846c:	e6d3      	b.n	8008216 <atan+0x3e>
 800846e:	bf00      	nop
 8008470:	54442d18 	.word	0x54442d18
 8008474:	3ff921fb 	.word	0x3ff921fb
 8008478:	8800759c 	.word	0x8800759c
 800847c:	7e37e43c 	.word	0x7e37e43c
 8008480:	e322da11 	.word	0xe322da11
 8008484:	3f90ad3a 	.word	0x3f90ad3a
 8008488:	24760deb 	.word	0x24760deb
 800848c:	3fa97b4b 	.word	0x3fa97b4b
 8008490:	a0d03d51 	.word	0xa0d03d51
 8008494:	3fb10d66 	.word	0x3fb10d66
 8008498:	c54c206e 	.word	0xc54c206e
 800849c:	3fb745cd 	.word	0x3fb745cd
 80084a0:	920083ff 	.word	0x920083ff
 80084a4:	3fc24924 	.word	0x3fc24924
 80084a8:	5555550d 	.word	0x5555550d
 80084ac:	3fd55555 	.word	0x3fd55555
 80084b0:	2c6a6c2f 	.word	0x2c6a6c2f
 80084b4:	bfa2b444 	.word	0xbfa2b444
 80084b8:	52defd9a 	.word	0x52defd9a
 80084bc:	3fadde2d 	.word	0x3fadde2d
 80084c0:	af749a6d 	.word	0xaf749a6d
 80084c4:	3fb3b0f2 	.word	0x3fb3b0f2
 80084c8:	fe231671 	.word	0xfe231671
 80084cc:	3fbc71c6 	.word	0x3fbc71c6
 80084d0:	9998ebc4 	.word	0x9998ebc4
 80084d4:	3fc99999 	.word	0x3fc99999
 80084d8:	54442d18 	.word	0x54442d18
 80084dc:	bff921fb 	.word	0xbff921fb
 80084e0:	440fffff 	.word	0x440fffff
 80084e4:	7ff00000 	.word	0x7ff00000
 80084e8:	3fdbffff 	.word	0x3fdbffff
 80084ec:	3ff00000 	.word	0x3ff00000
 80084f0:	3ff2ffff 	.word	0x3ff2ffff
 80084f4:	40038000 	.word	0x40038000
 80084f8:	3ff80000 	.word	0x3ff80000
 80084fc:	bff00000 	.word	0xbff00000
 8008500:	08008910 	.word	0x08008910
 8008504:	08008930 	.word	0x08008930

08008508 <fabs>:
 8008508:	ec51 0b10 	vmov	r0, r1, d0
 800850c:	4602      	mov	r2, r0
 800850e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008512:	ec43 2b10 	vmov	d0, r2, r3
 8008516:	4770      	bx	lr

08008518 <_init>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	bf00      	nop
 800851c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851e:	bc08      	pop	{r3}
 8008520:	469e      	mov	lr, r3
 8008522:	4770      	bx	lr

08008524 <_fini>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr
